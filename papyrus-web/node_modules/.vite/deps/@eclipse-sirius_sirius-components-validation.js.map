{
  "version": 3,
  "sources": ["../../../../node_modules/@eclipse-sirius/sirius-components-validation/dist/sirius-components-validation.es.js"],
  "sourcesContent": ["import { jsx, jsxs, Fragment } from \"react/jsx-runtime\";\nimport { gql, useSubscription } from \"@apollo/client\";\nimport { Toast } from \"@eclipse-sirius/sirius-components-core\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { useMachine } from \"@xstate/react\";\nimport { useEffect } from \"react\";\nimport { Machine, assign } from \"xstate\";\nconst isValidationRefreshedEventPayload = (payload) => payload.__typename === \"ValidationRefreshedEventPayload\";\nconst validationViewMachine = Machine(\n  {\n    type: \"parallel\",\n    context: {\n      id: crypto.randomUUID(),\n      validation: null,\n      message: null\n    },\n    states: {\n      toast: {\n        initial: \"hidden\",\n        states: {\n          hidden: {\n            on: {\n              SHOW_TOAST: {\n                target: \"visible\",\n                actions: \"setMessage\"\n              }\n            }\n          },\n          visible: {\n            on: {\n              HIDE_TOAST: {\n                target: \"hidden\",\n                actions: \"clearMessage\"\n              }\n            }\n          }\n        }\n      },\n      validationView: {\n        initial: \"idle\",\n        states: {\n          idle: {\n            on: {\n              HANDLE_SUBSCRIPTION_RESULT: [\n                {\n                  cond: \"isValidationRefreshedEventPayload\",\n                  target: \"ready\",\n                  actions: \"handleSubscriptionResult\"\n                },\n                {\n                  target: \"idle\",\n                  actions: \"handleSubscriptionResult\"\n                }\n              ]\n            }\n          },\n          ready: {\n            on: {\n              HANDLE_SUBSCRIPTION_RESULT: {\n                target: \"ready\",\n                actions: \"handleSubscriptionResult\"\n              },\n              HANDLE_COMPLETE: {\n                target: \"complete\"\n              }\n            }\n          },\n          complete: {\n            type: \"final\"\n          }\n        }\n      }\n    }\n  },\n  {\n    guards: {\n      isValidationRefreshedEventPayload: (_, event) => {\n        const { result } = event;\n        const { data } = result;\n        return !!data && isValidationRefreshedEventPayload(data.validationEvent);\n      }\n    },\n    actions: {\n      handleSubscriptionResult: assign((_, event) => {\n        const { result } = event;\n        const { data } = result;\n        if (data && isValidationRefreshedEventPayload(data.validationEvent)) {\n          const { validation } = data.validationEvent;\n          const categories = [];\n          const processedValidation = { categories };\n          validation.diagnostics.forEach((diagnostic) => {\n            let category = categories.find((category2) => category2.kind === diagnostic.kind);\n            if (!category) {\n              category = {\n                kind: diagnostic.kind,\n                diagnostics: []\n              };\n              categories.push(category);\n            }\n            category.diagnostics.push({ id: diagnostic.id, message: diagnostic.message });\n          });\n          return { validation: processedValidation };\n        }\n        return {};\n      }),\n      setMessage: assign((_, event) => {\n        const { message } = event;\n        return { message };\n      }),\n      clearMessage: assign((_) => {\n        return { message: null };\n      })\n    }\n  }\n);\nconst validationEventSubscription = gql`\n  subscription validationEvent($input: ValidationEventInput!) {\n    validationEvent(input: $input) {\n      __typename\n      ... on ValidationRefreshedEventPayload {\n        id\n        validation {\n          id\n          diagnostics {\n            id\n            kind\n            message\n          }\n        }\n      }\n    }\n  }\n`;\nconst useValidationViewStyle = makeStyles((theme) => ({\n  root: {\n    padding: \"8px\"\n  },\n  heading: {\n    flexBasis: \"33.33%\",\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    color: theme.palette.text.secondary\n  },\n  accordionDetailsRoot: {\n    flexDirection: \"column\"\n  },\n  divider: {\n    margin: \"8px 0\"\n  },\n  idle: {\n    padding: theme.spacing(1)\n  }\n}));\nconst ValidationView = ({ editingContextId }) => {\n  const classes = useValidationViewStyle();\n  const [{ value, context }, dispatch] = useMachine(validationViewMachine);\n  const { toast, validationView } = value;\n  const { id, validation, message } = context;\n  const { error } = useSubscription(\n    validationEventSubscription,\n    {\n      variables: {\n        input: {\n          id,\n          editingContextId\n        }\n      },\n      fetchPolicy: \"no-cache\",\n      onData: ({ data }) => {\n        const handleDataEvent = {\n          type: \"HANDLE_SUBSCRIPTION_RESULT\",\n          result: data\n        };\n        dispatch(handleDataEvent);\n      },\n      onComplete: () => {\n        const completeEvent = { type: \"HANDLE_COMPLETE\" };\n        dispatch(completeEvent);\n      }\n    }\n  );\n  useEffect(() => {\n    if (error) {\n      const { message: message2 } = error;\n      const showToastEvent = { type: \"SHOW_TOAST\", message: message2 };\n      dispatch(showToastEvent);\n    }\n  }, [error, dispatch]);\n  let content = null;\n  if (validationView === \"ready\" && validation) {\n    const accordions = validation.categories.map((category) => {\n      const details = category.diagnostics.map((diagnostic) => {\n        return /* @__PURE__ */ jsx(Typography, { children: diagnostic.message }, diagnostic.id);\n      }).reduce((prev, current, index) => [\n        prev,\n        /* @__PURE__ */ jsx(Divider, { className: classes.divider }, `Divider-${index}`),\n        current\n      ]);\n      return /* @__PURE__ */ jsxs(Accordion, { children: [\n        /* @__PURE__ */ jsxs(AccordionSummary, { expandIcon: /* @__PURE__ */ jsx(ExpandMore, {}), children: [\n          /* @__PURE__ */ jsx(Typography, { className: classes.heading, children: category.kind }),\n          /* @__PURE__ */ jsxs(Typography, { className: classes.secondaryHeading, children: [\n            category.diagnostics.length,\n            \" diagnostics\"\n          ] })\n        ] }),\n        /* @__PURE__ */ jsx(AccordionDetails, { className: classes.accordionDetailsRoot, children: details })\n      ] }, category.kind);\n    });\n    if (accordions.length > 0) {\n      content = /* @__PURE__ */ jsx(\"div\", { className: classes.root, children: accordions });\n    } else {\n      content = /* @__PURE__ */ jsx(\"div\", { className: classes.idle, children: /* @__PURE__ */ jsx(Typography, { variant: \"subtitle2\", children: \"No diagnostic available\" }) });\n    }\n  }\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    content,\n    /* @__PURE__ */ jsx(\n      Toast,\n      {\n        message: message ?? \"\",\n        open: toast === \"visible\",\n        onClose: () => dispatch({ type: \"HIDE_TOAST\" })\n      }\n    )\n  ] });\n};\nexport {\n  ValidationView\n};\n"],
  "mappings": "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",
  "names": ["import_react"]
}
