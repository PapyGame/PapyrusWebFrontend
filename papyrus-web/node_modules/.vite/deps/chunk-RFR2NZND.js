import {
  SwitchBase_default
} from "./chunk-UTKIQ5NH.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-4JITSZEO.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-TZNDNIQK.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-YGDE4KKL.js";
import {
  alpha,
  init_colorManipulator
} from "./chunk-D3SGUVA5.js";
import {
  _objectWithoutProperties,
  init_esm,
  init_objectWithoutProperties,
  refType_default
} from "./chunk-WQUDTCFH.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-OBJPNOCR.js";
import {
  _extends,
  init_extends,
  require_prop_types
} from "./chunk-PYVGESTF.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js
init_extends();
init_objectWithoutProperties();
var React4 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js
var React = __toESM(require_react());
init_createSvgIcon();
var CheckBoxOutlineBlank_default = createSvgIcon(React.createElement("path", {
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}), "CheckBoxOutlineBlank");

// ../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js
var React2 = __toESM(require_react());
init_createSvgIcon();
var CheckBox_default = createSvgIcon(React2.createElement("path", {
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckBox");

// ../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js
init_colorManipulator();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js
var React3 = __toESM(require_react());
init_createSvgIcon();
var IndeterminateCheckBox_default = createSvgIcon(React3.createElement("path", {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), "IndeterminateCheckBox");

// ../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js
init_capitalize();
init_withStyles();
var styles = function styles2(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary
    },
    /* Pseudo-class applied to the root element if `checked={true}`. */
    checked: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Pseudo-class applied to the root element if `indeterminate={true}`. */
    indeterminate: {},
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      "&$checked": {
        color: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.action.disabled
      }
    },
    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      "&$checked": {
        color: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.action.disabled
      }
    }
  };
};
var defaultCheckedIcon = React4.createElement(CheckBox_default, null);
var defaultIcon = React4.createElement(CheckBoxOutlineBlank_default, null);
var defaultIndeterminateIcon = React4.createElement(IndeterminateCheckBox_default, null);
var Checkbox = React4.forwardRef(function Checkbox2(props, ref) {
  var _props$checkedIcon = props.checkedIcon, checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon, classes = props.classes, _props$color = props.color, color = _props$color === void 0 ? "secondary" : _props$color, _props$icon = props.icon, iconProp = _props$icon === void 0 ? defaultIcon : _props$icon, _props$indeterminate = props.indeterminate, indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate, _props$indeterminateI = props.indeterminateIcon, indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI, inputProps = props.inputProps, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);
  var icon = indeterminate ? indeterminateIconProp : iconProp;
  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
  return React4.createElement(SwitchBase_default, _extends({
    type: "checkbox",
    classes: {
      root: clsx_m_default(classes.root, classes["color".concat(capitalize(color))], indeterminate && classes.indeterminate),
      checked: classes.checked,
      disabled: classes.disabled
    },
    color,
    inputProps: _extends({
      "data-indeterminate": indeterminate
    }, inputProps),
    icon: React4.cloneElement(icon, {
      fontSize: icon.props.fontSize === void 0 && size === "small" ? size : icon.props.fontSize
    }),
    checkedIcon: React4.cloneElement(indeterminateIcon, {
      fontSize: indeterminateIcon.props.fontSize === void 0 && size === "small" ? size : indeterminateIcon.props.fontSize
    }),
    ref
  }, other));
});
true ? Checkbox.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types.default.object,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types.default.oneOf(["default", "primary", "secondary"]),
  /**
   * If `true`, the checkbox will be disabled.
   */
  disabled: import_prop_types.default.bool,
  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: import_prop_types.default.bool,
  /**
   * The icon to display when the component is unchecked.
   */
  icon: import_prop_types.default.node,
  /**
   * The id of the `input` element.
   */
  id: import_prop_types.default.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the input.
   */
  indeterminate: import_prop_types.default.bool,
  /**
   * The icon to display when the component is indeterminate.
   */
  indeterminateIcon: import_prop_types.default.node,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: import_prop_types.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types.default.func,
  /**
   * If `true`, the `input` element will be required.
   */
  required: import_prop_types.default.bool,
  /**
   * The size of the checkbox.
   * `small` is equivalent to the dense checkbox styling.
   */
  size: import_prop_types.default.oneOf(["medium", "small"]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: import_prop_types.default.any
} : void 0;
var Checkbox_default = withStyles_default(styles, {
  name: "MuiCheckbox"
})(Checkbox);

export {
  Checkbox_default
};
//# sourceMappingURL=chunk-RFR2NZND.js.map
