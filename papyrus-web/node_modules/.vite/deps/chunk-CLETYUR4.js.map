{
  "version": 3,
  "sources": ["../../../../node_modules/@material-ui/core/esm/AccordionSummary/AccordionSummary.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/* eslint-disable jsx-a11y/aria-role */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport ButtonBase from '../ButtonBase';\nimport IconButton from '../IconButton';\nimport withStyles from '../styles/withStyles';\nimport AccordionContext from '../Accordion/AccordionContext';\nexport var styles = function styles(theme) {\n  var transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      minHeight: 8 * 6,\n      transition: theme.transitions.create(['min-height', 'background-color'], transition),\n      padding: theme.spacing(0, 2),\n      '&:hover:not($disabled)': {\n        cursor: 'pointer'\n      },\n      '&$expanded': {\n        minHeight: 64\n      },\n      '&$focused, &$focusVisible': {\n        backgroundColor: theme.palette.action.focus\n      },\n      '&$disabled': {\n        opacity: theme.palette.action.disabledOpacity\n      }\n    },\n\n    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */\n    expanded: {},\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focused: {},\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the children wrapper element. */\n    content: {\n      display: 'flex',\n      flexGrow: 1,\n      transition: theme.transitions.create(['margin'], transition),\n      margin: '12px 0',\n      '&$expanded': {\n        margin: '20px 0'\n      }\n    },\n\n    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */\n    expandIcon: {\n      transform: 'rotate(0deg)',\n      transition: theme.transitions.create('transform', transition),\n      '&:hover': {\n        // Disable the hover effect for the IconButton,\n        // because a hover effect should apply to the entire Expand button and\n        // not only to the IconButton.\n        backgroundColor: 'transparent'\n      },\n      '&$expanded': {\n        transform: 'rotate(180deg)'\n      }\n    }\n  };\n};\nvar AccordionSummary = /*#__PURE__*/React.forwardRef(function AccordionSummary(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      expandIcon = props.expandIcon,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$IconButtonProp = props.IconButtonProps,\n      IconButtonProps = _props$IconButtonProp === void 0 ? {} : _props$IconButtonProp,\n      onClick = props.onClick,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"expandIcon\", \"focusVisibleClassName\", \"IconButtonProps\", \"onClick\"]);\n\n  var _React$useContext = React.useContext(AccordionContext),\n      _React$useContext$dis = _React$useContext.disabled,\n      disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,\n      expanded = _React$useContext.expanded,\n      toggle = _React$useContext.toggle;\n\n  var handleChange = function handleChange(event) {\n    if (toggle) {\n      toggle(event);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    focusRipple: false,\n    disableRipple: true,\n    disabled: disabled,\n    component: \"div\",\n    \"aria-expanded\": expanded,\n    className: clsx(classes.root, className, disabled && classes.disabled, expanded && classes.expanded),\n    focusVisibleClassName: clsx(classes.focusVisible, classes.focused, focusVisibleClassName),\n    onClick: handleChange,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.content, expanded && classes.expanded)\n  }, children), expandIcon && /*#__PURE__*/React.createElement(IconButton, _extends({\n    className: clsx(classes.expandIcon, expanded && classes.expanded),\n    edge: \"end\",\n    component: \"div\",\n    tabIndex: null,\n    role: null,\n    \"aria-hidden\": true\n  }, IconButtonProps), expandIcon));\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionSummary.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the accordion summary.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: chainPropTypes(PropTypes.object, function (props) {\n    // Guard against when generation of classes is disabled in the stylesheets (`disableGeneration`).\n    // For `disableGeneration` we don't have an accurate warning but `disableGeneration` is an advanced use case anyway.\n    if (props.classes.focused !== undefined && props.classes.focused.indexOf(' ') !== -1) {\n      return new Error(['Material-UI: The `classes.focused` key is deprecated.', 'Use `classes.focusVisible` instead.', 'The name of the pseudo-class was changed for consistency.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * Props applied to the `IconButton` element wrapping the expand icon.\n   */\n  IconButtonProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAccordionSummary'\n})(AccordionSummary);"],
  "mappings": "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",
  "names": ["styles", "AccordionSummary", "handleChange", "PropTypes"]
}
