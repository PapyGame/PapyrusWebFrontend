{
  "version": 3,
  "sources": ["../../../../node_modules/@material-ui/core/styles/colorManipulator.js"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.rgbToHex = rgbToHex;\nexports.hslToRgb = hslToRgb;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.alpha = alpha;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _utils = require(\"@material-ui/utils\");\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map(function (n, index) {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : (0, _utils.formatMuiErrorMessage)(3, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(function (val) {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\nvar warnedOnce = false;\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n *\n * @deprecated\n * Use `import { alpha } from '@material-ui/core/styles'` instead.\n */\n\nfunction fade(color, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      warnedOnce = true;\n      console.error(['Material-UI: The `fade` color utility was renamed to `alpha` to better describe its functionality.', '', \"You should use `import { alpha } from '@material-ui/core/styles'`\"].join('\\n'));\n    }\n  }\n\n  return alpha(color, value);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha value is overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0-1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"],
  "mappings": "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",
  "names": ["f"]
}
