import {
  require_jsx_runtime
} from "./chunk-MN6XLW6Q.js";
import {
  useMachine
} from "./chunk-J34WXHB4.js";
import {
  Machine,
  assign
} from "./chunk-SRTTMZV5.js";
import {
  require_Close
} from "./chunk-KRCK54RH.js";
import {
  require_createSvgIcon
} from "./chunk-7AV4KTZL.js";
import {
  WarningOutlined_default
} from "./chunk-DJCLTQTG.js";
import {
  require_interopRequireDefault,
  require_interopRequireWildcard
} from "./chunk-7RCLPMH3.js";
import {
  Tab_default,
  Tabs_default,
  amber_default,
  blueGrey_default,
  brown_default,
  cyan_default,
  deepOrange_default,
  deepPurple_default,
  lightBlue_default,
  lightGreen_default,
  lime_default,
  purple_default,
  teal_default,
  yellow_default
} from "./chunk-LJHHLN5M.js";
import {
  Tooltip_default
} from "./chunk-B6AM2NKK.js";
import {
  makeStyles_default,
  responsiveFontSizes
} from "./chunk-VM2MZLUW.js";
import {
  Snackbar_default
} from "./chunk-WGZDRRR5.js";
import {
  DialogActions_default
} from "./chunk-DEPENL6S.js";
import {
  DialogTitle_default
} from "./chunk-EC4OINFY.js";
import {
  FormControlLabel_default
} from "./chunk-MJ6MIMBS.js";
import {
  Checkbox_default
} from "./chunk-RFR2NZND.js";
import {
  Dialog_default
} from "./chunk-WGHK5OTH.js";
import {
  DialogContent_default
} from "./chunk-T3A56L2S.js";
import {
  DialogContentText_default
} from "./chunk-QSUIRVO3.js";
import {
  Typography_default
} from "./chunk-OSUJ7GDT.js";
import {
  IconButton_default
} from "./chunk-TSYRDUXI.js";
import {
  Button_default
} from "./chunk-BADD6I46.js";
import {
  blue_default,
  common_default,
  createTheme_default,
  green_default,
  grey_default,
  indigo_default,
  orange_default,
  pink_default,
  red_default
} from "./chunk-D3SGUVA5.js";
import {
  useSubscription
} from "./chunk-Z2MHMT5I.js";
import {
  gql
} from "./chunk-JJXTUFQN.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@material-ui/icons/CheckBox.js
var require_CheckBox = __commonJS({
  "../node_modules/@material-ui/icons/CheckBox.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/CheckBoxOutlineBlank.js
var require_CheckBoxOutlineBlank = __commonJS({
  "../node_modules/@material-ui/icons/CheckBoxOutlineBlank.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
    exports.default = _default;
  }
});

// ../node_modules/@eclipse-sirius/sirius-components-core/dist/sirius-components-core.es.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_CheckBox = __toESM(require_CheckBox());
var import_CheckBoxOutlineBlank = __toESM(require_CheckBoxOutlineBlank());
var import_Close = __toESM(require_Close());
var muiColors = {
  amber: amber_default,
  blue: blue_default,
  blueGrey: blueGrey_default,
  brown: brown_default,
  common: common_default,
  cyan: cyan_default,
  deepOrange: deepOrange_default,
  deepPurple: deepPurple_default,
  green: green_default,
  grey: grey_default,
  indigo: indigo_default,
  lightBlue: lightBlue_default,
  lightGreen: lightGreen_default,
  lime: lime_default,
  orange: orange_default,
  pink: pink_default,
  purple: purple_default,
  red: red_default,
  teal: teal_default,
  yellow: yellow_default
};
var getCSSColor = (value2, theme2) => {
  let cssColor = value2;
  if (value2) {
    if (value2 === "theme.palette.primary.main") {
      cssColor = theme2.palette.primary.main;
    } else if (value2 === "theme.palette.primary.light") {
      cssColor = theme2.palette.primary.light;
    } else if (value2 === "theme.palette.primary.dark") {
      cssColor = theme2.palette.primary.dark;
    } else if (value2 === "theme.palette.secondary.main") {
      cssColor = theme2.palette.secondary.main;
    } else if (value2 === "theme.palette.secondary.light") {
      cssColor = theme2.palette.secondary.light;
    } else if (value2 === "theme.palette.secondary.dark") {
      cssColor = theme2.palette.secondary.dark;
    } else if (value2 === "theme.palette.text.primary") {
      cssColor = theme2.palette.text.primary;
    } else if (value2 === "theme.palette.text.disabled") {
      cssColor = theme2.palette.text.disabled;
    } else if (value2 === "theme.palette.text.hint") {
      cssColor = theme2.palette.text.hint;
    } else if (value2 === "theme.palette.error.main") {
      cssColor = theme2.palette.error.main;
    } else if (value2 === "theme.palette.error.light") {
      cssColor = theme2.palette.error.light;
    } else if (value2 === "theme.palette.error.dark") {
      cssColor = theme2.palette.error.dark;
    } else {
      const colorName = value2.substring(0, value2.indexOf("["));
      const colorValue = value2.substring(value2.indexOf("[") + 1, value2.length - 1);
      if (colorName && colorValue) {
        cssColor = muiColors[colorName][colorValue];
      }
    }
  }
  return cssColor;
};
var value$3 = {
  getRepresentationPath: () => ""
};
var RepresentationPathContext = import_react.default.createContext(value$3);
var value$2 = { httpOrigin: "" };
var ServerContext = import_react.default.createContext(value$2);
var value$1 = {
  enqueueSnackbar: () => {
  }
};
var ToastContext = import_react.default.createContext(value$1);
var DRAG_SOURCES_TYPE = "sirius-component/drag/sources";
var ExtensionRegistry = class {
  constructor() {
    this.components = {};
    this.data = {};
  }
  addComponent(extensionPoint, extension) {
    if (!this.components[extensionPoint.identifier]) {
      this.components[extensionPoint.identifier] = [];
    }
    const componentExtensions = this.components[extensionPoint.identifier];
    if (componentExtensions) {
      componentExtensions.push(extension);
    }
  }
  findComponentById(extensionPoint) {
    const componentExtensions = this.components[extensionPoint.identifier];
    if (componentExtensions && componentExtensions[0]) {
      return componentExtensions[0];
    }
    return null;
  }
  findAllComponents(extensionPoint) {
    return this.components[extensionPoint.identifier] || [];
  }
  putData(extensionPoint, extension) {
    this.data[extensionPoint.identifier] = extension;
  }
  getData(extensionPoint) {
    return this.data[extensionPoint.identifier] ?? null;
  }
  addAll(extensionRegistry) {
    Object.entries(extensionRegistry.components).forEach((entry) => {
      this.components[entry[0]] = entry[1];
    });
    Object.entries(extensionRegistry.data).forEach((entry) => {
      this.data[entry[0]] = entry[1];
    });
  }
};
var ExtensionContext = import_react.default.createContext({
  registry: new ExtensionRegistry()
});
var ExtensionProvider = ({ children, registry: registry2 }) => {
  return (0, import_jsx_runtime.jsx)(ExtensionContext.Provider, { value: { registry: registry2 }, children });
};
function useComponent(extensionPoint) {
  const { registry: registry2 } = (0, import_react.useContext)(ExtensionContext);
  const componentExtension = registry2.findComponentById(extensionPoint);
  if (!componentExtension) {
    const componentExtension2 = {
      Component: extensionPoint.FallbackComponent
    };
    return componentExtension2;
  }
  return componentExtension;
}
function useComponents(extensionPoint) {
  const { registry: registry2 } = (0, import_react.useContext)(ExtensionContext);
  return registry2.findAllComponents(extensionPoint);
}
function useData(extensionPoint) {
  const { registry: registry2 } = (0, import_react.useContext)(ExtensionContext);
  const dataExtension = registry2.getData(extensionPoint);
  if (dataExtension) {
    return dataExtension;
  }
  return { data: extensionPoint.fallback };
}
var useStyles = makeStyles_default((_theme) => ({
  iconContainer: {
    position: "relative",
    width: ({ iconWidth }) => `${iconWidth}px`,
    height: ({ iconHeight }) => `${iconHeight}px`
  },
  icon: {
    position: "absolute",
    top: 0,
    left: 0
  }
}));
var IconOverlay = ({
  iconURL,
  alt,
  title,
  customIconWidth,
  customIconHeight,
  customIconStyle
}) => {
  const iconWidth = customIconWidth || 16;
  const iconHeight = customIconHeight || 16;
  const classes = useStyles({ iconHeight, iconWidth });
  const { httpOrigin } = (0, import_react.useContext)(ServerContext);
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (iconURL == null ? void 0 : iconURL.length) > 0 && (0, import_jsx_runtime.jsx)("div", { className: classes.iconContainer, style: { ...customIconStyle }, children: iconURL.map((url, index) => (0, import_jsx_runtime.jsx)(Tooltip_default, { title: title || "", children: (0, import_jsx_runtime.jsx)(
    "img",
    {
      height: iconHeight,
      width: iconWidth,
      alt,
      src: httpOrigin + url,
      className: classes.icon,
      style: { zIndex: index }
    },
    index
  ) }, "tooltip_" + index)) }) });
};
var useConfirmationDialogStyles = makeStyles_default((theme2) => ({
  title: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    paddingTop: theme2.spacing(2)
  },
  titleIcon: {
    color: theme2.palette.error.main,
    fontSize: "50px"
  },
  message: {
    whiteSpace: "pre-line",
    textAlign: "center"
  },
  checkbox: {
    "&:hover": {
      color: theme2.palette.error.main
    }
  },
  checkboxChecked: {
    color: theme2.palette.error.main
  },
  checkboxLabel: {
    color: theme2.palette.text.secondary
  },
  confirmButton: {
    backgroundColor: theme2.palette.error.main,
    color: "white",
    "&:hover": {
      backgroundColor: theme2.palette.error.dark
    }
  }
}));
var ConfirmationDialog = ({
  open,
  title,
  message,
  buttonLabel,
  confirmationDisabled,
  onConfirmationDisabledChange,
  onConfirm,
  onCancel
}) => {
  const classes = useConfirmationDialogStyles();
  return (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsxs)(Dialog_default, { open, onClose: onCancel, "aria-labelledby": "confirmation-dialog", "data-testid": "confirmation-dialog", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.title, children: [
      (0, import_jsx_runtime.jsx)(WarningOutlined_default, { className: classes.titleIcon }),
      (0, import_jsx_runtime.jsx)(DialogTitle_default, { "data-testid": "confirmation-dialog-title", children: title })
    ] }),
    (0, import_jsx_runtime.jsxs)(DialogContent_default, { children: [
      (0, import_jsx_runtime.jsx)(DialogContentText_default, { className: classes.message, "data-testid": "confirmation-dialog-message", children: message }),
      (0, import_jsx_runtime.jsx)(
        FormControlLabel_default,
        {
          control: (0, import_jsx_runtime.jsx)(
            Checkbox_default,
            {
              "data-testid": "confirmation-dialog-checkbox-disabled",
              className: classes.checkbox,
              checked: confirmationDisabled,
              onChange: (event) => onConfirmationDisabledChange(event.target.checked),
              icon: (0, import_jsx_runtime.jsx)(import_CheckBoxOutlineBlank.default, { fontSize: "small" }),
              checkedIcon: (0, import_jsx_runtime.jsx)(import_CheckBox.default, { className: classes.checkboxChecked, fontSize: "small" })
            }
          ),
          label: (0, import_jsx_runtime.jsx)(Typography_default, { className: classes.checkboxLabel, variant: "body2", children: "Disable this confirmation dialog" })
        }
      )
    ] }),
    (0, import_jsx_runtime.jsxs)(DialogActions_default, { children: [
      (0, import_jsx_runtime.jsx)(
        Button_default,
        {
          "data-testid": "confirmation-dialog-button-ok",
          className: classes.confirmButton,
          onClick: onConfirm,
          variant: "contained",
          children: buttonLabel
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Button_default,
        {
          "data-testid": "confirmation-dialog-button-cancel",
          onClick: onCancel,
          variant: "outlined",
          color: "secondary",
          autoFocus: true,
          children: "Cancel"
        }
      )
    ] })
  ] }) });
};
var defaultValue$1 = {
  showConfirmation: () => {
  }
};
var ConfirmationDialogContext = import_react.default.createContext(defaultValue$1);
var ConfirmationDialogContextProvider = ({ children }) => {
  const localStorageKey = "sirius-confirmation-dialog-disabled";
  const storedPreference = localStorage.getItem(localStorageKey);
  const initialConfirmationDisabled = storedPreference ? JSON.parse(storedPreference) : false;
  const [state, setState] = (0, import_react.useState)({
    open: false,
    confirmationDisabled: initialConfirmationDisabled,
    title: "",
    message: "",
    buttonLabel: "",
    onConfirm: () => {
    }
  });
  const showConfirmation = (title, message, buttonLabel, onConfirm) => {
    const storedPreference2 = localStorage.getItem(localStorageKey);
    const confirmationDisabled = storedPreference2 ? JSON.parse(storedPreference2) : false;
    if (confirmationDisabled) {
      onConfirm();
    } else {
      setState({ open: true, confirmationDisabled, title, message, buttonLabel, onConfirm });
    }
  };
  const handleConfirmationDisabledChange = (checked) => {
    setState((prevState) => ({ ...prevState, confirmationDisabled: checked }));
  };
  const handleConfirm = () => {
    state.onConfirm();
    localStorage.setItem(localStorageKey, JSON.stringify(state.confirmationDisabled));
    handleClose();
  };
  const handleClose = () => {
    setState((prevState) => ({ ...prevState, open: false }));
  };
  return (0, import_jsx_runtime.jsxs)(ConfirmationDialogContext.Provider, { value: { showConfirmation }, children: [
    children,
    state.open && (0, import_jsx_runtime.jsx)(
      ConfirmationDialog,
      {
        open: state.open,
        title: state.title,
        message: state.message,
        buttonLabel: state.buttonLabel,
        confirmationDisabled: state.confirmationDisabled,
        onConfirmationDisabledChange: handleConfirmationDisabledChange,
        onCancel: handleClose,
        onConfirm: handleConfirm
      }
    )
  ] });
};
var useConfirmationDialog = () => {
  const { showConfirmation } = (0, import_react.useContext)(ConfirmationDialogContext);
  return { showConfirmation };
};
var useDeletionConfirmationDialog = () => {
  const { showConfirmation } = useConfirmationDialog();
  return {
    showDeletionConfirmation: (onConfirm) => {
      showConfirmation(
        "Are you sure?",
        "This action will delete the selected element(s).\nYou won't be able to revert this.",
        "Delete",
        onConfirm
      );
    }
  };
};
var ShareRepresentationModal = ({
  editingContextId,
  representationId,
  onClose
}) => {
  const refCallback = (node) => {
    if (node !== null) {
      var range = document.createRange();
      range.selectNodeContents(node);
      var selection = window.getSelection();
      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
      }
    }
  };
  const { getRepresentationPath } = (0, import_react.useContext)(RepresentationPathContext);
  const path = window.location.origin + getRepresentationPath(editingContextId, representationId);
  let title = "Shareable link";
  if (navigator.clipboard && document.hasFocus()) {
    navigator.clipboard.writeText(path);
    title += " (copied into the clipboard)";
  }
  return (0, import_jsx_runtime.jsxs)(Dialog_default, { open: true, onClose, "aria-labelledby": "dialog-title", fullWidth: true, children: [
    (0, import_jsx_runtime.jsx)(DialogTitle_default, { children: title }),
    (0, import_jsx_runtime.jsx)(DialogContent_default, { ref: refCallback, children: (0, import_jsx_runtime.jsx)(DialogContentText_default, { children: path }) })
  ] });
};
var defaultValue = {
  selection: { entries: [] },
  setSelection: () => {
  }
};
var SelectionContext = import_react.default.createContext(defaultValue);
var SelectionContextProvider = ({ initialSelection, children }) => {
  const [state, setState] = (0, import_react.useState)({
    selection: initialSelection ?? { entries: [] }
  });
  const setSelection = (0, import_react.useCallback)((selection) => {
    setState((prevState) => ({ ...prevState, selection }));
  }, []);
  return (0, import_jsx_runtime.jsx)(SelectionContext.Provider, { value: { selection: state.selection, setSelection }, children });
};
var useSelection = () => {
  const { selection, setSelection } = (0, import_react.useContext)(SelectionContext);
  return { selection, setSelection };
};
var fallbackTheme = createTheme_default({
  palette: {
    navigation: {
      leftBackground: "white",
      rightBackground: "white"
    },
    navigationBar: {
      border: "black",
      background: "black"
    },
    selected: "gray"
  },
  typography: {
    h1: {
      fontSize: "4rem",
      fontWeight: 400,
      lineHeight: 1.167,
      letterSpacing: "0em"
    },
    h2: {
      fontSize: "3rem",
      fontWeight: 400,
      lineHeight: 1.2,
      letterSpacing: "0em"
    },
    h3: {
      fontSize: "2.5rem",
      fontWeight: 400,
      lineHeight: 1.167,
      letterSpacing: "0.3px"
    },
    h4: {
      fontSize: "2rem",
      fontWeight: 400,
      lineHeight: 1.235,
      letterSpacing: "0.00735em"
    },
    h5: {
      fontSize: "1.5rem",
      fontWeight: 700,
      lineHeight: 1.334,
      letterSpacing: "0em"
    },
    h6: {
      fontSize: "1.25rem",
      fontWeight: 700,
      lineHeight: 1.5,
      letterSpacing: "0.0075em"
    },
    subtitle1: {
      fontSize: "1rem",
      fontWeight: 700,
      lineHeight: 1.7,
      letterSpacing: "0.03em"
    },
    subtitle2: {
      fontSize: "0.875rem",
      fontWeight: 700,
      lineHeight: 2,
      letterSpacing: "0.06em"
    },
    body1: {
      fontSize: "1rem",
      fontWeight: 400,
      lineHeight: 1.5,
      letterSpacing: "0.00938em"
    },
    body2: {
      fontSize: "0.875rem",
      fontWeight: 400,
      lineHeight: 1.43,
      letterSpacing: "0.01071em"
    }
  }
});
var theme = responsiveFontSizes(fallbackTheme);
var getVariantFromMessageLevel = (level) => {
  switch (level) {
    case "ERROR":
      return "error";
    case "INFO":
      return "info";
    case "WARNING":
      return "warning";
    case "SUCCESS":
      return "success";
    default:
      return "default";
  }
};
var useMultiToast = () => {
  const { enqueueSnackbar } = (0, import_react.useContext)(ToastContext);
  const addMessages = (messages) => messages.map((message) => enqueueSnackbar(message.body, { variant: getVariantFromMessageLevel(message.level) }));
  const addErrorMessage = (message) => addMessages([{ body: message, level: "error" }]);
  return {
    addErrorMessage,
    addMessages
  };
};
var Toast = ({ message, open, onClose }) => {
  return (0, import_jsx_runtime.jsx)(
    Snackbar_default,
    {
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "right"
      },
      open,
      autoHideDuration: 3e3,
      onClose,
      message,
      action: (0, import_jsx_runtime.jsx)(IconButton_default, { size: "small", "aria-label": "close", color: "inherit", onClick: onClose, children: (0, import_jsx_runtime.jsx)(import_Close.default, { fontSize: "small" }) }),
      "data-testid": "toast"
    }
  );
};
var useSiteStyles = makeStyles_default((theme2) => ({
  leftSite: {
    display: "flex",
    flexDirection: "row"
  },
  rightSite: {
    display: "flex",
    flexDirection: "row-reverse"
  },
  viewSelectorLeft: {
    display: "flex",
    flexDirection: "column",
    background: theme2.palette.navigation.leftBackground
  },
  viewSelectorRight: {
    display: "flex",
    flexDirection: "column",
    background: theme2.palette.navigation.rightBackground
  },
  viewSelectorIconLeft: {
    color: theme2.palette.text.disabled,
    borderLeftStyle: "solid",
    borderLeftSize: "2px",
    borderColor: theme2.palette.navigation.leftBackground,
    borderRadius: 0
  },
  viewSelectorIconRight: {
    color: theme2.palette.text.disabled,
    borderRightStyle: "solid",
    borderRightSize: "2px",
    borderRightColor: theme2.palette.navigation.rightBackground,
    borderRadius: 0
  },
  viewSelectorIconSelectedLeft: {
    color: theme2.palette.primary.main,
    borderLeft: "solid 2px",
    borderRadius: 0
  },
  viewSelectorIconSelectedRight: {
    color: theme2.palette.primary.main,
    borderRight: "solid 2px",
    borderRadius: 0
  },
  viewIcon: {
    padding: theme2.spacing(1)
  },
  view: {
    flexGrow: 1,
    display: "flex",
    flexDirection: "column",
    minWidth: 0,
    overflow: "auto"
  },
  viewHeader: {
    display: "flex",
    flexDirection: "row",
    borderBottomColor: theme2.palette.divider,
    borderBottomWidth: "1px",
    borderBottomStyle: "solid"
  },
  viewHeaderIcon: {
    margin: theme2.spacing(1)
  },
  viewHeaderTitle: {
    marginTop: theme2.spacing(1),
    marginRight: theme2.spacing(1),
    marginBottom: theme2.spacing(1)
  },
  viewContent: {
    flexGrow: 1,
    overflow: "auto",
    display: "flex",
    flexDirection: "column",
    "& > *": {
      flexGrow: 1
    }
  }
}));
var Site = ({ editingContextId, readOnly, side, expanded, toggleExpansion, contributions }) => {
  const classes = useSiteStyles();
  const [isExpanded, setExpanded] = (0, import_react.useState)(expanded);
  const [selectedViewIndex, setSelectedViewIndex] = (0, import_react.useState)(0);
  (0, import_react.useEffect)(() => {
    setExpanded(expanded);
  }, [expanded]);
  const viewSelector = (0, import_jsx_runtime.jsx)("div", { className: side === "left" ? classes.viewSelectorLeft : classes.viewSelectorRight, children: contributions.map((contribution2, index) => {
    const { title, icon } = contribution2;
    let iconClassName = side === "left" ? classes.viewSelectorIconLeft : classes.viewSelectorIconRight;
    if (index === selectedViewIndex) {
      iconClassName = side === "left" ? classes.viewSelectorIconSelectedLeft : classes.viewSelectorIconSelectedRight;
    }
    return (0, import_jsx_runtime.jsx)(Tooltip_default, { enterDelay: 250, title, className: classes.viewIcon, children: (0, import_jsx_runtime.jsx)(
      IconButton_default,
      {
        className: iconClassName,
        "aria-label": title,
        "data-testid": `viewselector-${title}`,
        onClick: () => {
          if (index === selectedViewIndex) {
            toggleExpansion();
          } else {
            setSelectedViewIndex(index);
            if (!expanded) {
              toggleExpansion();
            }
          }
        },
        children: icon
      }
    ) }, index);
  }) });
  let selectedView = null;
  const contribution = contributions[selectedViewIndex];
  if (isExpanded && contribution) {
    const { title, icon, component: Component } = contribution;
    selectedView = (0, import_jsx_runtime.jsxs)("div", { className: classes.view, children: [
      (0, import_jsx_runtime.jsxs)("div", { className: classes.viewHeader, children: [
        import_react.default.cloneElement(icon, { className: classes.viewHeaderIcon }),
        (0, import_jsx_runtime.jsx)(Typography_default, { className: classes.viewHeaderTitle, children: title })
      ] }),
      (0, import_jsx_runtime.jsx)("div", { className: classes.viewContent, "data-testid": `view-${title}`, children: (0, import_jsx_runtime.jsx)(Component, { editingContextId, readOnly }) })
    ] });
  }
  let classSite = side === "left" ? classes.leftSite : classes.rightSite;
  return (0, import_jsx_runtime.jsxs)("div", { className: classSite, "data-testid": `site-${side}`, children: [
    viewSelector,
    selectedView
  ] });
};
var MIN_PANEL_WIDTH = 42;
var MAIN_AREA_MIN_WIDTH = 100;
var RESIZER_WIDTH = 4;
var usePanelStyles = makeStyles_default((theme2) => ({
  panel: {
    display: "grid",
    gridTemplateRows: "minmax(0, 1fr)",
    gridTemplateColumns: "minmax(0, 1fr)"
  },
  verticalResizer: {
    display: "grid",
    width: `${RESIZER_WIDTH}px`,
    cursor: "col-resize",
    "& div": {
      backgroundColor: theme2.palette.divider,
      borderColor: theme2.palette.divider,
      borderRightStyle: "solid",
      borderRightWidth: "1px"
    }
  }
}));
var Panels = ({
  editingContextId,
  readOnly,
  leftContributions,
  rightContributions,
  mainArea,
  leftPanelInitialSize,
  rightPanelInitialSize
}) => {
  const ref = (0, import_react.useRef)(null);
  const [leftPanelState, setLeftPanelState] = (0, import_react.useState)({
    isDragging: false,
    initialPosition: 0,
    expanded: true,
    resizablePanelSize: leftPanelInitialSize
  });
  const [rightPanelState, setRightPanelState] = (0, import_react.useState)({
    isDragging: false,
    initialPosition: 0,
    expanded: true,
    resizablePanelSize: rightPanelInitialSize
  });
  const startResizeLeft = (event) => {
    const initialPosition = event.clientX;
    event.preventDefault();
    setLeftPanelState((prevState) => {
      return {
        isDragging: true,
        initialPosition,
        expanded: prevState.expanded,
        resizablePanelSize: prevState.expanded ? prevState.resizablePanelSize : MIN_PANEL_WIDTH
      };
    });
  };
  const startResizeRight = (event) => {
    const initialPosition = event.clientX;
    event.preventDefault();
    setRightPanelState((prevState) => {
      return {
        isDragging: true,
        initialPosition,
        expanded: prevState.expanded,
        resizablePanelSize: prevState.expanded ? prevState.resizablePanelSize : MIN_PANEL_WIDTH
      };
    });
  };
  const resizePanel = (event) => {
    if (leftPanelState.isDragging) {
      const initialPosition = event.clientX;
      event.preventDefault();
      setLeftPanelState((prevState) => {
        const delta = initialPosition - prevState.initialPosition;
        let resizablePanelSize = Math.max(MIN_PANEL_WIDTH, prevState.resizablePanelSize + delta);
        if (ref.current) {
          resizablePanelSize = Math.min(
            resizablePanelSize,
            ref.current.clientWidth - rightPanelState.resizablePanelSize - 2 * RESIZER_WIDTH - MAIN_AREA_MIN_WIDTH
          );
        }
        return {
          ...prevState,
          initialPosition,
          resizablePanelSize,
          expanded: resizablePanelSize > MIN_PANEL_WIDTH
        };
      });
    }
    if (rightPanelState.isDragging) {
      const initialPosition = event.clientX;
      event.preventDefault();
      setRightPanelState((prevState) => {
        const delta = initialPosition - prevState.initialPosition;
        let resizablePanelSize = Math.max(MIN_PANEL_WIDTH, prevState.resizablePanelSize - delta);
        if (ref.current) {
          resizablePanelSize = Math.min(
            resizablePanelSize,
            ref.current.clientWidth - leftPanelState.resizablePanelSize - 2 * RESIZER_WIDTH - MAIN_AREA_MIN_WIDTH
          );
        }
        return {
          ...prevState,
          initialPosition,
          resizablePanelSize,
          expanded: resizablePanelSize > MIN_PANEL_WIDTH
        };
      });
    }
  };
  const stopResize = () => {
    if (leftPanelState.isDragging) {
      setLeftPanelState((prevState) => {
        return { ...prevState, isDragging: false, initialPosition: 0 };
      });
    }
    if (rightPanelState.isDragging) {
      setRightPanelState((prevState) => {
        return { ...prevState, isDragging: false, initialPosition: 0 };
      });
    }
  };
  const leftWidth = leftPanelState.expanded ? leftPanelState.resizablePanelSize : MIN_PANEL_WIDTH;
  const rightWidth = rightPanelState.expanded ? rightPanelState.resizablePanelSize : MIN_PANEL_WIDTH;
  let style = {
    display: "grid",
    gridTemplateRows: "minmax(0, 1fr)",
    gridTemplateColumns: `${leftWidth}px min-content minmax(0, 1fr) min-content ${rightWidth}px`
  };
  const styles = usePanelStyles();
  return (0, import_jsx_runtime.jsxs)("div", { style, onMouseMove: resizePanel, onMouseUp: stopResize, onMouseLeave: stopResize, ref, children: [
    (0, import_jsx_runtime.jsx)("div", { className: styles.panel, children: (0, import_jsx_runtime.jsx)(
      Site,
      {
        editingContextId,
        readOnly,
        side: "left",
        expanded: leftPanelState.expanded,
        toggleExpansion: () => {
          setLeftPanelState((prevState) => {
            const newExpanded = !prevState.expanded;
            let newWidth = prevState.resizablePanelSize;
            if (newExpanded && newWidth === MIN_PANEL_WIDTH) {
              newWidth = leftPanelInitialSize;
            }
            return {
              ...prevState,
              expanded: !prevState.expanded,
              resizablePanelSize: newWidth
            };
          });
        },
        contributions: leftContributions
      }
    ) }),
    (0, import_jsx_runtime.jsx)("div", { className: styles.verticalResizer, onMouseDown: startResizeLeft, "data-testid": "left-resizer", children: (0, import_jsx_runtime.jsx)("div", {}) }),
    (0, import_jsx_runtime.jsx)("div", { className: styles.panel, children: mainArea }),
    (0, import_jsx_runtime.jsx)("div", { className: styles.verticalResizer, onMouseDown: startResizeRight, "data-testid": "right-resizer", children: (0, import_jsx_runtime.jsx)("div", {}) }),
    (0, import_jsx_runtime.jsx)("div", { className: styles.panel, children: (0, import_jsx_runtime.jsx)(
      Site,
      {
        editingContextId,
        readOnly,
        side: "right",
        expanded: rightPanelState.expanded,
        toggleExpansion: () => {
          setRightPanelState((prevState) => {
            const newExpanded = !prevState.expanded;
            let newWidth = prevState.resizablePanelSize;
            if (newExpanded && newWidth === MIN_PANEL_WIDTH) {
              newWidth = rightPanelInitialSize;
            }
            return {
              ...prevState,
              expanded: newExpanded,
              resizablePanelSize: newWidth
            };
          });
        },
        contributions: rightContributions
      }
    ) })
  ] });
};
var registry = {
  getComponent: (_representation) => {
    return (_props) => null;
  }
};
var value = {
  registry
};
var RepresentationContext = import_react.default.createContext(value);
var useRepresentationNavigationStyles = makeStyles_default((theme2) => ({
  tabsRoot: {
    minHeight: theme2.spacing(4),
    borderBottomColor: theme2.palette.divider,
    borderBottomWidth: "1px",
    borderBottomStyle: "solid"
  },
  tabRoot: {
    minHeight: theme2.spacing(4),
    textTransform: "none"
  },
  tabLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    "& > *:nth-child(2)": {
      marginLeft: theme2.spacing(1)
    },
    width: "inherit"
  },
  tabLabelText: {
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
}));
var a11yProps = (id) => {
  return {
    id: `simple-tab-${id}`,
    "aria-controls": `simple-tabpanel-${id}`
  };
};
var RepresentationNavigation = ({
  representations,
  displayedRepresentation,
  onRepresentationClick,
  onClose
}) => {
  const classes = useRepresentationNavigationStyles();
  const onChange = (_event, value2) => {
    const representationSelected = representations.find((representation) => representation.id === value2);
    if (representationSelected) {
      const { id, label, kind } = representationSelected;
      const representation = {
        id,
        label,
        kind
      };
      onRepresentationClick(representation);
    }
  };
  const onRepresentationClose = (event, representation) => {
    event.stopPropagation();
    onClose(representation);
  };
  return (0, import_jsx_runtime.jsx)(
    Tabs_default,
    {
      classes: { root: classes.tabsRoot },
      value: displayedRepresentation.id,
      onChange,
      variant: "scrollable",
      scrollButtons: "on",
      textColor: "primary",
      indicatorColor: "primary",
      children: representations.map((representation) => {
        return (0, import_react.createElement)(
          Tab_default,
          {
            ...a11yProps(representation.id),
            classes: { root: classes.tabRoot },
            value: representation.id,
            label: (0, import_jsx_runtime.jsxs)("div", { className: classes.tabLabel, children: [
              (0, import_jsx_runtime.jsx)("div", { className: classes.tabLabelText, children: representation.label }),
              (0, import_jsx_runtime.jsx)(
                import_Close.default,
                {
                  fontSize: "small",
                  onClick: (event) => onRepresentationClose(event, representation),
                  "data-testid": `close-representation-tab-${representation.label}`
                }
              )
            ] }),
            key: representation.id,
            "data-testid": `representation-tab-${representation.label}`,
            "data-testselected": representation.id === displayedRepresentation.id,
            "data-representationid": representation.id
          }
        );
      })
    }
  );
};
var workbenchMainAreaExtensionPoint = {
  identifier: "workbench#mainArea",
  FallbackComponent: () => null
};
var workbenchViewContributionExtensionPoint = {
  identifier: "workbench#viewContribution",
  fallback: []
};
var isRepresentationRenamedEventPayload = (payload) => payload.__typename === "RepresentationRenamedEventPayload";
var workbenchMachine = Machine(
  {
    type: "parallel",
    context: {
      id: crypto.randomUUID(),
      representations: [],
      displayedRepresentation: null,
      message: null
    },
    states: {
      toast: {
        initial: "hidden",
        states: {
          hidden: {
            on: {
              SHOW_TOAST: {
                target: "visible",
                actions: "setMessage"
              }
            }
          },
          visible: {
            on: {
              HIDE_TOAST: {
                target: "hidden",
                actions: "clearMessage"
              }
            }
          }
        }
      },
      workbench: {
        initial: "initial",
        states: {
          initial: {
            on: {
              UPDATE_SELECTED_REPRESENTATION: {
                target: "initial",
                actions: "updateSelectedRepresentation"
              },
              HIDE_REPRESENTATION: {
                target: "initial",
                actions: "hideRepresentation"
              },
              HANDLE_SUBSCRIPTION_RESULT: {
                target: "initial",
                actions: "handleSubscriptionResult"
              },
              HANDLE_COMPLETE: {
                target: "complete"
              }
            }
          },
          complete: {
            type: "final"
          }
        }
      }
    }
  },
  {
    actions: {
      updateSelectedRepresentation: assign((context, event) => {
        const { representations: selectedRepresentations } = event;
        if (selectedRepresentations.length > 0) {
          const displayedRepresentation = selectedRepresentations[0];
          const representations = [...context.representations];
          const newRepresentations = selectedRepresentations.filter(
            (selectedRepresentation) => !representations.find((representation) => selectedRepresentation.id === representation.id)
          );
          const newSelectedRepresentations = [...representations, ...newRepresentations];
          return { displayedRepresentation, representations: newSelectedRepresentations };
        }
        return {};
      }),
      hideRepresentation: assign((context, event) => {
        const { representation: representationToHide } = event;
        const previousIndex = context.representations.findIndex(
          (representation) => context.displayedRepresentation && representation.id === context.displayedRepresentation.id
        );
        const newRepresentations = context.representations.filter(
          (representation) => representation.id !== representationToHide.id
        );
        if (newRepresentations.length === 0) {
          return { displayedRepresentation: null, representations: [] };
        } else {
          const newIndex = newRepresentations.findIndex(
            (representation) => context.displayedRepresentation && representation.id === context.displayedRepresentation.id
          );
          if (newIndex !== -1) {
            return { representations: newRepresentations };
          } else if (newRepresentations.length === previousIndex) {
            const displayedRepresentation = newRepresentations[previousIndex - 1];
            return { displayedRepresentation, representations: newRepresentations };
          } else {
            const displayedRepresentation = newRepresentations[previousIndex];
            return { displayedRepresentation, representations: newRepresentations };
          }
        }
      }),
      handleSubscriptionResult: assign((context, event) => {
        const { result } = event;
        const { data } = result;
        if (data && isRepresentationRenamedEventPayload(data.editingContextEvent)) {
          const { representationId, newLabel } = data.editingContextEvent;
          const representations = context.representations;
          for (var i = 0; i < representations.length; i++) {
            const representation = representations[i];
            if (!!representation && representation.id === representationId) {
              representation.label = newLabel;
            }
          }
          return {
            representations
          };
        }
        return {};
      }),
      setMessage: assign((_, event) => {
        const { message } = event;
        return { message };
      }),
      clearMessage: assign((_) => {
        return { message: null };
      })
    }
  }
);
var editingContextEventSubscription = gql`
  subscription editingContextEvent($input: EditingContextEventInput!) {
    editingContextEvent(input: $input) {
      __typename
      ... on RepresentationRenamedEventPayload {
        representationId
        newLabel
      }
    }
  }
`;
var useWorkbenchStyles = makeStyles_default(() => ({
  main: {
    display: "grid",
    gridTemplateRows: "minmax(0, 1fr)",
    gridTemplateColumns: "1fr"
  },
  representationArea: {
    display: "grid",
    gridTemplateColumns: "1fr",
    gridTemplateRows: "min-content minmax(0, 1fr)",
    overflow: "auto"
  }
}));
var Workbench = ({
  editingContextId,
  initialRepresentationSelected,
  onRepresentationSelected,
  readOnly
}) => {
  const classes = useWorkbenchStyles();
  const { registry: registry2 } = (0, import_react.useContext)(RepresentationContext);
  const [{ value: value2, context }, dispatch] = useMachine(workbenchMachine, {
    context: {
      displayedRepresentation: initialRepresentationSelected,
      representations: initialRepresentationSelected ? [initialRepresentationSelected] : []
    }
  });
  const { toast } = value2;
  const { id, representations, displayedRepresentation, message } = context;
  const { selection, setSelection } = useSelection();
  const { error } = useSubscription(editingContextEventSubscription, {
    variables: {
      input: {
        id,
        editingContextId
      }
    },
    fetchPolicy: "no-cache",
    onData: ({ data }) => {
      const handleDataEvent = {
        type: "HANDLE_SUBSCRIPTION_RESULT",
        result: data
      };
      dispatch(handleDataEvent);
    },
    onComplete: () => {
      const completeEvent = { type: "HANDLE_COMPLETE" };
      dispatch(completeEvent);
    }
  });
  (0, import_react.useEffect)(() => {
    if (error) {
      const { message: message2 } = error;
      const showToastEvent = { type: "SHOW_TOAST", message: message2 };
      dispatch(showToastEvent);
    }
  }, [error, dispatch]);
  (0, import_react.useEffect)(() => {
    const representations2 = selection.entries.filter(
      (entry) => entry.kind.startsWith("siriusComponents://representation")
    );
    const updateSelectedRepresentation = {
      type: "UPDATE_SELECTED_REPRESENTATION",
      representations: representations2
    };
    dispatch(updateSelectedRepresentation);
  }, [selection, dispatch]);
  const onRepresentationClick = (representation) => {
    setSelection({ entries: [{ id: representation.id, label: representation.label, kind: representation.kind }] });
  };
  const onClose = (representation) => {
    const hideRepresentationEvent = { type: "HIDE_REPRESENTATION", representation };
    dispatch(hideRepresentationEvent);
  };
  (0, import_react.useEffect)(() => {
    if (displayedRepresentation && displayedRepresentation.id !== (initialRepresentationSelected == null ? void 0 : initialRepresentationSelected.id)) {
      onRepresentationSelected(displayedRepresentation);
    } else if (displayedRepresentation === null && initialRepresentationSelected) {
      onRepresentationSelected(null);
    }
  }, [onRepresentationSelected, initialRepresentationSelected, displayedRepresentation]);
  const workbenchViewLeftSideContributions = [];
  const workbenchViewRightSideContributions = [];
  const { data: workbenchViewContributions } = useData(workbenchViewContributionExtensionPoint);
  for (const workbenchViewContribution of workbenchViewContributions) {
    if (workbenchViewContribution.side === "left") {
      workbenchViewLeftSideContributions.push(workbenchViewContribution);
    } else if (workbenchViewContribution.side === "right") {
      workbenchViewRightSideContributions.push(workbenchViewContribution);
    }
  }
  const { Component: MainComponent } = useComponent(workbenchMainAreaExtensionPoint);
  let main = (0, import_jsx_runtime.jsx)(MainComponent, { editingContextId, readOnly });
  if (displayedRepresentation) {
    const RepresentationComponent = registry2.getComponent(displayedRepresentation);
    const props = {
      editingContextId,
      readOnly,
      representationId: displayedRepresentation.id
    };
    if (RepresentationComponent) {
      main = (0, import_jsx_runtime.jsxs)("div", { className: classes.representationArea, "data-testid": "representation-area", children: [
        (0, import_jsx_runtime.jsx)(
          RepresentationNavigation,
          {
            representations,
            displayedRepresentation,
            onRepresentationClick,
            onClose
          }
        ),
        (0, import_jsx_runtime.jsx)(RepresentationComponent, { ...props }, `${editingContextId}#${displayedRepresentation.id}`)
      ] });
    }
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      Panels,
      {
        editingContextId,
        readOnly,
        leftContributions: workbenchViewLeftSideContributions,
        leftPanelInitialSize: 300,
        rightContributions: workbenchViewRightSideContributions,
        rightPanelInitialSize: 450,
        mainArea: main
      }
    ),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message: message ?? "",
        open: toast === "visible",
        onClose: () => dispatch({ type: "HIDE_TOAST" })
      }
    )
  ] });
};

export {
  require_CheckBox,
  getCSSColor,
  RepresentationPathContext,
  ServerContext,
  ToastContext,
  DRAG_SOURCES_TYPE,
  ExtensionRegistry,
  ExtensionProvider,
  useComponent,
  useComponents,
  useData,
  IconOverlay,
  ConfirmationDialogContext,
  ConfirmationDialogContextProvider,
  useConfirmationDialog,
  useDeletionConfirmationDialog,
  ShareRepresentationModal,
  SelectionContext,
  SelectionContextProvider,
  useSelection,
  theme,
  useMultiToast,
  Toast,
  Panels,
  RepresentationContext,
  workbenchMainAreaExtensionPoint,
  workbenchViewContributionExtensionPoint,
  Workbench
};
//# sourceMappingURL=chunk-NYSHD5KH.js.map
