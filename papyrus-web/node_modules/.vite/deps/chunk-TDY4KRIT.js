import {
  Tablelvl2Context_default
} from "./chunk-Z6TUPHL7.js";
import {
  ListContext_default
} from "./chunk-SDNDIM76.js";
import {
  Collapse_default,
  _toArray
} from "./chunk-7EABD3G6.js";
import {
  SwitchBase_default
} from "./chunk-UTKIQ5NH.js";
import {
  Backdrop_default
} from "./chunk-WGHK5OTH.js";
import {
  Modal_default
} from "./chunk-K22CCDOT.js";
import {
  Typography_default
} from "./chunk-OSUJ7GDT.js";
import {
  IconButton_default
} from "./chunk-TSYRDUXI.js";
import {
  Button_default
} from "./chunk-BADD6I46.js";
import {
  ButtonBase_default
} from "./chunk-PQJMVEX4.js";
import {
  init_utils
} from "./chunk-VFPNJJT6.js";
import {
  debounce,
  init_debounce
} from "./chunk-QJKXMHKV.js";
import {
  init_isMuiElement,
  isMuiElement
} from "./chunk-YJVCL377.js";
import {
  init_unsupportedProp,
  unsupportedProp
} from "./chunk-YRNTLAWF.js";
import {
  init_useControlled,
  useControlled
} from "./chunk-QFTOHLK2.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-4JITSZEO.js";
import {
  SvgIcon_default,
  init_SvgIcon
} from "./chunk-TBV2F45A.js";
import {
  getTransitionProps,
  reflow
} from "./chunk-3EESYYNB.js";
import {
  init_ownerDocument,
  ownerDocument
} from "./chunk-JL3UJI6L.js";
import {
  useTheme as useTheme2
} from "./chunk-JE5XHEFL.js";
import {
  Transition_default
} from "./chunk-B6TCGXKG.js";
import {
  init_useEventCallback,
  useEventCallback
} from "./chunk-3SY2X4VC.js";
import {
  require_react_dom
} from "./chunk-K5M3XRFO.js";
import {
  init_setRef,
  init_useForkRef,
  setRef,
  useForkRef
} from "./chunk-VAAWV47Q.js";
import {
  deprecatedPropType,
  init_deprecatedPropType
} from "./chunk-LQNFPLGJ.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-TZNDNIQK.js";
import {
  Paper_default
} from "./chunk-QYGHSHYC.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-YGDE4KKL.js";
import {
  alpha,
  darken,
  duration,
  emphasize,
  init_colorManipulator,
  init_createBreakpoints,
  init_transitions,
  keys,
  lighten
} from "./chunk-D3SGUVA5.js";
import {
  _assertThisInitialized,
  _classCallCheck,
  _createClass,
  _defineProperty,
  _objectWithoutProperties,
  _slicedToArray,
  _toConsumableArray,
  _typeof,
  chainPropTypes,
  elementAcceptingRef_default,
  elementTypeAcceptingRef_default,
  exactProp,
  getDisplayName,
  getThemeProps,
  init_assertThisInitialized,
  init_classCallCheck,
  init_createClass,
  init_defineProperty,
  init_esm,
  init_esm3 as init_esm2,
  init_objectWithoutProperties,
  init_slicedToArray,
  init_toConsumableArray,
  init_typeof,
  refType_default,
  require_react_is,
  useTheme
} from "./chunk-WQUDTCFH.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-OBJPNOCR.js";
import {
  _extends,
  _setPrototypeOf,
  init_extends,
  init_setPrototypeOf,
  require_hoist_non_react_statics_cjs,
  require_prop_types
} from "./chunk-PYVGESTF.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@material-ui/core/esm/index.js
init_utils();

// ../node_modules/@material-ui/core/esm/AccordionActions/AccordionActions.js
init_extends();
init_objectWithoutProperties();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end"
  },
  /* Styles applied to the root element if `disableSpacing={false}`. */
  spacing: {
    "& > :not(:first-child)": {
      marginLeft: 8
    }
  }
};
var AccordionActions = React.forwardRef(function AccordionActions2(props, ref) {
  var classes = props.classes, className = props.className, _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);
  return React.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
    ref
  }, other));
});
true ? AccordionActions.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types.default.object,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * If `true`, the actions do not have additional margin.
   */
  disableSpacing: import_prop_types.default.bool
} : void 0;
var AccordionActions_default = withStyles_default(styles, {
  name: "MuiAccordionActions"
})(AccordionActions);

// ../node_modules/@material-ui/core/esm/Avatar/Avatar.js
init_extends();
init_objectWithoutProperties();
var React3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/Person.js
var React2 = __toESM(require_react());
init_createSvgIcon();
var Person_default = createSvgIcon(React2.createElement("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");

// ../node_modules/@material-ui/core/esm/Avatar/Avatar.js
var styles2 = function styles3(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "relative",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: "50%",
      overflow: "hidden",
      userSelect: "none"
    },
    /* Styles applied to the root element if not `src` or `srcSet`. */
    colorDefault: {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
    },
    /* Styles applied to the root element if `variant="circle"`. */
    circle: {},
    /* Styles applied to the root element if `variant="circular"`. */
    circular: {},
    /* Styles applied to the root element if `variant="rounded"`. */
    rounded: {
      borderRadius: theme.shape.borderRadius
    },
    /* Styles applied to the root element if `variant="square"`. */
    square: {
      borderRadius: 0
    },
    /* Styles applied to the img element if either `src` or `srcSet` is defined. */
    img: {
      width: "100%",
      height: "100%",
      textAlign: "center",
      // Handle non-square image. The property isn't supported by IE 11.
      objectFit: "cover",
      // Hide alt text.
      color: "transparent",
      // Hide the image broken icon, only works on Chrome.
      textIndent: 1e4
    },
    /* Styles applied to the fallback icon */
    fallback: {
      width: "75%",
      height: "75%"
    }
  };
};
function useLoaded(_ref2) {
  var src = _ref2.src, srcSet = _ref2.srcSet;
  var _React$useState = React3.useState(false), loaded = _React$useState[0], setLoaded = _React$useState[1];
  React3.useEffect(function() {
    if (!src && !srcSet) {
      return void 0;
    }
    setLoaded(false);
    var active = true;
    var image = new Image();
    image.src = src;
    image.srcSet = srcSet;
    image.onload = function() {
      if (!active) {
        return;
      }
      setLoaded("loaded");
    };
    image.onerror = function() {
      if (!active) {
        return;
      }
      setLoaded("error");
    };
    return function() {
      active = false;
    };
  }, [src, srcSet]);
  return loaded;
}
var Avatar = React3.forwardRef(function Avatar2(props, ref) {
  var alt = props.alt, childrenProp = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? "div" : _props$component, imgProps = props.imgProps, sizes = props.sizes, src = props.src, srcSet = props.srcSet, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = _objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"]);
  var children = null;
  var loaded = useLoaded({
    src,
    srcSet
  });
  var hasImg = src || srcSet;
  var hasImgNotFailing = hasImg && loaded !== "error";
  if (hasImgNotFailing) {
    children = React3.createElement("img", _extends({
      alt,
      src,
      srcSet,
      sizes,
      className: classes.img
    }, imgProps));
  } else if (childrenProp != null) {
    children = childrenProp;
  } else if (hasImg && alt) {
    children = alt[0];
  } else {
    children = React3.createElement(Person_default, {
      className: classes.fallback
    });
  }
  return React3.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, classes.system, classes[variant], className, !hasImgNotFailing && classes.colorDefault),
    ref
  }, other), children);
});
true ? Avatar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: import_prop_types2.default.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types2.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: chainPropTypes(import_prop_types2.default.object, function(props) {
    var classes = props.classes;
    if (classes == null) {
      return null;
    }
    if (classes.circle != null && // 2 classnames? one from withStyles the other must be custom
    classes.circle.split(" ").length > 1) {
      throw new Error("Material-UI: The `circle` class is deprecated. Use `circular` instead.");
    }
    return null;
  }),
  /**
   * @ignore
   */
  className: import_prop_types2.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types2.default.elementType,
  /**
   * Attributes applied to the `img` element if the component is used to display an image.
   * It can be used to listen for the loading error event.
   */
  imgProps: import_prop_types2.default.object,
  /**
   * The `sizes` attribute for the `img` element.
   */
  sizes: import_prop_types2.default.string,
  /**
   * The `src` attribute for the `img` element.
   */
  src: import_prop_types2.default.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: import_prop_types2.default.string,
  /**
   * The shape of the avatar.
   */
  variant: chainPropTypes(import_prop_types2.default.oneOf(["circle", "circular", "rounded", "square"]), function(props) {
    var variant = props.variant;
    if (variant === "circle") {
      throw new Error('Material-UI: `variant="circle"` is deprecated. Use `variant="circular"` instead.');
    }
    return null;
  })
} : void 0;
var Avatar_default = withStyles_default(styles2, {
  name: "MuiAvatar"
})(Avatar);

// ../node_modules/@material-ui/core/esm/Badge/Badge.js
init_slicedToArray();
init_extends();
init_objectWithoutProperties();
var React4 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();
init_capitalize();
var RADIUS_STANDARD = 10;
var RADIUS_DOT = 4;
var styles4 = function styles5(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "relative",
      display: "inline-flex",
      // For correct alignment with the text.
      verticalAlign: "middle",
      flexShrink: 0
    },
    /* Styles applied to the badge `span` element. */
    badge: {
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      position: "absolute",
      boxSizing: "border-box",
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(12),
      minWidth: RADIUS_STANDARD * 2,
      lineHeight: 1,
      padding: "0 6px",
      height: RADIUS_STANDARD * 2,
      borderRadius: RADIUS_STANDARD,
      zIndex: 1,
      // Render the badge on top of potential ripples.
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen
      })
    },
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText
    },
    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main,
      color: theme.palette.secondary.contrastText
    },
    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      backgroundColor: theme.palette.error.main,
      color: theme.palette.error.contrastText
    },
    /* Styles applied to the root element if `variant="dot"`. */
    dot: {
      borderRadius: RADIUS_DOT,
      height: RADIUS_DOT * 2,
      minWidth: RADIUS_DOT * 2,
      padding: 0
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangle"`. */
    anchorOriginTopRightRectangle: {
      top: 0,
      right: 0,
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      "&$invisible": {
        transform: "scale(0) translate(50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="rectangular"`. */
    anchorOriginTopRightRectangular: {
      top: 0,
      right: 0,
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      "&$invisible": {
        transform: "scale(0) translate(50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangle"`. */
    anchorOriginBottomRightRectangle: {
      bottom: 0,
      right: 0,
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      "&$invisible": {
        transform: "scale(0) translate(50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="rectangular"`. */
    anchorOriginBottomRightRectangular: {
      bottom: 0,
      right: 0,
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      "&$invisible": {
        transform: "scale(0) translate(50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangle"`. */
    anchorOriginTopLeftRectangle: {
      top: 0,
      left: 0,
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="rectangular"`. */
    anchorOriginTopLeftRectangular: {
      top: 0,
      left: 0,
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangle"`. */
    anchorOriginBottomLeftRectangle: {
      bottom: 0,
      left: 0,
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="rectangular"`. */
    anchorOriginBottomLeftRectangular: {
      bottom: 0,
      left: 0,
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circle"`. */
    anchorOriginTopRightCircle: {
      top: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      "&$invisible": {
        transform: "scale(0) translate(50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }} overlap="circular"`. */
    anchorOriginTopRightCircular: {
      top: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
      "&$invisible": {
        transform: "scale(0) translate(50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circle"`. */
    anchorOriginBottomRightCircle: {
      bottom: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      "&$invisible": {
        transform: "scale(0) translate(50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }} overlap="circular"`. */
    anchorOriginBottomRightCircular: {
      bottom: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
      "&$invisible": {
        transform: "scale(0) translate(50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circle"`. */
    anchorOriginTopLeftCircle: {
      top: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }} overlap="circular"`. */
    anchorOriginTopLeftCircular: {
      top: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, -50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circle"`. */
    anchorOriginBottomLeftCircle: {
      bottom: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, 50%)"
      }
    },
    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }} overlap="circular"`. */
    anchorOriginBottomLeftCircular: {
      bottom: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
      "&$invisible": {
        transform: "scale(0) translate(-50%, 50%)"
      }
    },
    /* Pseudo-class to the badge `span` element if `invisible={true}`. */
    invisible: {
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.leavingScreen
      })
    }
  };
};
var Badge = React4.forwardRef(function Badge2(props, ref) {
  var _props$anchorOrigin = props.anchorOrigin, anchorOrigin = _props$anchorOrigin === void 0 ? {
    vertical: "top",
    horizontal: "right"
  } : _props$anchorOrigin, badgeContent = props.badgeContent, children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, ComponentProp = _props$component === void 0 ? "span" : _props$component, invisibleProp = props.invisible, _props$max = props.max, max = _props$max === void 0 ? 99 : _props$max, _props$overlap = props.overlap, overlap = _props$overlap === void 0 ? "rectangle" : _props$overlap, _props$showZero = props.showZero, showZero = _props$showZero === void 0 ? false : _props$showZero, _props$variant = props.variant, variant = _props$variant === void 0 ? "standard" : _props$variant, other = _objectWithoutProperties(props, ["anchorOrigin", "badgeContent", "children", "classes", "className", "color", "component", "invisible", "max", "overlap", "showZero", "variant"]);
  var invisible = invisibleProp;
  if (invisibleProp == null && (badgeContent === 0 && !showZero || badgeContent == null && variant !== "dot")) {
    invisible = true;
  }
  var displayValue = "";
  if (variant !== "dot") {
    displayValue = badgeContent > max ? "".concat(max, "+") : badgeContent;
  }
  return React4.createElement(ComponentProp, _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other), children, React4.createElement("span", {
    className: clsx_m_default(classes.badge, classes["".concat(anchorOrigin.horizontal).concat(capitalize(anchorOrigin.vertical), "}")], classes["anchorOrigin".concat(capitalize(anchorOrigin.vertical)).concat(capitalize(anchorOrigin.horizontal)).concat(capitalize(overlap))], color !== "default" && classes["color".concat(capitalize(color))], invisible && classes.invisible, variant === "dot" && classes.dot)
  }, displayValue));
});
true ? Badge.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The anchor of the badge.
   */
  anchorOrigin: import_prop_types3.default.shape({
    horizontal: import_prop_types3.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types3.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The content rendered within the badge.
   */
  badgeContent: import_prop_types3.default.node,
  /**
   * The badge will be added relative to this node.
   */
  children: import_prop_types3.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: chainPropTypes(import_prop_types3.default.object, function(props) {
    var classes = props.classes;
    if (classes == null) {
      return null;
    }
    [["anchorOriginTopRightRectangle", "anchorOriginTopRightRectangular"], ["anchorOriginBottomRightRectangle", "anchorOriginBottomRightRectangular"], ["anchorOriginTopLeftRectangle", "anchorOriginTopLeftRectangular"], ["anchorOriginBottomLeftRectangle", "anchorOriginBottomLeftRectangular"], ["anchorOriginTopRightCircle", "anchorOriginTopRightCircular"], ["anchorOriginBottomRightCircle", "anchorOriginBottomRightCircular"], ["anchorOriginTopLeftCircle", "anchorOriginTopLeftCircular"]].forEach(function(_ref2) {
      var _ref22 = _slicedToArray(_ref2, 2), deprecatedClassKey = _ref22[0], newClassKey = _ref22[1];
      if (classes[deprecatedClassKey] != null && // 2 classnames? one from withStyles the other must be custom
      classes[deprecatedClassKey].split(" ").length > 1) {
        throw new Error("Material-UI: The `".concat(deprecatedClassKey, "` class was deprecated. Use `").concat(newClassKey, "` instead."));
      }
    });
    return null;
  }),
  /**
   * @ignore
   */
  className: import_prop_types3.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types3.default.oneOf(["default", "error", "primary", "secondary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types3.default.elementType,
  /**
   * If `true`, the badge will be invisible.
   */
  invisible: import_prop_types3.default.bool,
  /**
   * Max count to show.
   */
  max: import_prop_types3.default.number,
  /**
   * Wrapped shape the badge should overlap.
   */
  overlap: chainPropTypes(import_prop_types3.default.oneOf(["circle", "rectangle", "circular", "rectangular"]), function(props) {
    var _props$overlap2 = props.overlap, overlap = _props$overlap2 === void 0 ? "rectangle" : _props$overlap2;
    if (overlap === "rectangle") {
      throw new Error('Material-UI: `overlap="rectangle"` was deprecated. Use `overlap="rectangular"` instead.');
    }
    if (overlap === "circle") {
      throw new Error('Material-UI: `overlap="circle"` was deprecated. Use `overlap="circular"` instead.');
    }
    return null;
  }),
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   */
  showZero: import_prop_types3.default.bool,
  /**
   * The variant to use.
   */
  variant: import_prop_types3.default.oneOf(["dot", "standard"])
} : void 0;
var Badge_default = withStyles_default(styles4, {
  name: "MuiBadge"
})(Badge);

// ../node_modules/@material-ui/core/esm/BottomNavigation/BottomNavigation.js
init_extends();
init_objectWithoutProperties();
var React5 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
var import_prop_types4 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles6 = function styles7(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      justifyContent: "center",
      height: 56,
      backgroundColor: theme.palette.background.paper
    }
  };
};
var BottomNavigation = React5.forwardRef(function BottomNavigation2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? "div" : _props$component, onChange = props.onChange, _props$showLabels = props.showLabels, showLabels = _props$showLabels === void 0 ? false : _props$showLabels, value = props.value, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "onChange", "showLabels", "value"]);
  return React5.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other), React5.Children.map(children, function(child, childIndex) {
    if (!React5.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is.isFragment)(child)) {
        console.error(["Material-UI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    var childValue = child.props.value === void 0 ? childIndex : child.props.value;
    return React5.cloneElement(child, {
      selected: childValue === value,
      showLabel: child.props.showLabel !== void 0 ? child.props.showLabel : showLabels,
      value: childValue,
      onChange
    });
  }));
});
true ? BottomNavigation.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types4.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types4.default.object,
  /**
   * @ignore
   */
  className: import_prop_types4.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types4.default.elementType,
  /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback.
   * @param {any} value We default to the index of the child.
   */
  onChange: import_prop_types4.default.func,
  /**
   * If `true`, all `BottomNavigationAction`s will show their labels.
   * By default, only the selected `BottomNavigationAction` will show its label.
   */
  showLabels: import_prop_types4.default.bool,
  /**
   * The value of the currently selected `BottomNavigationAction`.
   */
  value: import_prop_types4.default.any
} : void 0;
var BottomNavigation_default = withStyles_default(styles6, {
  name: "MuiBottomNavigation"
})(BottomNavigation);

// ../node_modules/@material-ui/core/esm/BottomNavigationAction/BottomNavigationAction.js
init_extends();
init_objectWithoutProperties();
var React6 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_unsupportedProp();
var styles8 = function styles9(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      transition: theme.transitions.create(["color", "padding-top"], {
        duration: theme.transitions.duration.short
      }),
      padding: "6px 12px 8px",
      minWidth: 80,
      maxWidth: 168,
      color: theme.palette.text.secondary,
      flex: "1",
      "&$iconOnly": {
        paddingTop: 16
      },
      "&$selected": {
        paddingTop: 6,
        color: theme.palette.primary.main
      }
    },
    /* Pseudo-class applied to the root element if selected. */
    selected: {},
    /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */
    iconOnly: {},
    /* Styles applied to the span element that wraps the icon and label. */
    wrapper: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      width: "100%",
      flexDirection: "column"
    },
    /* Styles applied to the label's span element. */
    label: {
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(12),
      opacity: 1,
      transition: "font-size 0.2s, opacity 0.2s",
      transitionDelay: "0.1s",
      "&$iconOnly": {
        opacity: 0,
        transitionDelay: "0s"
      },
      "&$selected": {
        fontSize: theme.typography.pxToRem(14)
      }
    }
  };
};
var BottomNavigationAction = React6.forwardRef(function BottomNavigationAction2(props, ref) {
  var classes = props.classes, className = props.className, icon = props.icon, label = props.label, onChange = props.onChange, onClick = props.onClick, selected = props.selected, showLabel = props.showLabel, value = props.value, other = _objectWithoutProperties(props, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);
  var handleChange = function handleChange2(event) {
    if (onChange) {
      onChange(event, value);
    }
    if (onClick) {
      onClick(event);
    }
  };
  return React6.createElement(ButtonBase_default, _extends({
    ref,
    className: clsx_m_default(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),
    focusRipple: true,
    onClick: handleChange
  }, other), React6.createElement("span", {
    className: classes.wrapper
  }, icon, React6.createElement("span", {
    className: clsx_m_default(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)
  }, label)));
});
true ? BottomNavigationAction.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: unsupportedProp,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types5.default.object,
  /**
   * @ignore
   */
  className: import_prop_types5.default.string,
  /**
   * The icon element.
   */
  icon: import_prop_types5.default.node,
  /**
   * The label element.
   */
  label: import_prop_types5.default.node,
  /**
   * @ignore
   */
  onChange: import_prop_types5.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types5.default.func,
  /**
   * @ignore
   */
  selected: import_prop_types5.default.bool,
  /**
   * If `true`, the `BottomNavigationAction` will show its label.
   * By default, only the selected `BottomNavigationAction`
   * inside `BottomNavigation` will show its label.
   */
  showLabel: import_prop_types5.default.bool,
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: import_prop_types5.default.any
} : void 0;
var BottomNavigationAction_default = withStyles_default(styles8, {
  name: "MuiBottomNavigationAction"
})(BottomNavigationAction);

// ../node_modules/@material-ui/core/esm/Breadcrumbs/Breadcrumbs.js
init_extends();
init_toConsumableArray();
init_objectWithoutProperties();
var React9 = __toESM(require_react());
var import_react_is2 = __toESM(require_react_is());
var import_prop_types7 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();

// ../node_modules/@material-ui/core/esm/Breadcrumbs/BreadcrumbCollapsed.js
init_extends();
init_objectWithoutProperties();
var React8 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
init_withStyles();
init_colorManipulator();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/MoreHoriz.js
var React7 = __toESM(require_react());
init_createSvgIcon();
var MoreHoriz_default = createSvgIcon(React7.createElement("path", {
  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreHoriz");

// ../node_modules/@material-ui/core/esm/Breadcrumbs/BreadcrumbCollapsed.js
var styles10 = function styles11(theme) {
  return {
    root: {
      display: "flex",
      marginLeft: theme.spacing(0.5),
      marginRight: theme.spacing(0.5),
      backgroundColor: theme.palette.grey[100],
      color: theme.palette.grey[700],
      borderRadius: 2,
      cursor: "pointer",
      "&:hover, &:focus": {
        backgroundColor: theme.palette.grey[200]
      },
      "&:active": {
        boxShadow: theme.shadows[0],
        backgroundColor: emphasize(theme.palette.grey[200], 0.12)
      }
    },
    icon: {
      width: 24,
      height: 16
    }
  };
};
function BreadcrumbCollapsed(props) {
  var classes = props.classes, other = _objectWithoutProperties(props, ["classes"]);
  return React8.createElement(ButtonBase_default, _extends({
    component: "li",
    className: classes.root,
    focusRipple: true
  }, other), React8.createElement(MoreHoriz_default, {
    className: classes.icon
  }));
}
true ? BreadcrumbCollapsed.propTypes = {
  /**
   * @ignore
   */
  classes: import_prop_types6.default.object.isRequired
} : void 0;
var BreadcrumbCollapsed_default = withStyles_default(styles10, {
  name: "PrivateBreadcrumbCollapsed"
})(BreadcrumbCollapsed);

// ../node_modules/@material-ui/core/esm/Breadcrumbs/Breadcrumbs.js
var styles12 = {
  /* Styles applied to the root element. */
  root: {},
  /* Styles applied to the ol element. */
  ol: {
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  },
  /* Styles applied to the li element. */
  li: {},
  /* Styles applied to the separator element. */
  separator: {
    display: "flex",
    userSelect: "none",
    marginLeft: 8,
    marginRight: 8
  }
};
function insertSeparators(items, className, separator) {
  return items.reduce(function(acc, current, index) {
    if (index < items.length - 1) {
      acc = acc.concat(current, React9.createElement("li", {
        "aria-hidden": true,
        key: "separator-".concat(index),
        className
      }, separator));
    } else {
      acc.push(current);
    }
    return acc;
  }, []);
}
var Breadcrumbs = React9.forwardRef(function Breadcrumbs2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? "nav" : _props$component, _props$expandText = props.expandText, expandText = _props$expandText === void 0 ? "Show path" : _props$expandText, _props$itemsAfterColl = props.itemsAfterCollapse, itemsAfterCollapse = _props$itemsAfterColl === void 0 ? 1 : _props$itemsAfterColl, _props$itemsBeforeCol = props.itemsBeforeCollapse, itemsBeforeCollapse = _props$itemsBeforeCol === void 0 ? 1 : _props$itemsBeforeCol, _props$maxItems = props.maxItems, maxItems = _props$maxItems === void 0 ? 8 : _props$maxItems, _props$separator = props.separator, separator = _props$separator === void 0 ? "/" : _props$separator, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);
  var _React$useState = React9.useState(false), expanded = _React$useState[0], setExpanded = _React$useState[1];
  var renderItemsBeforeAndAfter = function renderItemsBeforeAndAfter2(allItems2) {
    var handleClickExpand = function handleClickExpand2(event) {
      setExpanded(true);
      var focusable = event.currentTarget.parentNode.querySelector("a[href],button,[tabindex]");
      if (focusable) {
        focusable.focus();
      }
    };
    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems2.length) {
      if (true) {
        console.error(["Material-UI: You have provided an invalid combination of props to the Breadcrumbs.", "itemsAfterCollapse={".concat(itemsAfterCollapse, "} + itemsBeforeCollapse={").concat(itemsBeforeCollapse, "} >= maxItems={").concat(maxItems, "}")].join("\n"));
      }
      return allItems2;
    }
    return [].concat(_toConsumableArray(allItems2.slice(0, itemsBeforeCollapse)), [React9.createElement(BreadcrumbCollapsed_default, {
      "aria-label": expandText,
      key: "ellipsis",
      onClick: handleClickExpand
    })], _toConsumableArray(allItems2.slice(allItems2.length - itemsAfterCollapse, allItems2.length)));
  };
  var allItems = React9.Children.toArray(children).filter(function(child) {
    if (true) {
      if ((0, import_react_is2.isFragment)(child)) {
        console.error(["Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React9.isValidElement(child);
  }).map(function(child, index) {
    return React9.createElement("li", {
      className: classes.li,
      key: "child-".concat(index)
    }, child);
  });
  return React9.createElement(Typography_default, _extends({
    ref,
    component: Component2,
    color: "textSecondary",
    className: clsx_m_default(classes.root, className)
  }, other), React9.createElement("ol", {
    className: classes.ol
  }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));
});
true ? Breadcrumbs.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The breadcrumb children.
   */
  children: import_prop_types7.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types7.default.object,
  /**
   * @ignore
   */
  className: import_prop_types7.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types7.default.elementType,
  /**
   * Override the default label for the expand button.
   *
   * For localization purposes, you can use the provided [translations](/guides/localization/).
   */
  expandText: import_prop_types7.default.string,
  /**
   * If max items is exceeded, the number of items to show after the ellipsis.
   */
  itemsAfterCollapse: import_prop_types7.default.number,
  /**
   * If max items is exceeded, the number of items to show before the ellipsis.
   */
  itemsBeforeCollapse: import_prop_types7.default.number,
  /**
   * Specifies the maximum number of breadcrumbs to display. When there are more
   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
   * will be shown, with an ellipsis in between.
   */
  maxItems: import_prop_types7.default.number,
  /**
   * Custom separator node.
   */
  separator: import_prop_types7.default.node
} : void 0;
var Breadcrumbs_default = withStyles_default(styles12, {
  name: "MuiBreadcrumbs"
})(Breadcrumbs);

// ../node_modules/@material-ui/core/esm/ButtonGroup/ButtonGroup.js
init_extends();
init_objectWithoutProperties();
var React10 = __toESM(require_react());
var import_react_is3 = __toESM(require_react_is());
var import_prop_types8 = __toESM(require_prop_types());
init_clsx_m();
init_capitalize();
init_colorManipulator();
init_withStyles();
Button_default.styles;
var styles13 = function styles14(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "inline-flex",
      borderRadius: theme.shape.borderRadius
    },
    /* Styles applied to the root element if `variant="contained"`. */
    contained: {
      boxShadow: theme.shadows[2]
    },
    /* Styles applied to the root element if `disableElevation={true}`. */
    disableElevation: {
      boxShadow: "none"
    },
    /* Pseudo-class applied to child elements if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {
      width: "100%"
    },
    /* Styles applied to the root element if `orientation="vertical"`. */
    vertical: {
      flexDirection: "column"
    },
    /* Styles applied to the children. */
    grouped: {
      minWidth: 40
    },
    /* Styles applied to the children if `orientation="horizontal"`. */
    groupedHorizontal: {
      "&:not(:first-child)": {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      "&:not(:last-child)": {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      }
    },
    /* Styles applied to the children if `orientation="vertical"`. */
    groupedVertical: {
      "&:not(:first-child)": {
        borderTopRightRadius: 0,
        borderTopLeftRadius: 0
      },
      "&:not(:last-child)": {
        borderBottomRightRadius: 0,
        borderBottomLeftRadius: 0
      }
    },
    /* Styles applied to the children if `variant="text"`. */
    groupedText: {},
    /* Styles applied to the children if `variant="text"` and `orientation="horizontal"`. */
    groupedTextHorizontal: {
      "&:not(:last-child)": {
        borderRight: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)")
      }
    },
    /* Styles applied to the children if `variant="text"` and `orientation="vertical"`. */
    groupedTextVertical: {
      "&:not(:last-child)": {
        borderBottom: "1px solid ".concat(theme.palette.type === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)")
      }
    },
    /* Styles applied to the children if `variant="text"` and `color="primary"`. */
    groupedTextPrimary: {
      "&:not(:last-child)": {
        borderColor: alpha(theme.palette.primary.main, 0.5)
      }
    },
    /* Styles applied to the children if `variant="text"` and `color="secondary"`. */
    groupedTextSecondary: {
      "&:not(:last-child)": {
        borderColor: alpha(theme.palette.secondary.main, 0.5)
      }
    },
    /* Styles applied to the children if `variant="outlined"`. */
    groupedOutlined: {},
    /* Styles applied to the children if `variant="outlined"` and `orientation="horizontal"`. */
    groupedOutlinedHorizontal: {
      "&:not(:first-child)": {
        marginLeft: -1
      },
      "&:not(:last-child)": {
        borderRightColor: "transparent"
      }
    },
    /* Styles applied to the children if `variant="outlined"` and `orientation="vertical"`. */
    groupedOutlinedVertical: {
      "&:not(:first-child)": {
        marginTop: -1
      },
      "&:not(:last-child)": {
        borderBottomColor: "transparent"
      }
    },
    /* Styles applied to the children if `variant="outlined"` and `color="primary"`. */
    groupedOutlinedPrimary: {
      "&:hover": {
        borderColor: theme.palette.primary.main
      }
    },
    /* Styles applied to the children if `variant="outlined"` and `color="secondary"`. */
    groupedOutlinedSecondary: {
      "&:hover": {
        borderColor: theme.palette.secondary.main
      }
    },
    /* Styles applied to the children if `variant="contained"`. */
    groupedContained: {
      boxShadow: "none"
    },
    /* Styles applied to the children if `variant="contained"` and `orientation="horizontal"`. */
    groupedContainedHorizontal: {
      "&:not(:last-child)": {
        borderRight: "1px solid ".concat(theme.palette.grey[400]),
        "&$disabled": {
          borderRight: "1px solid ".concat(theme.palette.action.disabled)
        }
      }
    },
    /* Styles applied to the children if `variant="contained"` and `orientation="vertical"`. */
    groupedContainedVertical: {
      "&:not(:last-child)": {
        borderBottom: "1px solid ".concat(theme.palette.grey[400]),
        "&$disabled": {
          borderBottom: "1px solid ".concat(theme.palette.action.disabled)
        }
      }
    },
    /* Styles applied to the children if `variant="contained"` and `color="primary"`. */
    groupedContainedPrimary: {
      "&:not(:last-child)": {
        borderColor: theme.palette.primary.dark
      }
    },
    /* Styles applied to the children if `variant="contained"` and `color="secondary"`. */
    groupedContainedSecondary: {
      "&:not(:last-child)": {
        borderColor: theme.palette.secondary.dark
      }
    }
  };
};
var ButtonGroup = React10.forwardRef(function ButtonGroup2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, Component2 = _props$component === void 0 ? "div" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "outlined" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"]);
  var buttonClassName = clsx_m_default(classes.grouped, classes["grouped".concat(capitalize(orientation))], classes["grouped".concat(capitalize(variant))], classes["grouped".concat(capitalize(variant)).concat(capitalize(orientation))], classes["grouped".concat(capitalize(variant)).concat(color !== "default" ? capitalize(color) : "")], disabled && classes.disabled);
  return React10.createElement(Component2, _extends({
    role: "group",
    className: clsx_m_default(classes.root, className, fullWidth && classes.fullWidth, disableElevation && classes.disableElevation, variant === "contained" && classes.contained, orientation === "vertical" && classes.vertical),
    ref
  }, other), React10.Children.map(children, function(child) {
    if (!React10.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is3.isFragment)(child)) {
        console.error(["Material-UI: The ButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React10.cloneElement(child, {
      className: clsx_m_default(buttonClassName, child.props.className),
      color: child.props.color || color,
      disabled: child.props.disabled || disabled,
      disableElevation: child.props.disableElevation || disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      size: child.props.size || size,
      variant: child.props.variant || variant
    });
  }));
});
true ? ButtonGroup.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the button group.
   */
  children: import_prop_types8.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types8.default.object,
  /**
   * @ignore
   */
  className: import_prop_types8.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types8.default.oneOf(["default", "inherit", "primary", "secondary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types8.default.elementType,
  /**
   * If `true`, the buttons will be disabled.
   */
  disabled: import_prop_types8.default.bool,
  /**
   * If `true`, no elevation is used.
   */
  disableElevation: import_prop_types8.default.bool,
  /**
   * If `true`, the button keyboard focus ripple will be disabled.
   */
  disableFocusRipple: import_prop_types8.default.bool,
  /**
   * If `true`, the button ripple effect will be disabled.
   */
  disableRipple: import_prop_types8.default.bool,
  /**
   * If `true`, the buttons will take up the full width of its container.
   */
  fullWidth: import_prop_types8.default.bool,
  /**
   * The group orientation (layout flow direction).
   */
  orientation: import_prop_types8.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the button.
   * `small` is equivalent to the dense button styling.
   */
  size: import_prop_types8.default.oneOf(["large", "medium", "small"]),
  /**
   * The variant to use.
   */
  variant: import_prop_types8.default.oneOf(["contained", "outlined", "text"])
} : void 0;
var ButtonGroup_default = withStyles_default(styles13, {
  name: "MuiButtonGroup"
})(ButtonGroup);

// ../node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js
init_extends();
init_objectWithoutProperties();
var React11 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles15 = function styles16(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "block",
      textAlign: "inherit",
      width: "100%",
      "&:hover $focusHighlight": {
        opacity: theme.palette.action.hoverOpacity
      },
      "&$focusVisible $focusHighlight": {
        opacity: 0.12
      }
    },
    /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */
    focusVisible: {},
    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */
    focusHighlight: {
      overflow: "hidden",
      pointerEvents: "none",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: "inherit",
      opacity: 0,
      backgroundColor: "currentcolor",
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.short
      })
    }
  };
};
var CardActionArea = React11.forwardRef(function CardActionArea2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, focusVisibleClassName = props.focusVisibleClassName, other = _objectWithoutProperties(props, ["children", "classes", "className", "focusVisibleClassName"]);
  return React11.createElement(ButtonBase_default, _extends({
    className: clsx_m_default(classes.root, className),
    focusVisibleClassName: clsx_m_default(focusVisibleClassName, classes.focusVisible),
    ref
  }, other), children, React11.createElement("span", {
    className: classes.focusHighlight
  }));
});
true ? CardActionArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types9.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types9.default.object,
  /**
   * @ignore
   */
  className: import_prop_types9.default.string,
  /**
   * @ignore
   */
  focusVisibleClassName: import_prop_types9.default.string
} : void 0;
var CardActionArea_default = withStyles_default(styles15, {
  name: "MuiCardActionArea"
})(CardActionArea);

// ../node_modules/@material-ui/core/esm/CardHeader/CardHeader.js
init_extends();
init_objectWithoutProperties();
var React12 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles17 = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    alignItems: "center",
    padding: 16
  },
  /* Styles applied to the avatar element. */
  avatar: {
    flex: "0 0 auto",
    marginRight: 16
  },
  /* Styles applied to the action element. */
  action: {
    flex: "0 0 auto",
    alignSelf: "flex-start",
    marginTop: -8,
    marginRight: -8
  },
  /* Styles applied to the content wrapper element. */
  content: {
    flex: "1 1 auto"
  },
  /* Styles applied to the title Typography element. */
  title: {},
  /* Styles applied to the subheader Typography element. */
  subheader: {}
};
var CardHeader = React12.forwardRef(function CardHeader2(props, ref) {
  var action = props.action, avatar = props.avatar, classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? "div" : _props$component, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, subheaderProp = props.subheader, subheaderTypographyProps = props.subheaderTypographyProps, titleProp = props.title, titleTypographyProps = props.titleTypographyProps, other = _objectWithoutProperties(props, ["action", "avatar", "classes", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"]);
  var title = titleProp;
  if (title != null && title.type !== Typography_default && !disableTypography) {
    title = React12.createElement(Typography_default, _extends({
      variant: avatar ? "body2" : "h5",
      className: classes.title,
      component: "span",
      display: "block"
    }, titleTypographyProps), title);
  }
  var subheader = subheaderProp;
  if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
    subheader = React12.createElement(Typography_default, _extends({
      variant: avatar ? "body2" : "body1",
      className: classes.subheader,
      color: "textSecondary",
      component: "span",
      display: "block"
    }, subheaderTypographyProps), subheader);
  }
  return React12.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other), avatar && React12.createElement("div", {
    className: classes.avatar
  }, avatar), React12.createElement("div", {
    className: classes.content
  }, title, subheader), action && React12.createElement("div", {
    className: classes.action
  }, action));
});
true ? CardHeader.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The action to display in the card header.
   */
  action: import_prop_types10.default.node,
  /**
   * The Avatar for the Card Header.
   */
  avatar: import_prop_types10.default.node,
  /**
   * @ignore
   */
  children: import_prop_types10.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types10.default.object,
  /**
   * @ignore
   */
  className: import_prop_types10.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types10.default.elementType,
  /**
   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `title` text, and optional `subheader` text
   * with the Typography component.
   */
  disableTypography: import_prop_types10.default.bool,
  /**
   * The content of the component.
   */
  subheader: import_prop_types10.default.node,
  /**
   * These props will be forwarded to the subheader
   * (as long as disableTypography is not `true`).
   */
  subheaderTypographyProps: import_prop_types10.default.object,
  /**
   * The content of the Card Title.
   */
  title: import_prop_types10.default.node,
  /**
   * These props will be forwarded to the title
   * (as long as disableTypography is not `true`).
   */
  titleTypographyProps: import_prop_types10.default.object
} : void 0;
var CardHeader_default = withStyles_default(styles17, {
  name: "MuiCardHeader"
})(CardHeader);

// ../node_modules/@material-ui/core/esm/CardMedia/CardMedia.js
init_extends();
init_objectWithoutProperties();
var React13 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_esm();
var styles18 = {
  /* Styles applied to the root element. */
  root: {
    display: "block",
    backgroundSize: "cover",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center"
  },
  /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */
  media: {
    width: "100%"
  },
  /* Styles applied to the root element if `component="picture or img"`. */
  img: {
    // ⚠️ object-fit is not supported by IE 11.
    objectFit: "cover"
  }
};
var MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
var CardMedia = React13.forwardRef(function CardMedia2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? "div" : _props$component, image = props.image, src = props.src, style = props.style, other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "image", "src", "style"]);
  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component2) !== -1;
  var composedStyle = !isMediaComponent && image ? _extends({
    backgroundImage: 'url("'.concat(image, '")')
  }, style) : style;
  return React13.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className, isMediaComponent && classes.media, "picture img".indexOf(Component2) !== -1 && classes.img),
    ref,
    style: composedStyle,
    src: isMediaComponent ? image || src : void 0
  }, other), children);
});
true ? CardMedia.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: chainPropTypes(import_prop_types11.default.node, function(props) {
    if (!props.children && !props.image && !props.src && !props.component) {
      return new Error("Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.");
    }
    return null;
  }),
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types11.default.object,
  /**
   * @ignore
   */
  className: import_prop_types11.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types11.default.elementType,
  /**
   * Image to be displayed as a background image.
   * Either `image` or `src` prop must be specified.
   * Note that caller must specify height otherwise the image will not be visible.
   */
  image: import_prop_types11.default.string,
  /**
   * An alias for `image` property.
   * Available only with media components.
   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
   */
  src: import_prop_types11.default.string,
  /**
   * @ignore
   */
  style: import_prop_types11.default.object
} : void 0;
var CardMedia_default = withStyles_default(styles18, {
  name: "MuiCardMedia"
})(CardMedia);

// ../node_modules/@material-ui/core/esm/Drawer/Drawer.js
init_extends();
init_objectWithoutProperties();
var React15 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();

// ../node_modules/@material-ui/core/esm/Slide/Slide.js
init_extends();
init_objectWithoutProperties();
var React14 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());
var ReactDOM = __toESM(require_react_dom());
init_debounce();
init_esm();
init_useForkRef();
init_transitions();
function getTranslateValue(direction, node) {
  var rect = node.getBoundingClientRect();
  var transform;
  if (node.fakeTransform) {
    transform = node.fakeTransform;
  } else {
    var computedStyle = window.getComputedStyle(node);
    transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
  }
  var offsetX = 0;
  var offsetY = 0;
  if (transform && transform !== "none" && typeof transform === "string") {
    var transformValues = transform.split("(")[1].split(")")[0].split(",");
    offsetX = parseInt(transformValues[4], 10);
    offsetY = parseInt(transformValues[5], 10);
  }
  if (direction === "left") {
    return "translateX(".concat(window.innerWidth, "px) translateX(").concat(offsetX - rect.left, "px)");
  }
  if (direction === "right") {
    return "translateX(-".concat(rect.left + rect.width - offsetX, "px)");
  }
  if (direction === "up") {
    return "translateY(".concat(window.innerHeight, "px) translateY(").concat(offsetY - rect.top, "px)");
  }
  return "translateY(-".concat(rect.top + rect.height - offsetY, "px)");
}
function setTranslateValue(direction, node) {
  var transform = getTranslateValue(direction, node);
  if (transform) {
    node.style.webkitTransform = transform;
    node.style.transform = transform;
  }
}
var defaultTimeout = {
  enter: duration.enteringScreen,
  exit: duration.leavingScreen
};
var Slide = React14.forwardRef(function Slide2(props, ref) {
  var children = props.children, _props$direction = props.direction, direction = _props$direction === void 0 ? "down" : _props$direction, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "direction", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
  var theme = useTheme2();
  var childrenRef = React14.useRef(null);
  var handleOwnRef = React14.useCallback(function(instance) {
    childrenRef.current = ReactDOM.findDOMNode(instance);
  }, []);
  var handleRefIntermediary = useForkRef(children.ref, handleOwnRef);
  var handleRef = useForkRef(handleRefIntermediary, ref);
  var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
    return function(isAppearing) {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
  };
  var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
    setTranslateValue(direction, node);
    reflow(node);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
    var transitionProps = getTransitionProps({
      timeout,
      style
    }, {
      mode: "enter"
    });
    node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
      easing: theme.transitions.easing.easeOut
    }));
    node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
      easing: theme.transitions.easing.easeOut
    }));
    node.style.webkitTransform = "none";
    node.style.transform = "none";
    if (onEntering) {
      onEntering(node, isAppearing);
    }
  });
  var handleEntered = normalizedTransitionCallback(onEntered);
  var handleExiting = normalizedTransitionCallback(onExiting);
  var handleExit = normalizedTransitionCallback(function(node) {
    var transitionProps = getTransitionProps({
      timeout,
      style
    }, {
      mode: "exit"
    });
    node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps, {
      easing: theme.transitions.easing.sharp
    }));
    node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps, {
      easing: theme.transitions.easing.sharp
    }));
    setTranslateValue(direction, node);
    if (onExit) {
      onExit(node);
    }
  });
  var handleExited = normalizedTransitionCallback(function(node) {
    node.style.webkitTransition = "";
    node.style.transition = "";
    if (onExited) {
      onExited(node);
    }
  });
  var updatePosition = React14.useCallback(function() {
    if (childrenRef.current) {
      setTranslateValue(direction, childrenRef.current);
    }
  }, [direction]);
  React14.useEffect(function() {
    if (inProp || direction === "down" || direction === "right") {
      return void 0;
    }
    var handleResize = debounce(function() {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current);
      }
    });
    window.addEventListener("resize", handleResize);
    return function() {
      handleResize.clear();
      window.removeEventListener("resize", handleResize);
    };
  }, [direction, inProp]);
  React14.useEffect(function() {
    if (!inProp) {
      updatePosition();
    }
  }, [inProp, updatePosition]);
  return React14.createElement(TransitionComponent, _extends({
    nodeRef: childrenRef,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    appear: true,
    in: inProp,
    timeout
  }, other), function(state, childProps) {
    return React14.cloneElement(children, _extends({
      ref: handleRef,
      style: _extends({
        visibility: state === "exited" && !inProp ? "hidden" : void 0
      }, style, children.props.style)
    }, childProps));
  });
});
true ? Slide.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * A single child content element.
   */
  children: elementAcceptingRef_default,
  /**
   * Direction the child node will enter from.
   */
  direction: import_prop_types12.default.oneOf(["down", "left", "right", "up"]),
  /**
   * If `true`, show the component; triggers the enter or exit animation.
   */
  in: import_prop_types12.default.bool,
  /**
   * @ignore
   */
  onEnter: import_prop_types12.default.func,
  /**
   * @ignore
   */
  onEntered: import_prop_types12.default.func,
  /**
   * @ignore
   */
  onEntering: import_prop_types12.default.func,
  /**
   * @ignore
   */
  onExit: import_prop_types12.default.func,
  /**
   * @ignore
   */
  onExited: import_prop_types12.default.func,
  /**
   * @ignore
   */
  onExiting: import_prop_types12.default.func,
  /**
   * @ignore
   */
  style: import_prop_types12.default.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  timeout: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.shape({
    appear: import_prop_types12.default.number,
    enter: import_prop_types12.default.number,
    exit: import_prop_types12.default.number
  })])
} : void 0;
var Slide_default = Slide;

// ../node_modules/@material-ui/core/esm/Drawer/Drawer.js
init_capitalize();
init_transitions();
var styles19 = function styles20(theme) {
  return {
    /* Styles applied to the root element. */
    root: {},
    /* Styles applied to the root element if `variant="permanent or persistent"`. */
    docked: {
      flex: "0 0 auto"
    },
    /* Styles applied to the `Paper` component. */
    paper: {
      overflowY: "auto",
      display: "flex",
      flexDirection: "column",
      height: "100%",
      flex: "1 0 auto",
      zIndex: theme.zIndex.drawer,
      WebkitOverflowScrolling: "touch",
      // Add iOS momentum scrolling.
      // temporary style
      position: "fixed",
      top: 0,
      // We disable the focus ring for mouse, touch and keyboard users.
      // At some point, it would be better to keep it for keyboard users.
      // :focus-ring CSS pseudo-class will help.
      outline: 0
    },
    /* Styles applied to the `Paper` component if `anchor="left"`. */
    paperAnchorLeft: {
      left: 0,
      right: "auto"
    },
    /* Styles applied to the `Paper` component if `anchor="right"`. */
    paperAnchorRight: {
      left: "auto",
      right: 0
    },
    /* Styles applied to the `Paper` component if `anchor="top"`. */
    paperAnchorTop: {
      top: 0,
      left: 0,
      bottom: "auto",
      right: 0,
      height: "auto",
      maxHeight: "100%"
    },
    /* Styles applied to the `Paper` component if `anchor="bottom"`. */
    paperAnchorBottom: {
      top: "auto",
      left: 0,
      bottom: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    },
    /* Styles applied to the `Paper` component if `anchor="left"` and `variant` is not "temporary". */
    paperAnchorDockedLeft: {
      borderRight: "1px solid ".concat(theme.palette.divider)
    },
    /* Styles applied to the `Paper` component if `anchor="top"` and `variant` is not "temporary". */
    paperAnchorDockedTop: {
      borderBottom: "1px solid ".concat(theme.palette.divider)
    },
    /* Styles applied to the `Paper` component if `anchor="right"` and `variant` is not "temporary". */
    paperAnchorDockedRight: {
      borderLeft: "1px solid ".concat(theme.palette.divider)
    },
    /* Styles applied to the `Paper` component if `anchor="bottom"` and `variant` is not "temporary". */
    paperAnchorDockedBottom: {
      borderTop: "1px solid ".concat(theme.palette.divider)
    },
    /* Styles applied to the `Modal` component. */
    modal: {}
  };
};
var oppositeDirection = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function isHorizontal(anchor) {
  return ["left", "right"].indexOf(anchor) !== -1;
}
function getAnchor(theme, anchor) {
  return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
}
var defaultTransitionDuration = {
  enter: duration.enteringScreen,
  exit: duration.leavingScreen
};
var Drawer = React15.forwardRef(function Drawer2(props, ref) {
  var _props$anchor = props.anchor, anchorProp = _props$anchor === void 0 ? "left" : _props$anchor, BackdropProps = props.BackdropProps, children = props.children, classes = props.classes, className = props.className, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 16 : _props$elevation, _props$ModalProps = props.ModalProps;
  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  var BackdropPropsProp = _props$ModalProps.BackdropProps, ModalProps = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, _props$open = props.open, open = _props$open === void 0 ? false : _props$open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SlideProps = props.SlideProps, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Slide_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "temporary" : _props$variant, other = _objectWithoutProperties(props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"]);
  var theme = useTheme2();
  var mounted = React15.useRef(false);
  React15.useEffect(function() {
    mounted.current = true;
  }, []);
  var anchor = getAnchor(theme, anchorProp);
  var drawer = React15.createElement(Paper_default, _extends({
    elevation: variant === "temporary" ? elevation : 0,
    square: true
  }, PaperProps, {
    className: clsx_m_default(classes.paper, classes["paperAnchor".concat(capitalize(anchor))], PaperProps.className, variant !== "temporary" && classes["paperAnchorDocked".concat(capitalize(anchor))])
  }), children);
  if (variant === "permanent") {
    return React15.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.docked, className),
      ref
    }, other), drawer);
  }
  var slidingDrawer = React15.createElement(TransitionComponent, _extends({
    in: open,
    direction: oppositeDirection[anchor],
    timeout: transitionDuration,
    appear: mounted.current
  }, SlideProps), drawer);
  if (variant === "persistent") {
    return React15.createElement("div", _extends({
      className: clsx_m_default(classes.root, classes.docked, className),
      ref
    }, other), slidingDrawer);
  }
  return React15.createElement(Modal_default, _extends({
    BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
      transitionDuration
    }),
    BackdropComponent: Backdrop_default,
    className: clsx_m_default(classes.root, classes.modal, className),
    open,
    onClose,
    ref
  }, other, ModalProps), slidingDrawer);
});
true ? Drawer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Side from which the drawer will appear.
   */
  anchor: import_prop_types13.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  BackdropProps: import_prop_types13.default.object,
  /**
   * The contents of the drawer.
   */
  children: import_prop_types13.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types13.default.object,
  /**
   * @ignore
   */
  className: import_prop_types13.default.string,
  /**
   * The elevation of the drawer.
   */
  elevation: import_prop_types13.default.number,
  /**
   * Props applied to the [`Modal`](/api/modal/) element.
   */
  ModalProps: import_prop_types13.default.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   */
  onClose: import_prop_types13.default.func,
  /**
   * If `true`, the drawer is open.
   */
  open: import_prop_types13.default.bool,
  /**
   * Props applied to the [`Paper`](/api/paper/) element.
   */
  PaperProps: import_prop_types13.default.object,
  /**
   * Props applied to the [`Slide`](/api/slide/) element.
   */
  SlideProps: import_prop_types13.default.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.shape({
    appear: import_prop_types13.default.number,
    enter: import_prop_types13.default.number,
    exit: import_prop_types13.default.number
  })]),
  /**
   * The variant to use.
   */
  variant: import_prop_types13.default.oneOf(["permanent", "persistent", "temporary"])
} : void 0;
var Drawer_default = withStyles_default(styles19, {
  name: "MuiDrawer",
  flip: false
})(Drawer);

// ../node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanel.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var React17 = __toESM(require_react());
var import_react_is4 = __toESM(require_react_is());
var import_prop_types14 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();

// ../node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanelContext.js
var React16 = __toESM(require_react());
var ExpansionPanelContext = React16.createContext({});
if (true) {
  ExpansionPanelContext.displayName = "ExpansionPanelContext";
}
var ExpansionPanelContext_default = ExpansionPanelContext;

// ../node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanel.js
init_useControlled();
var styles21 = function styles22(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest
  };
  return {
    /* Styles applied to the root element. */
    root: {
      position: "relative",
      transition: theme.transitions.create(["margin"], transition),
      "&:before": {
        position: "absolute",
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: theme.palette.divider,
        transition: theme.transitions.create(["opacity", "background-color"], transition)
      },
      "&:first-child": {
        "&:before": {
          display: "none"
        }
      },
      "&$expanded": {
        margin: "16px 0",
        "&:first-child": {
          marginTop: 0
        },
        "&:last-child": {
          marginBottom: 0
        },
        "&:before": {
          opacity: 0
        }
      },
      "&$expanded + &": {
        "&:before": {
          display: "none"
        }
      },
      "&$disabled": {
        backgroundColor: theme.palette.action.disabledBackground
      }
    },
    /* Styles applied to the root element if `square={false}`. */
    rounded: {
      borderRadius: 0,
      "&:first-child": {
        borderTopLeftRadius: theme.shape.borderRadius,
        borderTopRightRadius: theme.shape.borderRadius
      },
      "&:last-child": {
        borderBottomLeftRadius: theme.shape.borderRadius,
        borderBottomRightRadius: theme.shape.borderRadius,
        // Fix a rendering issue on Edge
        "@supports (-ms-ime-align: auto)": {
          borderBottomLeftRadius: 0,
          borderBottomRightRadius: 0
        }
      }
    },
    /* Styles applied to the root element if `expanded={true}`. */
    expanded: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {}
  };
};
var warnedOnce = false;
var ExpansionPanel = React17.forwardRef(function ExpansionPanel2(props, ref) {
  if (true) {
    if (!warnedOnce) {
      warnedOnce = true;
      console.error(["Material-UI: the ExpansionPanel component was renamed to Accordion to use a more common naming convention.", "", "You should use `import { Accordion } from '@material-ui/core'`", "or `import Accordion from '@material-ui/core/Accordion'`"].join("\n"));
    }
  }
  var childrenProp = props.children, classes = props.classes, className = props.className, _props$defaultExpande = props.defaultExpanded, defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, expandedProp = props.expanded, onChange = props.onChange, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Collapse_default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);
  var _useControlled = useControlled({
    controlled: expandedProp,
    default: defaultExpanded,
    name: "ExpansionPanel",
    state: "expanded"
  }), _useControlled2 = _slicedToArray(_useControlled, 2), expanded = _useControlled2[0], setExpandedState = _useControlled2[1];
  var handleChange = React17.useCallback(function(event) {
    setExpandedState(!expanded);
    if (onChange) {
      onChange(event, !expanded);
    }
  }, [expanded, onChange, setExpandedState]);
  var _React$Children$toArr = React17.Children.toArray(childrenProp), _React$Children$toArr2 = _toArray(_React$Children$toArr), summary = _React$Children$toArr2[0], children = _React$Children$toArr2.slice(1);
  var contextValue = React17.useMemo(function() {
    return {
      expanded,
      disabled,
      toggle: handleChange
    };
  }, [expanded, disabled, handleChange]);
  return React17.createElement(Paper_default, _extends({
    className: clsx_m_default(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
    ref,
    square
  }, other), React17.createElement(ExpansionPanelContext_default.Provider, {
    value: contextValue
  }, summary), React17.createElement(TransitionComponent, _extends({
    in: expanded,
    timeout: "auto"
  }, TransitionProps), React17.createElement("div", {
    "aria-labelledby": summary.props.id,
    id: summary.props["aria-controls"],
    role: "region"
  }, children)));
});
true ? ExpansionPanel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the expansion panel.
   */
  children: chainPropTypes(import_prop_types14.default.node.isRequired, function(props) {
    var summary = React17.Children.toArray(props.children)[0];
    if ((0, import_react_is4.isFragment)(summary)) {
      return new Error("Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. Consider providing an array instead.");
    }
    if (!React17.isValidElement(summary)) {
      return new Error("Material-UI: Expected the first child of ExpansionPanel to be a valid element.");
    }
    return null;
  }),
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types14.default.object,
  /**
   * @ignore
   */
  className: import_prop_types14.default.string,
  /**
   * If `true`, expands the panel by default.
   */
  defaultExpanded: import_prop_types14.default.bool,
  /**
   * If `true`, the panel will be displayed in a disabled state.
   */
  disabled: import_prop_types14.default.bool,
  /**
   * If `true`, expands the panel, otherwise collapse it.
   * Setting this prop enables control over the panel.
   */
  expanded: import_prop_types14.default.bool,
  /**
   * Callback fired when the expand/collapse state is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {boolean} expanded The `expanded` state of the panel.
   */
  onChange: import_prop_types14.default.func,
  /**
   * If `true`, rounded corners are disabled.
   */
  square: import_prop_types14.default.bool,
  /**
   * The component used for the collapse effect.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   */
  TransitionComponent: import_prop_types14.default.elementType,
  /**
   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
   */
  TransitionProps: import_prop_types14.default.object
} : void 0;
var ExpansionPanel_default = withStyles_default(styles21, {
  name: "MuiExpansionPanel"
})(ExpansionPanel);

// ../node_modules/@material-ui/core/esm/ExpansionPanelActions/ExpansionPanelActions.js
init_extends();
init_objectWithoutProperties();
var React18 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles23 = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end"
  },
  /* Styles applied to the root element if `disableSpacing={false}`. */
  spacing: {
    "& > :not(:first-child)": {
      marginLeft: 8
    }
  }
};
var warnedOnce2 = false;
var ExpansionPanelActions = React18.forwardRef(function ExpansionPanelActions2(props, ref) {
  if (true) {
    if (!warnedOnce2) {
      warnedOnce2 = true;
      console.error(["Material-UI: the ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.", "", "You should use `import { AccordionActions } from '@material-ui/core'`", "or `import AccordionActions from '@material-ui/core/AccordionActions'`"].join("\n"));
    }
  }
  var classes = props.classes, className = props.className, _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, other = _objectWithoutProperties(props, ["classes", "className", "disableSpacing"]);
  return React18.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, !disableSpacing && classes.spacing),
    ref
  }, other));
});
true ? ExpansionPanelActions.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types15.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types15.default.object,
  /**
   * @ignore
   */
  className: import_prop_types15.default.string,
  /**
   * If `true`, the actions do not have additional margin.
   */
  disableSpacing: import_prop_types15.default.bool
} : void 0;
var ExpansionPanelActions_default = withStyles_default(styles23, {
  name: "MuiExpansionPanelActions"
})(ExpansionPanelActions);

// ../node_modules/@material-ui/core/esm/ExpansionPanelDetails/ExpansionPanelDetails.js
init_extends();
init_objectWithoutProperties();
var React19 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles24 = function styles25(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      padding: theme.spacing(1, 2, 2)
    }
  };
};
var warnedOnce3 = false;
var ExpansionPanelDetails = React19.forwardRef(function ExpansionPanelDetails2(props, ref) {
  if (true) {
    if (!warnedOnce3) {
      warnedOnce3 = true;
      console.error(["Material-UI: the ExpansionPanelDetails component was renamed to AccordionDetails to use a more common naming convention.", "", "You should use `import { AccordionDetails } from '@material-ui/core'`", "or `import AccordionDetails from '@material-ui/core/AccordionActions'`"].join("\n"));
    }
  }
  var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
  return React19.createElement("div", _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other));
});
true ? ExpansionPanelDetails.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the expansion panel details.
   */
  children: import_prop_types16.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types16.default.object,
  /**
   * @ignore
   */
  className: import_prop_types16.default.string
} : void 0;
var ExpansionPanelDetails_default = withStyles_default(styles24, {
  name: "MuiExpansionPanelDetails"
})(ExpansionPanelDetails);

// ../node_modules/@material-ui/core/esm/ExpansionPanelSummary/ExpansionPanelSummary.js
init_extends();
init_objectWithoutProperties();
var React20 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles26 = function styles27(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest
  };
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      minHeight: 8 * 6,
      transition: theme.transitions.create(["min-height", "background-color"], transition),
      padding: theme.spacing(0, 2),
      "&:hover:not($disabled)": {
        cursor: "pointer"
      },
      "&$expanded": {
        minHeight: 64
      },
      "&$focused": {
        backgroundColor: theme.palette.action.focus
      },
      "&$disabled": {
        opacity: theme.palette.action.disabledOpacity
      }
    },
    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
    expanded: {},
    /* Pseudo-class applied to the root element if `focused={true}`. */
    focused: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the children wrapper element. */
    content: {
      display: "flex",
      flexGrow: 1,
      transition: theme.transitions.create(["margin"], transition),
      margin: "12px 0",
      "&$expanded": {
        margin: "20px 0"
      }
    },
    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
    expandIcon: {
      transform: "rotate(0deg)",
      transition: theme.transitions.create("transform", transition),
      "&:hover": {
        // Disable the hover effect for the IconButton,
        // because a hover effect should apply to the entire Expand button and
        // not only to the IconButton.
        backgroundColor: "transparent"
      },
      "&$expanded": {
        transform: "rotate(180deg)"
      }
    }
  };
};
var warnedOnce4 = false;
var ExpansionPanelSummary = React20.forwardRef(function ExpansionPanelSummary2(props, ref) {
  if (true) {
    if (!warnedOnce4) {
      warnedOnce4 = true;
      console.error(["Material-UI: the ExpansionPanelSummary component was renamed to AccordionSummary to use a more common naming convention.", "", "You should use `import { AccordionSummary } from '@material-ui/core'`", "or `import AccordionSummary from '@material-ui/core/AccordionSummary'`"].join("\n"));
    }
  }
  var children = props.children, classes = props.classes, className = props.className, expandIcon = props.expandIcon, IconButtonProps = props.IconButtonProps, onBlur = props.onBlur, onClick = props.onClick, onFocusVisible = props.onFocusVisible, other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);
  var _React$useState = React20.useState(false), focusedState = _React$useState[0], setFocusedState = _React$useState[1];
  var handleFocusVisible = function handleFocusVisible2(event) {
    setFocusedState(true);
    if (onFocusVisible) {
      onFocusVisible(event);
    }
  };
  var handleBlur = function handleBlur2(event) {
    setFocusedState(false);
    if (onBlur) {
      onBlur(event);
    }
  };
  var _React$useContext = React20.useContext(ExpansionPanelContext_default), _React$useContext$dis = _React$useContext.disabled, disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis, expanded = _React$useContext.expanded, toggle = _React$useContext.toggle;
  var handleChange = function handleChange2(event) {
    if (toggle) {
      toggle(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  return React20.createElement(ButtonBase_default, _extends({
    focusRipple: false,
    disableRipple: true,
    disabled,
    component: "div",
    "aria-expanded": expanded,
    className: clsx_m_default(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
    onFocusVisible: handleFocusVisible,
    onBlur: handleBlur,
    onClick: handleChange,
    ref
  }, other), React20.createElement("div", {
    className: clsx_m_default(classes.content, expanded && classes.expanded)
  }, children), expandIcon && React20.createElement(IconButton_default, _extends({
    className: clsx_m_default(classes.expandIcon, expanded && classes.expanded),
    edge: "end",
    component: "div",
    tabIndex: null,
    role: null,
    "aria-hidden": true
  }, IconButtonProps), expandIcon));
});
true ? ExpansionPanelSummary.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the expansion panel summary.
   */
  children: import_prop_types17.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types17.default.object,
  /**
   * @ignore
   */
  className: import_prop_types17.default.string,
  /**
   * The icon to display as the expand indicator.
   */
  expandIcon: import_prop_types17.default.node,
  /**
   * Props applied to the `IconButton` element wrapping the expand icon.
   */
  IconButtonProps: import_prop_types17.default.object,
  /**
   * @ignore
   */
  onBlur: import_prop_types17.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types17.default.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: import_prop_types17.default.func
} : void 0;
var ExpansionPanelSummary_default = withStyles_default(styles26, {
  name: "MuiExpansionPanelSummary"
})(ExpansionPanelSummary);

// ../node_modules/@material-ui/core/esm/Fab/Fab.js
init_objectWithoutProperties();
init_extends();
var React21 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();
init_capitalize();
var styles28 = function styles29(theme) {
  return {
    /* Styles applied to the root element. */
    root: _extends({}, theme.typography.button, {
      boxSizing: "border-box",
      minHeight: 36,
      transition: theme.transitions.create(["background-color", "box-shadow", "border"], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: "50%",
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      "&:active": {
        boxShadow: theme.shadows[12]
      },
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      "&:hover": {
        backgroundColor: theme.palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.palette.grey[300]
        },
        "&$disabled": {
          backgroundColor: theme.palette.action.disabledBackground
        },
        textDecoration: "none"
      },
      "&$focusVisible": {
        boxShadow: theme.shadows[6]
      },
      "&$disabled": {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground
      }
    }),
    /* Styles applied to the span element that wraps the children. */
    label: {
      width: "100%",
      // assure the correct width for iOS Safari
      display: "inherit",
      alignItems: "inherit",
      justifyContent: "inherit"
    },
    /* Styles applied to the root element if `color="primary"`. */
    primary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      "&:hover": {
        backgroundColor: theme.palette.primary.dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.palette.primary.main
        }
      }
    },
    /* Styles applied to the root element if `color="secondary"`. */
    secondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      "&:hover": {
        backgroundColor: theme.palette.secondary.dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.palette.secondary.main
        }
      }
    },
    /* Styles applied to the root element if `variant="extended"`. */
    extended: {
      borderRadius: 48 / 2,
      padding: "0 16px",
      width: "auto",
      minHeight: "auto",
      minWidth: 48,
      height: 48,
      "&$sizeSmall": {
        width: "auto",
        padding: "0 8px",
        borderRadius: 34 / 2,
        minWidth: 34,
        height: 34
      },
      "&$sizeMedium": {
        width: "auto",
        padding: "0 16px",
        borderRadius: 40 / 2,
        minWidth: 40,
        height: 40
      }
    },
    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
    focusVisible: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: "inherit"
    },
    /* Styles applied to the root element if `size="small"``. */
    sizeSmall: {
      width: 40,
      height: 40
    },
    /* Styles applied to the root element if `size="medium"``. */
    sizeMedium: {
      width: 48,
      height: 48
    }
  };
};
var Fab = React21.forwardRef(function Fab2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, component = _props$component === void 0 ? "button" : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, focusVisibleClassName = props.focusVisibleClassName, _props$size = props.size, size = _props$size === void 0 ? "large" : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? "circular" : _props$variant, other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);
  return React21.createElement(ButtonBase_default, _extends({
    className: clsx_m_default(classes.root, className, size !== "large" && classes["size".concat(capitalize(size))], disabled && classes.disabled, variant === "extended" && classes.extended, {
      "primary": classes.primary,
      "secondary": classes.secondary,
      "inherit": classes.colorInherit
    }[color]),
    component,
    disabled,
    focusRipple: !disableFocusRipple,
    focusVisibleClassName: clsx_m_default(classes.focusVisible, focusVisibleClassName),
    ref
  }, other), React21.createElement("span", {
    className: classes.label
  }, children));
});
true ? Fab.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the button.
   */
  children: import_prop_types18.default.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types18.default.object,
  /**
   * @ignore
   */
  className: import_prop_types18.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types18.default.oneOf(["default", "inherit", "primary", "secondary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types18.default.elementType,
  /**
   * If `true`, the button will be disabled.
   */
  disabled: import_prop_types18.default.bool,
  /**
   * If `true`, the  keyboard focus ripple will be disabled.
   */
  disableFocusRipple: import_prop_types18.default.bool,
  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: import_prop_types18.default.bool,
  /**
   * @ignore
   */
  focusVisibleClassName: import_prop_types18.default.string,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: import_prop_types18.default.string,
  /**
   * The size of the button.
   * `small` is equivalent to the dense button styling.
   */
  size: import_prop_types18.default.oneOf(["large", "medium", "small"]),
  /**
   * The variant to use.
   * 'round' is deprecated, use 'circular' instead.
   */
  variant: chainPropTypes(import_prop_types18.default.oneOf(["extended", "circular", "round"]), function(props) {
    if (props.variant === "round") {
      throw new Error('Material-UI: variant="round" was renamed variant="circular" for consistency.');
    }
    return null;
  })
} : void 0;
var Fab_default = withStyles_default(styles28, {
  name: "MuiFab"
})(Fab);

// ../node_modules/@material-ui/core/esm/GridList/GridList.js
init_extends();
init_objectWithoutProperties();
var React22 = __toESM(require_react());
var import_react_is5 = __toESM(require_react_is());
var import_prop_types19 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles30 = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    flexWrap: "wrap",
    overflowY: "auto",
    listStyle: "none",
    padding: 0,
    WebkitOverflowScrolling: "touch"
    // Add iOS momentum scrolling.
  }
};
var warnedOnce5 = false;
var GridList = React22.forwardRef(function GridList2(props, ref) {
  if (true) {
    if (!warnedOnce5) {
      warnedOnce5 = true;
      console.error(["Material-UI: The GridList component was renamed to ImageList to align with the current Material Design naming.", "", "You should use `import { ImageList } from '@material-ui/core'`", "or `import ImageList from '@material-ui/core/ImageList'`."].join("\n"));
    }
  }
  var _props$cellHeight = props.cellHeight, cellHeight = _props$cellHeight === void 0 ? 180 : _props$cellHeight, children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 2 : _props$cols, _props$component = props.component, Component2 = _props$component === void 0 ? "ul" : _props$component, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? 4 : _props$spacing, style = props.style, other = _objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "spacing", "style"]);
  return React22.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref,
    style: _extends({
      margin: -spacing / 2
    }, style)
  }, other), React22.Children.map(children, function(child) {
    if (!React22.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is5.isFragment)(child)) {
        console.error(["Material-UI: The GridList component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    var childCols = child.props.cols || 1;
    var childRows = child.props.rows || 1;
    return React22.cloneElement(child, {
      style: _extends({
        width: "".concat(100 / cols * childCols, "%"),
        height: cellHeight === "auto" ? "auto" : cellHeight * childRows + spacing,
        padding: spacing / 2
      }, child.props.style)
    });
  }));
});
true ? GridList.propTypes = {
  /**
   * Number of px for one cell height.
   * You can set `'auto'` if you want to let the children determine the height.
   */
  cellHeight: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.oneOf(["auto"])]),
  /**
   * Grid Tiles that will be in Grid List.
   */
  children: import_prop_types19.default.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types19.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types19.default.string,
  /**
   * Number of columns.
   */
  cols: import_prop_types19.default.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types19.default.elementType,
  /**
   * Number of px for the spacing between tiles.
   */
  spacing: import_prop_types19.default.number,
  /**
   * @ignore
   */
  style: import_prop_types19.default.object
} : void 0;
var GridList_default = withStyles_default(styles30, {
  name: "MuiGridList"
})(GridList);

// ../node_modules/@material-ui/core/esm/GridListTile/GridListTile.js
init_extends();
init_objectWithoutProperties();
init_toConsumableArray();
var React23 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());
init_clsx_m();
init_debounce();
init_withStyles();
init_isMuiElement();
var styles31 = {
  /* Styles applied to the root element. */
  root: {
    boxSizing: "border-box",
    flexShrink: 0
  },
  /* Styles applied to the `div` element that wraps the children. */
  tile: {
    position: "relative",
    display: "block",
    // In case it's not rendered with a div.
    height: "100%",
    overflow: "hidden"
  },
  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
  imgFullHeight: {
    height: "100%",
    transform: "translateX(-50%)",
    position: "relative",
    left: "50%"
  },
  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
  imgFullWidth: {
    width: "100%",
    position: "relative",
    transform: "translateY(-50%)",
    top: "50%"
  }
};
var fit = function fit2(imgEl, classes) {
  if (!imgEl || !imgEl.complete) {
    return;
  }
  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
    var _imgEl$classList, _imgEl$classList2;
    (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(" ")));
    (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(" ")));
  } else {
    var _imgEl$classList3, _imgEl$classList4;
    (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(" ")));
    (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(" ")));
  }
};
function ensureImageCover(imgEl, classes) {
  if (!imgEl) {
    return;
  }
  if (imgEl.complete) {
    fit(imgEl, classes);
  } else {
    imgEl.addEventListener("load", function() {
      fit(imgEl, classes);
    });
  }
}
var warnedOnce6 = false;
var GridListTile = React23.forwardRef(function GridListTile2(props, ref) {
  if (true) {
    if (!warnedOnce6) {
      warnedOnce6 = true;
      console.error(["Material-UI: The GridListTile component was renamed to ImageListItem to align with the current Material Design naming.", "", "You should use `import { ImageListItem } from '@material-ui/core'`", "or `import ImageListItem from '@material-ui/core/ImageListItem'`."].join("\n"));
    }
  }
  var children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 1 : _props$cols, _props$component = props.component, Component2 = _props$component === void 0 ? "li" : _props$component, _props$rows = props.rows, rows = _props$rows === void 0 ? 1 : _props$rows, other = _objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);
  var imgRef = React23.useRef(null);
  React23.useEffect(function() {
    ensureImageCover(imgRef.current, classes);
  });
  React23.useEffect(function() {
    var handleResize = debounce(function() {
      fit(imgRef.current, classes);
    });
    window.addEventListener("resize", handleResize);
    return function() {
      handleResize.clear();
      window.removeEventListener("resize", handleResize);
    };
  }, [classes]);
  return React23.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other), React23.createElement("div", {
    className: classes.tile
  }, React23.Children.map(children, function(child) {
    if (!React23.isValidElement(child)) {
      return null;
    }
    if (child.type === "img" || isMuiElement(child, ["Image"])) {
      return React23.cloneElement(child, {
        ref: imgRef
      });
    }
    return child;
  })));
});
true ? GridListTile.propTypes = {
  /**
   * Theoretically you can pass any node as children, but the main use case is to pass an img,
   * in which case GridListTile takes care of making the image "cover" available space
   * (similar to `background-size: cover` or to `object-fit: cover`).
   */
  children: import_prop_types20.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types20.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types20.default.string,
  /**
   * Width of the tile in number of grid cells.
   */
  cols: import_prop_types20.default.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types20.default.elementType,
  /**
   * Height of the tile in number of grid cells.
   */
  rows: import_prop_types20.default.number
} : void 0;
var GridListTile_default = withStyles_default(styles31, {
  name: "MuiGridListTile"
})(GridListTile);

// ../node_modules/@material-ui/core/esm/GridListTileBar/GridListTileBar.js
init_extends();
init_objectWithoutProperties();
var React24 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles32 = function styles33(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "absolute",
      left: 0,
      right: 0,
      height: 48,
      background: "rgba(0, 0, 0, 0.5)",
      display: "flex",
      alignItems: "center",
      fontFamily: theme.typography.fontFamily
    },
    /* Styles applied to the root element if `titlePosition="bottom"`. */
    titlePositionBottom: {
      bottom: 0
    },
    /* Styles applied to the root element if `titlePosition="top"`. */
    titlePositionTop: {
      top: 0
    },
    /* Styles applied to the root element if a `subtitle` is provided. */
    rootSubtitle: {
      height: 68
    },
    /* Styles applied to the title and subtitle container element. */
    titleWrap: {
      flexGrow: 1,
      marginLeft: 16,
      marginRight: 16,
      color: theme.palette.common.white,
      overflow: "hidden"
    },
    /* Styles applied to the container element if `actionPosition="left"`. */
    titleWrapActionPosLeft: {
      marginLeft: 0
    },
    /* Styles applied to the container element if `actionPosition="right"`. */
    titleWrapActionPosRight: {
      marginRight: 0
    },
    /* Styles applied to the title container element. */
    title: {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: "24px",
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    },
    /* Styles applied to the subtitle container element. */
    subtitle: {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    },
    /* Styles applied to the actionIcon if supplied. */
    actionIcon: {},
    /* Styles applied to the actionIcon if `actionPosition="left"`. */
    actionIconActionPosLeft: {
      order: -1
    }
  };
};
var warnedOnce7 = false;
var GridListTileBar = React24.forwardRef(function GridListTileBar2(props, ref) {
  if (true) {
    if (!warnedOnce7) {
      warnedOnce7 = true;
      console.error(["Material-UI: The GridListTileBar component was renamed to ImageListItemBar to align with the current Material Design naming.", "", "You should use `import { ImageListItemBar } from '@material-ui/core'`", "or `import ImageListItemBar from '@material-ui/core/ImageListItemBar'`."].join("\n"));
    }
  }
  var actionIcon = props.actionIcon, _props$actionPosition = props.actionPosition, actionPosition = _props$actionPosition === void 0 ? "right" : _props$actionPosition, classes = props.classes, className = props.className, subtitle = props.subtitle, title = props.title, _props$titlePosition = props.titlePosition, titlePosition = _props$titlePosition === void 0 ? "bottom" : _props$titlePosition, other = _objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "titlePosition"]);
  var actionPos = actionIcon && actionPosition;
  return React24.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, titlePosition === "top" ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),
    ref
  }, other), React24.createElement("div", {
    className: clsx_m_default(classes.titleWrap, {
      "left": classes.titleWrapActionPosLeft,
      "right": classes.titleWrapActionPosRight
    }[actionPos])
  }, React24.createElement("div", {
    className: classes.title
  }, title), subtitle ? React24.createElement("div", {
    className: classes.subtitle
  }, subtitle) : null), actionIcon ? React24.createElement("div", {
    className: clsx_m_default(classes.actionIcon, actionPos === "left" && classes.actionIconActionPosLeft)
  }, actionIcon) : null);
});
true ? GridListTileBar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * An IconButton element to be used as secondary action target
   * (primary action target is the tile itself).
   */
  actionIcon: import_prop_types21.default.node,
  /**
   * Position of secondary action IconButton.
   */
  actionPosition: import_prop_types21.default.oneOf(["left", "right"]),
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types21.default.object,
  /**
   * @ignore
   */
  className: import_prop_types21.default.string,
  /**
   * String or element serving as subtitle (support text).
   */
  subtitle: import_prop_types21.default.node,
  /**
   * Title to be displayed on tile.
   */
  title: import_prop_types21.default.node,
  /**
   * Position of the title bar.
   */
  titlePosition: import_prop_types21.default.oneOf(["bottom", "top"])
} : void 0;
var GridListTileBar_default = withStyles_default(styles32, {
  name: "MuiGridListTileBar"
})(GridListTileBar);

// ../node_modules/@material-ui/core/esm/Hidden/Hidden.js
init_extends();
init_objectWithoutProperties();
var React28 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());

// ../node_modules/@material-ui/core/esm/Hidden/HiddenJs.js
var import_prop_types23 = __toESM(require_prop_types());
init_esm();

// ../node_modules/@material-ui/core/esm/withWidth/withWidth.js
init_extends();
init_objectWithoutProperties();
var React26 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());
init_esm();
init_esm2();
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
init_createBreakpoints();

// ../node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js
init_extends();
var React25 = __toESM(require_react());
init_esm2();
function useMediaQuery(queryInput) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var theme = useTheme();
  var props = getThemeProps({
    theme,
    name: "MuiUseMediaQuery",
    props: {}
  });
  if (true) {
    if (typeof queryInput === "function" && theme === null) {
      console.error(["Material-UI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
    }
  }
  var query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
  query = query.replace(/^@media( ?)/m, "");
  var supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
  var _props$options = _extends({}, props, options), _props$options$defaul = _props$options.defaultMatches, defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul, _props$options$matchM = _props$options.matchMedia, matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM, _props$options$noSsr = _props$options.noSsr, noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr, _props$options$ssrMat = _props$options.ssrMatchMedia, ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;
  var _React$useState = React25.useState(function() {
    if (noSsr && supportMatchMedia) {
      return matchMedia(query).matches;
    }
    if (ssrMatchMedia) {
      return ssrMatchMedia(query).matches;
    }
    return defaultMatches;
  }), match = _React$useState[0], setMatch = _React$useState[1];
  React25.useEffect(function() {
    var active = true;
    if (!supportMatchMedia) {
      return void 0;
    }
    var queryList = matchMedia(query);
    var updateMatch = function updateMatch2() {
      if (active) {
        setMatch(queryList.matches);
      }
    };
    updateMatch();
    queryList.addListener(updateMatch);
    return function() {
      active = false;
      queryList.removeListener(updateMatch);
    };
  }, [query, matchMedia, supportMatchMedia]);
  if (true) {
    React25.useDebugValue({
      query,
      match
    });
  }
  return match;
}

// ../node_modules/@material-ui/core/esm/withWidth/withWidth.js
var isWidthUp = function isWidthUp2(breakpoint, width) {
  var inclusive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  if (inclusive) {
    return keys.indexOf(breakpoint) <= keys.indexOf(width);
  }
  return keys.indexOf(breakpoint) < keys.indexOf(width);
};
var isWidthDown = function isWidthDown2(breakpoint, width) {
  var inclusive = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  if (inclusive) {
    return keys.indexOf(width) <= keys.indexOf(breakpoint);
  }
  return keys.indexOf(width) < keys.indexOf(breakpoint);
};
var useEnhancedEffect = typeof window === "undefined" ? React26.useEffect : React26.useLayoutEffect;
var withWidth = function withWidth2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return function(Component2) {
    var _options$withTheme = options.withTheme, withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme, _options$noSSR = options.noSSR, noSSR = _options$noSSR === void 0 ? false : _options$noSSR, initialWidthOption = options.initialWidth;
    function WithWidth(props) {
      var contextTheme = useTheme2();
      var theme = props.theme || contextTheme;
      var _getThemeProps = getThemeProps({
        theme,
        name: "MuiWithWidth",
        props: _extends({}, props)
      }), initialWidth = _getThemeProps.initialWidth, width = _getThemeProps.width, other = _objectWithoutProperties(_getThemeProps, ["initialWidth", "width"]);
      var _React$useState = React26.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
      useEnhancedEffect(function() {
        setMountedState(true);
      }, []);
      var keys2 = theme.breakpoints.keys.slice().reverse();
      var widthComputed = keys2.reduce(function(output, key) {
        var matches = useMediaQuery(theme.breakpoints.up(key));
        return !output && matches ? key : output;
      }, null);
      var more = _extends({
        width: width || (mountedState || noSSR ? widthComputed : void 0) || initialWidth || initialWidthOption
      }, withThemeOption ? {
        theme
      } : {}, other);
      if (more.width === void 0) {
        return null;
      }
      return React26.createElement(Component2, more);
    }
    true ? WithWidth.propTypes = {
      /**
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: import_prop_types22.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
      /**
       * @ignore
       */
      theme: import_prop_types22.default.object,
      /**
       * Bypass the width calculation logic.
       */
      width: import_prop_types22.default.oneOf(["xs", "sm", "md", "lg", "xl"])
    } : void 0;
    if (true) {
      WithWidth.displayName = "WithWidth(".concat(getDisplayName(Component2), ")");
    }
    (0, import_hoist_non_react_statics.default)(WithWidth, Component2);
    return WithWidth;
  };
};
var withWidth_default = withWidth;

// ../node_modules/@material-ui/core/esm/Hidden/HiddenJs.js
function HiddenJs(props) {
  var children = props.children, only = props.only, width = props.width;
  var theme = useTheme2();
  var visible = true;
  if (only) {
    if (Array.isArray(only)) {
      for (var i = 0; i < only.length; i += 1) {
        var breakpoint = only[i];
        if (width === breakpoint) {
          visible = false;
          break;
        }
      }
    } else if (only && width === only) {
      visible = false;
    }
  }
  if (visible) {
    for (var _i = 0; _i < theme.breakpoints.keys.length; _i += 1) {
      var _breakpoint = theme.breakpoints.keys[_i];
      var breakpointUp = props["".concat(_breakpoint, "Up")];
      var breakpointDown = props["".concat(_breakpoint, "Down")];
      if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {
        visible = false;
        break;
      }
    }
  }
  if (!visible) {
    return null;
  }
  return children;
}
HiddenJs.propTypes = {
  /**
   * The content of the component.
   */
  children: import_prop_types23.default.node,
  /**
   * @ignore
   */
  className: import_prop_types23.default.string,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */
  implementation: import_prop_types23.default.oneOf(["js", "css"]),
  /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use an heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */
  initialWidth: import_prop_types23.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  lgDown: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  lgUp: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  mdDown: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  mdUp: import_prop_types23.default.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types23.default.arrayOf(import_prop_types23.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  smDown: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  smUp: import_prop_types23.default.bool,
  /**
   * @ignore
   * width prop provided by withWidth decorator.
   */
  width: import_prop_types23.default.string.isRequired,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xlDown: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xlUp: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xsDown: import_prop_types23.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xsUp: import_prop_types23.default.bool
};
if (true) {
  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);
}
var HiddenJs_default = withWidth_default()(HiddenJs);

// ../node_modules/@material-ui/core/esm/Hidden/HiddenCss.js
init_objectWithoutProperties();
init_defineProperty();
var React27 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
init_capitalize();
init_withStyles();
var styles34 = function styles35(theme) {
  var hidden = {
    display: "none"
  };
  return theme.breakpoints.keys.reduce(function(acc, key) {
    acc["only".concat(capitalize(key))] = _defineProperty({}, theme.breakpoints.only(key), hidden);
    acc["".concat(key, "Up")] = _defineProperty({}, theme.breakpoints.up(key), hidden);
    acc["".concat(key, "Down")] = _defineProperty({}, theme.breakpoints.down(key), hidden);
    return acc;
  }, {});
};
function HiddenCss(props) {
  var children = props.children, classes = props.classes, className = props.className, only = props.only, other = _objectWithoutProperties(props, ["children", "classes", "className", "only"]);
  var theme = useTheme2();
  if (true) {
    var unknownProps = Object.keys(other).filter(function(propName) {
      var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function(breakpoint2) {
        return "".concat(breakpoint2, "Up") === propName || "".concat(breakpoint2, "Down") === propName;
      });
      return isUndeclaredBreakpoint;
    });
    if (unknownProps.length > 0) {
      console.error('Material-UI: Unsupported props received by `<Hidden implementation="css" />`: '.concat(unknownProps.join(", "), ". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?"));
    }
  }
  var clsx = [];
  if (className) {
    clsx.push(className);
  }
  for (var i = 0; i < theme.breakpoints.keys.length; i += 1) {
    var breakpoint = theme.breakpoints.keys[i];
    var breakpointUp = props["".concat(breakpoint, "Up")];
    var breakpointDown = props["".concat(breakpoint, "Down")];
    if (breakpointUp) {
      clsx.push(classes["".concat(breakpoint, "Up")]);
    }
    if (breakpointDown) {
      clsx.push(classes["".concat(breakpoint, "Down")]);
    }
  }
  if (only) {
    var onlyBreakpoints = Array.isArray(only) ? only : [only];
    onlyBreakpoints.forEach(function(breakpoint2) {
      clsx.push(classes["only".concat(capitalize(breakpoint2))]);
    });
  }
  return React27.createElement("div", {
    className: clsx.join(" ")
  }, children);
}
true ? HiddenCss.propTypes = {
  /**
   * The content of the component.
   */
  children: import_prop_types24.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types24.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types24.default.string,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */
  implementation: import_prop_types24.default.oneOf(["js", "css"]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  lgDown: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  lgUp: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  mdDown: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  mdUp: import_prop_types24.default.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types24.default.arrayOf(import_prop_types24.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  smDown: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  smUp: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xlDown: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xlUp: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xsDown: import_prop_types24.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xsUp: import_prop_types24.default.bool
} : void 0;
var HiddenCss_default = withStyles_default(styles34, {
  name: "PrivateHiddenCss"
})(HiddenCss);

// ../node_modules/@material-ui/core/esm/Hidden/Hidden.js
function Hidden(props) {
  var _props$implementation = props.implementation, implementation = _props$implementation === void 0 ? "js" : _props$implementation, _props$lgDown = props.lgDown, lgDown = _props$lgDown === void 0 ? false : _props$lgDown, _props$lgUp = props.lgUp, lgUp = _props$lgUp === void 0 ? false : _props$lgUp, _props$mdDown = props.mdDown, mdDown = _props$mdDown === void 0 ? false : _props$mdDown, _props$mdUp = props.mdUp, mdUp = _props$mdUp === void 0 ? false : _props$mdUp, _props$smDown = props.smDown, smDown = _props$smDown === void 0 ? false : _props$smDown, _props$smUp = props.smUp, smUp = _props$smUp === void 0 ? false : _props$smUp, _props$xlDown = props.xlDown, xlDown = _props$xlDown === void 0 ? false : _props$xlDown, _props$xlUp = props.xlUp, xlUp = _props$xlUp === void 0 ? false : _props$xlUp, _props$xsDown = props.xsDown, xsDown = _props$xsDown === void 0 ? false : _props$xsDown, _props$xsUp = props.xsUp, xsUp = _props$xsUp === void 0 ? false : _props$xsUp, other = _objectWithoutProperties(props, ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);
  if (implementation === "js") {
    return React28.createElement(HiddenJs_default, _extends({
      lgDown,
      lgUp,
      mdDown,
      mdUp,
      smDown,
      smUp,
      xlDown,
      xlUp,
      xsDown,
      xsUp
    }, other));
  }
  return React28.createElement(HiddenCss_default, _extends({
    lgDown,
    lgUp,
    mdDown,
    mdUp,
    smDown,
    smUp,
    xlDown,
    xlUp,
    xsDown,
    xsUp
  }, other));
}
true ? Hidden.propTypes = {
  /**
   * The content of the component.
   */
  children: import_prop_types25.default.node,
  /**
   * @ignore
   */
  className: import_prop_types25.default.string,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */
  implementation: import_prop_types25.default.oneOf(["js", "css"]),
  /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use an heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */
  initialWidth: import_prop_types25.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  lgDown: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  lgUp: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  mdDown: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  mdUp: import_prop_types25.default.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types25.default.arrayOf(import_prop_types25.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down will be hidden.
   */
  smDown: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  smUp: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xlDown: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xlUp: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and down will be hidden.
   */
  xsDown: import_prop_types25.default.bool,
  /**
   * If `true`, screens this size and up will be hidden.
   */
  xsUp: import_prop_types25.default.bool
} : void 0;
var Hidden_default = Hidden;

// ../node_modules/@material-ui/core/esm/Icon/Icon.js
init_extends();
init_objectWithoutProperties();
var React29 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();
init_capitalize();
var styles36 = function styles37(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      userSelect: "none",
      fontSize: theme.typography.pxToRem(24),
      width: "1em",
      height: "1em",
      // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
      // To remove at some point.
      overflow: "hidden",
      flexShrink: 0
    },
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main
    },
    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main
    },
    /* Styles applied to the root element if `color="action"`. */
    colorAction: {
      color: theme.palette.action.active
    },
    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main
    },
    /* Styles applied to the root element if `color="disabled"`. */
    colorDisabled: {
      color: theme.palette.action.disabled
    },
    /* Styles applied to the root element if `fontSize="inherit"`. */
    fontSizeInherit: {
      fontSize: "inherit"
    },
    /* Styles applied to the root element if `fontSize="small"`. */
    fontSizeSmall: {
      fontSize: theme.typography.pxToRem(20)
    },
    /* Styles applied to the root element if `fontSize="large"`. */
    fontSizeLarge: {
      fontSize: theme.typography.pxToRem(36)
    }
  };
};
var Icon = React29.forwardRef(function Icon2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "inherit" : _props$color, _props$component = props.component, Component2 = _props$component === void 0 ? "span" : _props$component, _props$fontSize = props.fontSize, fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "fontSize"]);
  return React29.createElement(Component2, _extends({
    className: clsx_m_default("material-icons", classes.root, className, color !== "inherit" && classes["color".concat(capitalize(color))], fontSize !== "default" && fontSize !== "medium" && classes["fontSize".concat(capitalize(fontSize))]),
    "aria-hidden": true,
    ref
  }, other));
});
true ? Icon.propTypes = {
  /**
   * The name of the icon font ligature.
   */
  children: import_prop_types26.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types26.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types26.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types26.default.oneOf(["inherit", "primary", "secondary", "action", "error", "disabled"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types26.default.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   */
  fontSize: chainPropTypes(import_prop_types26.default.oneOf(["default", "inherit", "large", "medium", "small"]), function(props) {
    var fontSize = props.fontSize;
    if (fontSize === "default") {
      throw new Error('Material-UI: `fontSize="default"` is deprecated. Use `fontSize="medium"` instead.');
    }
    return null;
  })
} : void 0;
Icon.muiName = "Icon";
var Icon_default = withStyles_default(styles36, {
  name: "MuiIcon"
})(Icon);

// ../node_modules/@material-ui/core/esm/ImageList/ImageList.js
init_extends();
init_objectWithoutProperties();
var React30 = __toESM(require_react());
var import_react_is6 = __toESM(require_react_is());
var import_prop_types27 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_deprecatedPropType();
var styles38 = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    flexWrap: "wrap",
    overflowY: "auto",
    listStyle: "none",
    padding: 0,
    WebkitOverflowScrolling: "touch"
    // Add iOS momentum scrolling.
  }
};
var ImageList = React30.forwardRef(function ImageList2(props, ref) {
  var cellHeight = props.cellHeight, children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 2 : _props$cols, _props$component = props.component, Component2 = _props$component === void 0 ? "ul" : _props$component, _props$gap = props.gap, gapProp = _props$gap === void 0 ? 4 : _props$gap, _props$rowHeight = props.rowHeight, rowHeightProp = _props$rowHeight === void 0 ? 180 : _props$rowHeight, spacing = props.spacing, style = props.style, other = _objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "gap", "rowHeight", "spacing", "style"]);
  var gap = spacing || gapProp;
  var rowHeight = cellHeight || rowHeightProp;
  return React30.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref,
    style: _extends({
      margin: -gap / 2
    }, style)
  }, other), React30.Children.map(children, function(child) {
    if (!React30.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is6.isFragment)(child)) {
        console.error(["Material-UI: The ImageList component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    var childCols = child.props.cols || 1;
    var childRows = child.props.rows || 1;
    return React30.cloneElement(child, {
      style: _extends({
        width: "".concat(100 / cols * childCols, "%"),
        height: rowHeight === "auto" ? "auto" : rowHeight * childRows + gap,
        padding: gap / 2
      }, child.props.style)
    });
  }));
});
true ? ImageList.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Cell height in `px`.
   * Set to `'auto'` to let the children determine the height.
   * @deprecated Use rowHeight instead.
   */
  cellHeight: deprecatedPropType(import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.oneOf(["auto"])]), "Use the `rowHeight` prop instead."),
  /**
   * Items that will be in the image list.
   */
  children: import_prop_types27.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types27.default.object,
  /**
   * @ignore
   */
  className: import_prop_types27.default.string,
  /**
   * Number of columns.
   */
  cols: import_prop_types27.default.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types27.default.elementType,
  /**
   * The gap between items in `px`.
   */
  gap: import_prop_types27.default.number,
  /**
   * The height of one row in `px`.
   */
  rowHeight: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number]),
  /**
   * The spacing between items in `px`.
   * @deprecated Use gap instead.
   */
  spacing: deprecatedPropType(import_prop_types27.default.number, "Use the `gap` prop instead."),
  /**
   * @ignore
   */
  style: import_prop_types27.default.object
} : void 0;
var ImageList_default = withStyles_default(styles38, {
  name: "MuiImageList"
})(ImageList);

// ../node_modules/@material-ui/core/esm/ImageListItem/ImageListItem.js
init_extends();
init_objectWithoutProperties();
init_toConsumableArray();
var React31 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
init_clsx_m();
init_debounce();
init_withStyles();
init_isMuiElement();
var styles39 = {
  /* Styles applied to the root element. */
  root: {
    boxSizing: "border-box",
    flexShrink: 0
  },
  /* Styles applied to the `div` element that wraps the children. */
  item: {
    position: "relative",
    display: "block",
    // In case it's not rendered with a div.
    height: "100%",
    overflow: "hidden"
  },
  /* Styles applied to an `img` element child, if needed to ensure it covers the item. */
  imgFullHeight: {
    height: "100%",
    transform: "translateX(-50%)",
    position: "relative",
    left: "50%"
  },
  /* Styles applied to an `img` element child, if needed to ensure it covers the item. */
  imgFullWidth: {
    width: "100%",
    position: "relative",
    transform: "translateY(-50%)",
    top: "50%"
  }
};
var fit3 = function fit4(imgEl, classes) {
  if (!imgEl || !imgEl.complete) {
    return;
  }
  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {
    var _imgEl$classList, _imgEl$classList2;
    (_imgEl$classList = imgEl.classList).remove.apply(_imgEl$classList, _toConsumableArray(classes.imgFullWidth.split(" ")));
    (_imgEl$classList2 = imgEl.classList).add.apply(_imgEl$classList2, _toConsumableArray(classes.imgFullHeight.split(" ")));
  } else {
    var _imgEl$classList3, _imgEl$classList4;
    (_imgEl$classList3 = imgEl.classList).remove.apply(_imgEl$classList3, _toConsumableArray(classes.imgFullHeight.split(" ")));
    (_imgEl$classList4 = imgEl.classList).add.apply(_imgEl$classList4, _toConsumableArray(classes.imgFullWidth.split(" ")));
  }
};
function ensureImageCover2(imgEl, classes) {
  if (!imgEl) {
    return;
  }
  if (imgEl.complete) {
    fit3(imgEl, classes);
  } else {
    imgEl.addEventListener("load", function() {
      fit3(imgEl, classes);
    });
  }
}
var ImageListItem = React31.forwardRef(function ImageListItem2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$cols = props.cols, cols = _props$cols === void 0 ? 1 : _props$cols, _props$component = props.component, Component2 = _props$component === void 0 ? "li" : _props$component, _props$rows = props.rows, rows = _props$rows === void 0 ? 1 : _props$rows, other = _objectWithoutProperties(props, ["children", "classes", "className", "cols", "component", "rows"]);
  var imgRef = React31.useRef(null);
  React31.useEffect(function() {
    ensureImageCover2(imgRef.current, classes);
  });
  React31.useEffect(function() {
    var handleResize = debounce(function() {
      fit3(imgRef.current, classes);
    });
    window.addEventListener("resize", handleResize);
    return function() {
      handleResize.clear();
      window.removeEventListener("resize", handleResize);
    };
  }, [classes]);
  return React31.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other), React31.createElement("div", {
    className: classes.item
  }, React31.Children.map(children, function(child) {
    if (!React31.isValidElement(child)) {
      return null;
    }
    if (child.type === "img" || isMuiElement(child, ["Image"])) {
      return React31.cloneElement(child, {
        ref: imgRef
      });
    }
    return child;
  })));
});
true ? ImageListItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * While you can pass any node as children, the main use case is for an img.
   */
  children: import_prop_types28.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types28.default.object,
  /**
   * @ignore
   */
  className: import_prop_types28.default.string,
  /**
   * Width of the item in number of grid columns.
   */
  cols: import_prop_types28.default.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types28.default.elementType,
  /**
   * Height of the item in number of grid rows.
   */
  rows: import_prop_types28.default.number
} : void 0;
var ImageListItem_default = withStyles_default(styles39, {
  name: "MuiImageListItem"
})(ImageListItem);

// ../node_modules/@material-ui/core/esm/ImageListItemBar/ImageListItemBar.js
init_extends();
init_objectWithoutProperties();
var React32 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_deprecatedPropType();
var styles40 = function styles41(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "absolute",
      left: 0,
      right: 0,
      height: 48,
      background: "rgba(0, 0, 0, 0.5)",
      display: "flex",
      alignItems: "center",
      fontFamily: theme.typography.fontFamily
    },
    /* Styles applied to the root element if `position="bottom"`. */
    positionBottom: {
      bottom: 0
    },
    /* Styles applied to the root element if `position="top"`. */
    positionTop: {
      top: 0
    },
    /* Styles applied to the root element if a `subtitle` is provided. */
    rootSubtitle: {
      height: 68
    },
    /* Styles applied to the title and subtitle container element. */
    titleWrap: {
      flexGrow: 1,
      marginLeft: 16,
      marginRight: 16,
      color: theme.palette.common.white,
      overflow: "hidden"
    },
    /* Styles applied to the container element if `actionPosition="left"`. */
    titleWrapActionPosLeft: {
      marginLeft: 0
    },
    /* Styles applied to the container element if `actionPosition="right"`. */
    titleWrapActionPosRight: {
      marginRight: 0
    },
    /* Styles applied to the title container element. */
    title: {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: "24px",
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    },
    /* Styles applied to the subtitle container element. */
    subtitle: {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    },
    /* Styles applied to the actionIcon if supplied. */
    actionIcon: {},
    /* Styles applied to the actionIcon if `actionPosition="left"`. */
    actionIconActionPosLeft: {
      order: -1
    }
  };
};
var ImageListItemBar = React32.forwardRef(function ImageListItemBar2(props, ref) {
  var actionIcon = props.actionIcon, _props$actionPosition = props.actionPosition, actionPosition = _props$actionPosition === void 0 ? "right" : _props$actionPosition, classes = props.classes, className = props.className, subtitle = props.subtitle, title = props.title, _props$position = props.position, positionProp = _props$position === void 0 ? "bottom" : _props$position, titlePosition = props.titlePosition, other = _objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "position", "titlePosition"]);
  var position = titlePosition || positionProp;
  var actionPos = actionIcon && actionPosition;
  return React32.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, subtitle && classes.rootSubtitle, {
      "bottom": classes.positionBottom,
      "top": classes.positionTop
    }[position]),
    ref
  }, other), React32.createElement("div", {
    className: clsx_m_default(classes.titleWrap, {
      "left": classes.titleWrapActionPosLeft,
      "right": classes.titleWrapActionPosRight
    }[actionPos])
  }, React32.createElement("div", {
    className: classes.title
  }, title), subtitle ? React32.createElement("div", {
    className: classes.subtitle
  }, subtitle) : null), actionIcon ? React32.createElement("div", {
    className: clsx_m_default(classes.actionIcon, actionPos === "left" && classes.actionIconActionPosLeft)
  }, actionIcon) : null);
});
true ? ImageListItemBar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * An IconButton element to be used as secondary action target
   * (primary action target is the item itself).
   */
  actionIcon: import_prop_types29.default.node,
  /**
   * Position of secondary action IconButton.
   */
  actionPosition: import_prop_types29.default.oneOf(["left", "right"]),
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types29.default.object,
  /**
   * @ignore
   */
  className: import_prop_types29.default.string,
  /**
   * Position of the title bar.
   */
  position: import_prop_types29.default.oneOf(["bottom", "top"]),
  /**
   * String or element serving as subtitle (support text).
   */
  subtitle: import_prop_types29.default.node,
  /**
   * Title to be displayed on item.
   */
  title: import_prop_types29.default.node,
  /**
   * Position of the title bar.
   * @deprecated Use position instead.
   */
  titlePosition: deprecatedPropType(import_prop_types29.default.oneOf(["bottom", "top"]), "Use the `position` prop instead.")
} : void 0;
var ImageListItemBar_default = withStyles_default(styles40, {
  name: "MuiImageListItemBar"
})(ImageListItemBar);

// ../node_modules/@material-ui/core/esm/LinearProgress/LinearProgress.js
init_extends();
init_objectWithoutProperties();
var React33 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());
init_clsx_m();
init_capitalize();
init_withStyles();
init_colorManipulator();
var TRANSITION_DURATION = 4;
var styles42 = function styles43(theme) {
  var getColor = function getColor2(color) {
    return theme.palette.type === "light" ? lighten(color, 0.62) : darken(color, 0.5);
  };
  var backgroundPrimary = getColor(theme.palette.primary.main);
  var backgroundSecondary = getColor(theme.palette.secondary.main);
  return {
    /* Styles applied to the root element. */
    root: {
      position: "relative",
      overflow: "hidden",
      height: 4,
      "@media print": {
        colorAdjust: "exact"
      }
    },
    /* Styles applied to the root and bar2 element if `color="primary"`; bar2 if `variant="buffer"`. */
    colorPrimary: {
      backgroundColor: backgroundPrimary
    },
    /* Styles applied to the root and bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`. */
    colorSecondary: {
      backgroundColor: backgroundSecondary
    },
    /* Styles applied to the root element if `variant="determinate"`. */
    determinate: {},
    /* Styles applied to the root element if `variant="indeterminate"`. */
    indeterminate: {},
    /* Styles applied to the root element if `variant="buffer"`. */
    buffer: {
      backgroundColor: "transparent"
    },
    /* Styles applied to the root element if `variant="query"`. */
    query: {
      transform: "rotate(180deg)"
    },
    /* Styles applied to the additional bar element if `variant="buffer"`. */
    dashed: {
      position: "absolute",
      marginTop: 0,
      height: "100%",
      width: "100%",
      animation: "$buffer 3s infinite linear"
    },
    /* Styles applied to the additional bar element if `variant="buffer"` and `color="primary"`. */
    dashedColorPrimary: {
      backgroundImage: "radial-gradient(".concat(backgroundPrimary, " 0%, ").concat(backgroundPrimary, " 16%, transparent 42%)"),
      backgroundSize: "10px 10px",
      backgroundPosition: "0 -23px"
    },
    /* Styles applied to the additional bar element if `variant="buffer"` and `color="secondary"`. */
    dashedColorSecondary: {
      backgroundImage: "radial-gradient(".concat(backgroundSecondary, " 0%, ").concat(backgroundSecondary, " 16%, transparent 42%)"),
      backgroundSize: "10px 10px",
      backgroundPosition: "0 -23px"
    },
    /* Styles applied to the layered bar1 and bar2 elements. */
    bar: {
      width: "100%",
      position: "absolute",
      left: 0,
      bottom: 0,
      top: 0,
      transition: "transform 0.2s linear",
      transformOrigin: "left"
    },
    /* Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer". */
    barColorPrimary: {
      backgroundColor: theme.palette.primary.main
    },
    /* Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer". */
    barColorSecondary: {
      backgroundColor: theme.palette.secondary.main
    },
    /* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
    bar1Indeterminate: {
      width: "auto",
      animation: "$indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite"
    },
    /* Styles applied to the bar1 element if `variant="determinate"`. */
    bar1Determinate: {
      transition: "transform .".concat(TRANSITION_DURATION, "s linear")
    },
    /* Styles applied to the bar1 element if `variant="buffer"`. */
    bar1Buffer: {
      zIndex: 1,
      transition: "transform .".concat(TRANSITION_DURATION, "s linear")
    },
    /* Styles applied to the bar2 element if `variant="indeterminate or query"`. */
    bar2Indeterminate: {
      width: "auto",
      animation: "$indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite"
    },
    /* Styles applied to the bar2 element if `variant="buffer"`. */
    bar2Buffer: {
      transition: "transform .".concat(TRANSITION_DURATION, "s linear")
    },
    // Legends:
    // || represents the viewport
    // -  represents a light background
    // x  represents a dark background
    "@keyframes indeterminate1": {
      //  |-----|---x-||-----||-----|
      "0%": {
        left: "-35%",
        right: "100%"
      },
      //  |-----|-----||-----||xxxx-|
      "60%": {
        left: "100%",
        right: "-90%"
      },
      "100%": {
        left: "100%",
        right: "-90%"
      }
    },
    "@keyframes indeterminate2": {
      //  |xxxxx|xxxxx||-----||-----|
      "0%": {
        left: "-200%",
        right: "100%"
      },
      //  |-----|-----||-----||-x----|
      "60%": {
        left: "107%",
        right: "-8%"
      },
      "100%": {
        left: "107%",
        right: "-8%"
      }
    },
    "@keyframes buffer": {
      "0%": {
        opacity: 1,
        backgroundPosition: "0 -23px"
      },
      "50%": {
        opacity: 0,
        backgroundPosition: "0 -23px"
      },
      "100%": {
        opacity: 1,
        backgroundPosition: "-200px -23px"
      }
    }
  };
};
var LinearProgress = React33.forwardRef(function LinearProgress2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "primary" : _props$color, value = props.value, valueBuffer = props.valueBuffer, _props$variant = props.variant, variant = _props$variant === void 0 ? "indeterminate" : _props$variant, other = _objectWithoutProperties(props, ["classes", "className", "color", "value", "valueBuffer", "variant"]);
  var theme = useTheme2();
  var rootProps = {};
  var inlineStyles = {
    bar1: {},
    bar2: {}
  };
  if (variant === "determinate" || variant === "buffer") {
    if (value !== void 0) {
      rootProps["aria-valuenow"] = Math.round(value);
      rootProps["aria-valuemin"] = 0;
      rootProps["aria-valuemax"] = 100;
      var transform = value - 100;
      if (theme.direction === "rtl") {
        transform = -transform;
      }
      inlineStyles.bar1.transform = "translateX(".concat(transform, "%)");
    } else if (true) {
      console.error("Material-UI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
    }
  }
  if (variant === "buffer") {
    if (valueBuffer !== void 0) {
      var _transform = (valueBuffer || 0) - 100;
      if (theme.direction === "rtl") {
        _transform = -_transform;
      }
      inlineStyles.bar2.transform = "translateX(".concat(_transform, "%)");
    } else if (true) {
      console.error("Material-UI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
    }
  }
  return React33.createElement("div", _extends({
    className: clsx_m_default(classes.root, classes["color".concat(capitalize(color))], className, {
      "determinate": classes.determinate,
      "indeterminate": classes.indeterminate,
      "buffer": classes.buffer,
      "query": classes.query
    }[variant]),
    role: "progressbar"
  }, rootProps, {
    ref
  }, other), variant === "buffer" ? React33.createElement("div", {
    className: clsx_m_default(classes.dashed, classes["dashedColor".concat(capitalize(color))])
  }) : null, React33.createElement("div", {
    className: clsx_m_default(classes.bar, classes["barColor".concat(capitalize(color))], (variant === "indeterminate" || variant === "query") && classes.bar1Indeterminate, {
      "determinate": classes.bar1Determinate,
      "buffer": classes.bar1Buffer
    }[variant]),
    style: inlineStyles.bar1
  }), variant === "determinate" ? null : React33.createElement("div", {
    className: clsx_m_default(classes.bar, (variant === "indeterminate" || variant === "query") && classes.bar2Indeterminate, variant === "buffer" ? [classes["color".concat(capitalize(color))], classes.bar2Buffer] : classes["barColor".concat(capitalize(color))]),
    style: inlineStyles.bar2
  }));
});
true ? LinearProgress.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types30.default.object,
  /**
   * @ignore
   */
  className: import_prop_types30.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types30.default.oneOf(["primary", "secondary"]),
  /**
   * The value of the progress indicator for the determinate and buffer variants.
   * Value between 0 and 100.
   */
  value: import_prop_types30.default.number,
  /**
   * The value for the buffer variant.
   * Value between 0 and 100.
   */
  valueBuffer: import_prop_types30.default.number,
  /**
   * The variant to use.
   * Use indeterminate or query when there is no progress value.
   */
  variant: import_prop_types30.default.oneOf(["buffer", "determinate", "indeterminate", "query"])
} : void 0;
var LinearProgress_default = withStyles_default(styles42, {
  name: "MuiLinearProgress"
})(LinearProgress);

// ../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js
init_extends();
init_objectWithoutProperties();
var React34 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles44 = {
  /* Styles applied to the root element. */
  root: {
    minWidth: 56,
    flexShrink: 0
  },
  /* Styles applied to the root element when the parent `ListItem` uses `alignItems="flex-start"`. */
  alignItemsFlexStart: {
    marginTop: 8
  }
};
var ListItemAvatar = React34.forwardRef(function ListItemAvatar2(props, ref) {
  var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
  var context = React34.useContext(ListContext_default);
  return React34.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, context.alignItems === "flex-start" && classes.alignItemsFlexStart),
    ref
  }, other));
});
true ? ListItemAvatar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component – normally `Avatar`.
   */
  children: import_prop_types31.default.element.isRequired,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types31.default.object,
  /**
   * @ignore
   */
  className: import_prop_types31.default.string
} : void 0;
var ListItemAvatar_default = withStyles_default(styles44, {
  name: "MuiListItemAvatar"
})(ListItemAvatar);

// ../node_modules/@material-ui/core/esm/ListItemSecondaryAction/ListItemSecondaryAction.js
init_extends();
init_objectWithoutProperties();
var React35 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles45 = {
  /* Styles applied to the root element. */
  root: {
    position: "absolute",
    right: 16,
    top: "50%",
    transform: "translateY(-50%)"
  }
};
var ListItemSecondaryAction = React35.forwardRef(function ListItemSecondaryAction2(props, ref) {
  var classes = props.classes, className = props.className, other = _objectWithoutProperties(props, ["classes", "className"]);
  return React35.createElement("div", _extends({
    className: clsx_m_default(classes.root, className),
    ref
  }, other));
});
true ? ListItemSecondaryAction.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the component, normally an `IconButton` or selection control.
   */
  children: import_prop_types32.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types32.default.object,
  /**
   * @ignore
   */
  className: import_prop_types32.default.string
} : void 0;
ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
var ListItemSecondaryAction_default = withStyles_default(styles45, {
  name: "MuiListItemSecondaryAction"
})(ListItemSecondaryAction);

// ../node_modules/@material-ui/core/esm/ListSubheader/ListSubheader.js
init_extends();
init_objectWithoutProperties();
var React36 = __toESM(require_react());
var import_prop_types33 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
var styles46 = function styles47(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      boxSizing: "border-box",
      lineHeight: "48px",
      listStyle: "none",
      color: theme.palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14)
    },
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main
    },
    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: "inherit"
    },
    /* Styles applied to the inner `component` element if `disableGutters={false}`. */
    gutters: {
      paddingLeft: 16,
      paddingRight: 16
    },
    /* Styles applied to the root element if `inset={true}`. */
    inset: {
      paddingLeft: 72
    },
    /* Styles applied to the root element if `disableSticky={false}`. */
    sticky: {
      position: "sticky",
      top: 0,
      zIndex: 1,
      backgroundColor: "inherit"
    }
  };
};
var ListSubheader = React36.forwardRef(function ListSubheader2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "default" : _props$color, _props$component = props.component, Component2 = _props$component === void 0 ? "li" : _props$component, _props$disableGutters = props.disableGutters, disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters, _props$disableSticky = props.disableSticky, disableSticky = _props$disableSticky === void 0 ? false : _props$disableSticky, _props$inset = props.inset, inset = _props$inset === void 0 ? false : _props$inset, other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);
  return React36.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className, color !== "default" && classes["color".concat(capitalize(color))], inset && classes.inset, !disableSticky && classes.sticky, !disableGutters && classes.gutters),
    ref
  }, other));
});
true ? ListSubheader.propTypes = {
  /**
   * The content of the component.
   */
  children: import_prop_types33.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types33.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types33.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types33.default.oneOf(["default", "primary", "inherit"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types33.default.elementType,
  /**
   * If `true`, the List Subheader will not have gutters.
   */
  disableGutters: import_prop_types33.default.bool,
  /**
   * If `true`, the List Subheader will not stick to the top during scroll.
   */
  disableSticky: import_prop_types33.default.bool,
  /**
   * If `true`, the List Subheader will be indented.
   */
  inset: import_prop_types33.default.bool
} : void 0;
var ListSubheader_default = withStyles_default(styles46, {
  name: "MuiListSubheader"
})(ListSubheader);

// ../node_modules/@material-ui/core/esm/MobileStepper/MobileStepper.js
init_extends();
init_toConsumableArray();
init_objectWithoutProperties();
var React37 = __toESM(require_react());
var import_prop_types34 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
var styles48 = function styles49(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between",
      alignItems: "center",
      background: theme.palette.background.default,
      padding: 8
    },
    /* Styles applied to the root element if `position="bottom"`. */
    positionBottom: {
      position: "fixed",
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper
    },
    /* Styles applied to the root element if `position="top"`. */
    positionTop: {
      position: "fixed",
      top: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper
    },
    /* Styles applied to the root element if `position="static"`. */
    positionStatic: {},
    /* Styles applied to the dots container if `variant="dots"`. */
    dots: {
      display: "flex",
      flexDirection: "row"
    },
    /* Styles applied to each dot if `variant="dots"`. */
    dot: {
      backgroundColor: theme.palette.action.disabled,
      borderRadius: "50%",
      width: 8,
      height: 8,
      margin: "0 2px"
    },
    /* Styles applied to a dot if `variant="dots"` and this is the active step. */
    dotActive: {
      backgroundColor: theme.palette.primary.main
    },
    /* Styles applied to the Linear Progress component if `variant="progress"`. */
    progress: {
      width: "50%"
    }
  };
};
var MobileStepper = React37.forwardRef(function MobileStepper2(props, ref) {
  var _props$activeStep = props.activeStep, activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep, backButton = props.backButton, classes = props.classes, className = props.className, LinearProgressProps = props.LinearProgressProps, nextButton = props.nextButton, _props$position = props.position, position = _props$position === void 0 ? "bottom" : _props$position, steps = props.steps, _props$variant = props.variant, variant = _props$variant === void 0 ? "dots" : _props$variant, other = _objectWithoutProperties(props, ["activeStep", "backButton", "classes", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"]);
  return React37.createElement(Paper_default, _extends({
    square: true,
    elevation: 0,
    className: clsx_m_default(classes.root, classes["position".concat(capitalize(position))], className),
    ref
  }, other), backButton, variant === "text" && React37.createElement(React37.Fragment, null, activeStep + 1, " / ", steps), variant === "dots" && React37.createElement("div", {
    className: classes.dots
  }, _toConsumableArray(new Array(steps)).map(function(_, index) {
    return React37.createElement("div", {
      key: index,
      className: clsx_m_default(classes.dot, index === activeStep && classes.dotActive)
    });
  })), variant === "progress" && React37.createElement(LinearProgress_default, _extends({
    className: classes.progress,
    variant: "determinate",
    value: Math.ceil(activeStep / (steps - 1) * 100)
  }, LinearProgressProps)), nextButton);
});
true ? MobileStepper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Set the active step (zero based index).
   * Defines which dot is highlighted when the variant is 'dots'.
   */
  activeStep: import_prop_types34.default.number,
  /**
   * A back button element. For instance, it can be a `Button` or an `IconButton`.
   */
  backButton: import_prop_types34.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types34.default.object,
  /**
   * @ignore
   */
  className: import_prop_types34.default.string,
  /**
   * Props applied to the `LinearProgress` element.
   */
  LinearProgressProps: import_prop_types34.default.object,
  /**
   * A next button element. For instance, it can be a `Button` or an `IconButton`.
   */
  nextButton: import_prop_types34.default.node,
  /**
   * Set the positioning type.
   */
  position: import_prop_types34.default.oneOf(["bottom", "static", "top"]),
  /**
   * The total steps.
   */
  steps: import_prop_types34.default.number.isRequired,
  /**
   * The variant to use.
   */
  variant: import_prop_types34.default.oneOf(["dots", "progress", "text"])
} : void 0;
var MobileStepper_default = withStyles_default(styles48, {
  name: "MuiMobileStepper"
})(MobileStepper);

// ../node_modules/@material-ui/core/esm/NoSsr/NoSsr.js
var React38 = __toESM(require_react());
var import_prop_types35 = __toESM(require_prop_types());
init_esm();
var useEnhancedEffect2 = typeof window !== "undefined" && true ? React38.useLayoutEffect : React38.useEffect;
function NoSsr(props) {
  var children = props.children, _props$defer = props.defer, defer = _props$defer === void 0 ? false : _props$defer, _props$fallback = props.fallback, fallback = _props$fallback === void 0 ? null : _props$fallback;
  var _React$useState = React38.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
  useEnhancedEffect2(function() {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React38.useEffect(function() {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return React38.createElement(React38.Fragment, null, mountedState ? children : fallback);
}
true ? NoSsr.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * You can wrap a node.
   */
  children: import_prop_types35.default.node,
  /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   */
  defer: import_prop_types35.default.bool,
  /**
   * The fallback content to display.
   */
  fallback: import_prop_types35.default.node
} : void 0;
if (true) {
  NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
}
var NoSsr_default = NoSsr;

// ../node_modules/@material-ui/core/esm/RootRef/RootRef.js
init_classCallCheck();
init_createClass();

// ../node_modules/@babel/runtime/helpers/esm/inherits.js
init_setPrototypeOf();
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// ../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
init_typeof();
init_assertThisInitialized();
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// ../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// ../node_modules/@material-ui/core/esm/RootRef/RootRef.js
var React39 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());
var import_prop_types36 = __toESM(require_prop_types());
init_esm();
init_setRef();
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var warnedOnce8 = false;
var RootRef = function(_React$Component) {
  _inherits(RootRef2, _React$Component);
  var _super = _createSuper(RootRef2);
  function RootRef2() {
    _classCallCheck(this, RootRef2);
    return _super.apply(this, arguments);
  }
  _createClass(RootRef2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.ref = ReactDOM2.findDOMNode(this);
      setRef(this.props.rootRef, this.ref);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var ref = ReactDOM2.findDOMNode(this);
      if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
        if (prevProps.rootRef !== this.props.rootRef) {
          setRef(prevProps.rootRef, null);
        }
        this.ref = ref;
        setRef(this.props.rootRef, this.ref);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.ref = null;
      setRef(this.props.rootRef, null);
    }
  }, {
    key: "render",
    value: function render() {
      if (true) {
        if (!warnedOnce8) {
          warnedOnce8 = true;
          console.warn(["Material-UI: The RootRef component is deprecated.", "The component relies on the ReactDOM.findDOMNode API which is deprecated in React.StrictMode.", "Instead, you can get a reference to the underlying DOM node of the components via the `ref` prop."].join("/n"));
        }
      }
      return this.props.children;
    }
  }]);
  return RootRef2;
}(React39.Component);
true ? RootRef.propTypes = {
  /**
   * The wrapped element.
   */
  children: import_prop_types36.default.element.isRequired,
  /**
   * A ref that points to the first DOM node of the wrapped element.
   */
  rootRef: refType_default.isRequired
} : void 0;
if (true) {
  true ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;
}
var RootRef_default = RootRef;

// ../node_modules/@material-ui/core/esm/Step/Step.js
init_extends();
init_objectWithoutProperties();
var React40 = __toESM(require_react());
var import_react_is7 = __toESM(require_react_is());
var import_prop_types37 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles50 = {
  /* Styles applied to the root element. */
  root: {},
  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {
    paddingLeft: 8,
    paddingRight: 8
  },
  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {},
  /* Styles applied to the root element if `alternativeLabel={true}`. */
  alternativeLabel: {
    flex: 1,
    position: "relative"
  },
  /* Pseudo-class applied to the root element if `completed={true}`. */
  completed: {}
};
var Step = React40.forwardRef(function Step2(props, ref) {
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, connectorProp = props.connector, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$expanded = props.expanded, expanded = _props$expanded === void 0 ? false : _props$expanded, index = props.index, last = props.last, orientation = props.orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "expanded", "index", "last", "orientation"]);
  var connector = connectorProp ? React40.cloneElement(connectorProp, {
    orientation,
    alternativeLabel,
    index,
    active,
    completed,
    disabled
  }) : null;
  var newChildren = React40.createElement("div", _extends({
    className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, completed && classes.completed),
    ref
  }, other), connector && alternativeLabel && index !== 0 ? connector : null, React40.Children.map(children, function(child) {
    if (!React40.isValidElement(child)) {
      return null;
    }
    if (true) {
      if ((0, import_react_is7.isFragment)(child)) {
        console.error(["Material-UI: The Step component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React40.cloneElement(child, _extends({
      active,
      alternativeLabel,
      completed,
      disabled,
      expanded,
      last,
      icon: index + 1,
      orientation
    }, child.props));
  }));
  if (connector && !alternativeLabel && index !== 0) {
    return React40.createElement(React40.Fragment, null, connector, newChildren);
  }
  return newChildren;
});
true ? Step.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Sets the step as active. Is passed to child components.
   */
  active: import_prop_types37.default.bool,
  /**
   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
   */
  children: import_prop_types37.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types37.default.object,
  /**
   * @ignore
   */
  className: import_prop_types37.default.string,
  /**
   * Mark the step as completed. Is passed to child components.
   */
  completed: import_prop_types37.default.bool,
  /**
   * Mark the step as disabled, will also disable the button if
   * `StepButton` is a child of `Step`. Is passed to child components.
   */
  disabled: import_prop_types37.default.bool,
  /**
   * Expand the step.
   */
  expanded: import_prop_types37.default.bool
} : void 0;
var Step_default = withStyles_default(styles50, {
  name: "MuiStep"
})(Step);

// ../node_modules/@material-ui/core/esm/StepButton/StepButton.js
init_extends();
init_objectWithoutProperties();
var React45 = __toESM(require_react());
var import_prop_types40 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();

// ../node_modules/@material-ui/core/esm/StepLabel/StepLabel.js
init_extends();
init_objectWithoutProperties();
var React44 = __toESM(require_react());
var import_prop_types39 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();

// ../node_modules/@material-ui/core/esm/StepIcon/StepIcon.js
var React43 = __toESM(require_react());
var import_prop_types38 = __toESM(require_prop_types());
init_clsx_m();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/CheckCircle.js
var React41 = __toESM(require_react());
init_createSvgIcon();
var CheckCircle_default = createSvgIcon(React41.createElement("path", {
  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
}), "CheckCircle");

// ../node_modules/@material-ui/core/esm/internal/svg-icons/Warning.js
var React42 = __toESM(require_react());
init_createSvgIcon();
var Warning_default = createSvgIcon(React42.createElement("path", {
  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
}), "Warning");

// ../node_modules/@material-ui/core/esm/StepIcon/StepIcon.js
init_withStyles();
init_SvgIcon();
var styles51 = function styles52(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "block",
      color: theme.palette.text.disabled,
      "&$completed": {
        color: theme.palette.primary.main
      },
      "&$active": {
        color: theme.palette.primary.main
      },
      "&$error": {
        color: theme.palette.error.main
      }
    },
    /* Styles applied to the SVG text element. */
    text: {
      fill: theme.palette.primary.contrastText,
      fontSize: theme.typography.caption.fontSize,
      fontFamily: theme.typography.fontFamily
    },
    /* Pseudo-class applied to the root element if `active={true}`. */
    active: {},
    /* Pseudo-class applied to the root element if `completed={true}`. */
    completed: {},
    /* Pseudo-class applied to the root element if `error={true}`. */
    error: {}
  };
};
var _ref = React43.createElement("circle", {
  cx: "12",
  cy: "12",
  r: "12"
});
var StepIcon = React43.forwardRef(function StepIcon2(props, ref) {
  var _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, icon = props.icon, _props$active = props.active, active = _props$active === void 0 ? false : _props$active, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, classes = props.classes;
  if (typeof icon === "number" || typeof icon === "string") {
    var className = clsx_m_default(classes.root, active && classes.active, error && classes.error, completed && classes.completed);
    if (error) {
      return React43.createElement(Warning_default, {
        className,
        ref
      });
    }
    if (completed) {
      return React43.createElement(CheckCircle_default, {
        className,
        ref
      });
    }
    return React43.createElement(SvgIcon_default, {
      className,
      ref
    }, _ref, React43.createElement("text", {
      className: classes.text,
      x: "12",
      y: "16",
      textAnchor: "middle"
    }, icon));
  }
  return icon;
});
true ? StepIcon.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Whether this step is active.
   */
  active: import_prop_types38.default.bool,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types38.default.object,
  /**
   * Mark the step as completed. Is passed to child components.
   */
  completed: import_prop_types38.default.bool,
  /**
   * Mark the step as failed.
   */
  error: import_prop_types38.default.bool,
  /**
   * The label displayed in the step icon.
   */
  icon: import_prop_types38.default.node
} : void 0;
var StepIcon_default = withStyles_default(styles51, {
  name: "MuiStepIcon"
})(StepIcon);

// ../node_modules/@material-ui/core/esm/StepLabel/StepLabel.js
var styles53 = function styles54(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "flex",
      alignItems: "center",
      "&$alternativeLabel": {
        flexDirection: "column"
      },
      "&$disabled": {
        cursor: "default"
      }
    },
    /* Styles applied to the root element if `orientation="horizontal"`. */
    horizontal: {},
    /* Styles applied to the root element if `orientation="vertical"`. */
    vertical: {},
    /* Styles applied to the `Typography` component which wraps `children`. */
    label: {
      color: theme.palette.text.secondary,
      "&$active": {
        color: theme.palette.text.primary,
        fontWeight: 500
      },
      "&$completed": {
        color: theme.palette.text.primary,
        fontWeight: 500
      },
      "&$alternativeLabel": {
        textAlign: "center",
        marginTop: 16
      },
      "&$error": {
        color: theme.palette.error.main
      }
    },
    /* Pseudo-class applied to the `Typography` component if `active={true}`. */
    active: {},
    /* Pseudo-class applied to the `Typography` component if `completed={true}`. */
    completed: {},
    /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */
    error: {},
    /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the `icon` container element. */
    iconContainer: {
      flexShrink: 0,
      // Fix IE 11 issue
      display: "flex",
      paddingRight: 8,
      "&$alternativeLabel": {
        paddingRight: 0
      }
    },
    /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */
    alternativeLabel: {},
    /* Styles applied to the container element which wraps `Typography` and `optional`. */
    labelContainer: {
      width: "100%"
    }
  };
};
var StepLabel = React44.forwardRef(function StepLabel2(props, ref) {
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, children = props.children, classes = props.classes, className = props.className, _props$completed = props.completed, completed = _props$completed === void 0 ? false : _props$completed, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$error = props.error, error = _props$error === void 0 ? false : _props$error, expanded = props.expanded, icon = props.icon, last = props.last, optional = props.optional, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, StepIconComponentProp = props.StepIconComponent, StepIconProps = props.StepIconProps, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "expanded", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);
  var StepIconComponent = StepIconComponentProp;
  if (icon && !StepIconComponent) {
    StepIconComponent = StepIcon_default;
  }
  return React44.createElement("span", _extends({
    className: clsx_m_default(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),
    ref
  }, other), icon || StepIconComponent ? React44.createElement("span", {
    className: clsx_m_default(classes.iconContainer, alternativeLabel && classes.alternativeLabel)
  }, React44.createElement(StepIconComponent, _extends({
    completed,
    active,
    error,
    icon
  }, StepIconProps))) : null, React44.createElement("span", {
    className: classes.labelContainer
  }, children ? React44.createElement(Typography_default, {
    variant: "body2",
    component: "span",
    display: "block",
    className: clsx_m_default(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)
  }, children) : null, optional));
});
true ? StepLabel.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * In most cases will simply be a string containing a title for the label.
   */
  children: import_prop_types39.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types39.default.object,
  /**
   * @ignore
   */
  className: import_prop_types39.default.string,
  /**
   * Mark the step as disabled, will also disable the button if
   * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.
   */
  disabled: import_prop_types39.default.bool,
  /**
   * Mark the step as failed.
   */
  error: import_prop_types39.default.bool,
  /**
   * Override the default label of the step icon.
   */
  icon: import_prop_types39.default.node,
  /**
   * The optional node to display.
   */
  optional: import_prop_types39.default.node,
  /**
   * The component to render in place of the [`StepIcon`](/api/step-icon/).
   */
  StepIconComponent: import_prop_types39.default.elementType,
  /**
   * Props applied to the [`StepIcon`](/api/step-icon/) element.
   */
  StepIconProps: import_prop_types39.default.object
} : void 0;
StepLabel.muiName = "StepLabel";
var StepLabel_default = withStyles_default(styles53, {
  name: "MuiStepLabel"
})(StepLabel);

// ../node_modules/@material-ui/core/esm/StepButton/StepButton.js
init_isMuiElement();
var styles55 = {
  /* Styles applied to the root element. */
  root: {
    width: "100%",
    padding: "24px 16px",
    margin: "-24px -16px",
    boxSizing: "content-box"
  },
  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {},
  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    justifyContent: "flex-start",
    padding: "8px",
    margin: "-8px"
  },
  /* Styles applied to the `ButtonBase` touch-ripple. */
  touchRipple: {
    color: "rgba(0, 0, 0, 0.3)"
  }
};
var StepButton = React45.forwardRef(function StepButton2(props, ref) {
  var active = props.active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, completed = props.completed, disabled = props.disabled, expanded = props.expanded, icon = props.icon, last = props.last, optional = props.optional, orientation = props.orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "expanded", "icon", "last", "optional", "orientation"]);
  var childProps = {
    active,
    alternativeLabel,
    completed,
    disabled,
    icon,
    optional,
    orientation
  };
  var child = isMuiElement(children, ["StepLabel"]) ? React45.cloneElement(children, childProps) : React45.createElement(StepLabel_default, childProps, children);
  return React45.createElement(ButtonBase_default, _extends({
    focusRipple: true,
    disabled,
    TouchRippleProps: {
      className: classes.touchRipple
    },
    className: clsx_m_default(classes.root, classes[orientation], className),
    ref
  }, other), child);
});
true ? StepButton.propTypes = {
  /**
   * @ignore
   * Passed in via `Step` - passed through to `StepLabel`.
   */
  active: import_prop_types40.default.bool,
  /**
   * @ignore
   * Set internally by Stepper when it's supplied with the alternativeLabel property.
   */
  alternativeLabel: import_prop_types40.default.bool,
  /**
   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
   */
  children: import_prop_types40.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types40.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types40.default.string,
  /**
   * @ignore
   * Sets completed styling. Is passed to StepLabel.
   */
  completed: import_prop_types40.default.bool,
  /**
   * @ignore
   * Disables the button and sets disabled styling. Is passed to StepLabel.
   */
  disabled: import_prop_types40.default.bool,
  /**
   * @ignore
   * potentially passed from parent `Step`
   */
  expanded: import_prop_types40.default.bool,
  /**
   * The icon displayed by the step label.
   */
  icon: import_prop_types40.default.node,
  /**
   * @ignore
   */
  last: import_prop_types40.default.bool,
  /**
   * The optional node to display.
   */
  optional: import_prop_types40.default.node,
  /**
   * @ignore
   */
  orientation: import_prop_types40.default.oneOf(["horizontal", "vertical"])
} : void 0;
var StepButton_default = withStyles_default(styles55, {
  name: "MuiStepButton"
})(StepButton);

// ../node_modules/@material-ui/core/esm/StepConnector/StepConnector.js
init_extends();
init_objectWithoutProperties();
var React46 = __toESM(require_react());
var import_prop_types41 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles56 = function styles57(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      flex: "1 1 auto"
    },
    /* Styles applied to the root element if `orientation="horizontal"`. */
    horizontal: {},
    /* Styles applied to the root element if `orientation="vertical"`. */
    vertical: {
      marginLeft: 12,
      // half icon
      padding: "0 0 8px"
    },
    /* Styles applied to the root element if `alternativeLabel={true}`. */
    alternativeLabel: {
      position: "absolute",
      top: 8 + 4,
      left: "calc(-50% + 20px)",
      right: "calc(50% + 20px)"
    },
    /* Pseudo-class applied to the root element if `active={true}`. */
    active: {},
    /* Pseudo-class applied to the root element if `completed={true}`. */
    completed: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the line element. */
    line: {
      display: "block",
      borderColor: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
    },
    /* Styles applied to the root element if `orientation="horizontal"`. */
    lineHorizontal: {
      borderTopStyle: "solid",
      borderTopWidth: 1
    },
    /* Styles applied to the root element if `orientation="vertical"`. */
    lineVertical: {
      borderLeftStyle: "solid",
      borderLeftWidth: 1,
      minHeight: 24
    }
  };
};
var StepConnector = React46.forwardRef(function StepConnector2(props, ref) {
  var active = props.active, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, classes = props.classes, className = props.className, completed = props.completed, disabled = props.disabled, index = props.index, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);
  return React46.createElement("div", _extends({
    className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
    ref
  }, other), React46.createElement("span", {
    className: clsx_m_default(classes.line, {
      "horizontal": classes.lineHorizontal,
      "vertical": classes.lineVertical
    }[orientation])
  }));
});
true ? StepConnector.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types41.default.object,
  /**
   * @ignore
   */
  className: import_prop_types41.default.string
} : void 0;
var StepConnector_default = withStyles_default(styles56, {
  name: "MuiStepConnector"
})(StepConnector);

// ../node_modules/@material-ui/core/esm/StepContent/StepContent.js
init_extends();
init_objectWithoutProperties();
var React47 = __toESM(require_react());
var import_prop_types42 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles58 = function styles59(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      marginTop: 8,
      marginLeft: 12,
      // half icon
      paddingLeft: 8 + 12,
      // margin + half icon
      paddingRight: 8,
      borderLeft: "1px solid ".concat(theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[600])
    },
    /* Styles applied to the root element if `last={true}` (controlled by `Step`). */
    last: {
      borderLeft: "none"
    },
    /* Styles applied to the Transition component. */
    transition: {}
  };
};
var StepContent = React47.forwardRef(function StepContent2(props, ref) {
  var active = props.active, alternativeLabel = props.alternativeLabel, children = props.children, classes = props.classes, className = props.className, completed = props.completed, expanded = props.expanded, last = props.last, optional = props.optional, orientation = props.orientation, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Collapse_default : _props$TransitionComp, _props$transitionDura = props.transitionDuration, transitionDurationProp = _props$transitionDura === void 0 ? "auto" : _props$transitionDura, TransitionProps = props.TransitionProps, other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "expanded", "last", "optional", "orientation", "TransitionComponent", "transitionDuration", "TransitionProps"]);
  if (true) {
    if (orientation !== "vertical") {
      console.error("Material-UI: <StepContent /> is only designed for use with the vertical stepper.");
    }
  }
  var transitionDuration = transitionDurationProp;
  if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
    transitionDuration = void 0;
  }
  return React47.createElement("div", _extends({
    className: clsx_m_default(classes.root, className, last && classes.last),
    ref
  }, other), React47.createElement(TransitionComponent, _extends({
    in: active || expanded,
    className: classes.transition,
    timeout: transitionDuration,
    unmountOnExit: true
  }, TransitionProps), children));
});
true ? StepContent.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Step content.
   */
  children: import_prop_types42.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types42.default.object,
  /**
   * @ignore
   */
  className: import_prop_types42.default.string,
  /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   */
  TransitionComponent: import_prop_types42.default.elementType,
  /**
   * Adjust the duration of the content expand transition.
   * Passed as a prop to the transition component.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   */
  transitionDuration: import_prop_types42.default.oneOfType([import_prop_types42.default.oneOf(["auto"]), import_prop_types42.default.number, import_prop_types42.default.shape({
    appear: import_prop_types42.default.number,
    enter: import_prop_types42.default.number,
    exit: import_prop_types42.default.number
  })]),
  /**
   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
   */
  TransitionProps: import_prop_types42.default.object
} : void 0;
var StepContent_default = withStyles_default(styles58, {
  name: "MuiStepContent"
})(StepContent);

// ../node_modules/@material-ui/core/esm/Stepper/Stepper.js
init_extends();
init_objectWithoutProperties();
var React48 = __toESM(require_react());
var import_prop_types43 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles60 = {
  /* Styles applied to the root element. */
  root: {
    display: "flex",
    padding: 24
  },
  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {
    flexDirection: "row",
    alignItems: "center"
  },
  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    flexDirection: "column"
  },
  /* Styles applied to the root element if `alternativeLabel={true}`. */
  alternativeLabel: {
    alignItems: "flex-start"
  }
};
var defaultConnector = React48.createElement(StepConnector_default, null);
var Stepper = React48.forwardRef(function Stepper2(props, ref) {
  var _props$activeStep = props.activeStep, activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, children = props.children, classes = props.classes, className = props.className, _props$connector = props.connector, connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector, _props$nonLinear = props.nonLinear, nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, other = _objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);
  var connector = React48.isValidElement(connectorProp) ? React48.cloneElement(connectorProp, {
    orientation
  }) : null;
  var childrenArray = React48.Children.toArray(children);
  var steps = childrenArray.map(function(step, index) {
    var state = {
      index,
      active: false,
      completed: false,
      disabled: false
    };
    if (activeStep === index) {
      state.active = true;
    } else if (!nonLinear && activeStep > index) {
      state.completed = true;
    } else if (!nonLinear && activeStep < index) {
      state.disabled = true;
    }
    return React48.cloneElement(step, _extends({
      alternativeLabel,
      connector,
      last: index + 1 === childrenArray.length,
      orientation
    }, state, step.props));
  });
  return React48.createElement(Paper_default, _extends({
    square: true,
    elevation: 0,
    className: clsx_m_default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),
    ref
  }, other), steps);
});
true ? Stepper.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * Set the active step (zero based index).
   * Set to -1 to disable all the steps.
   */
  activeStep: import_prop_types43.default.number,
  /**
   * If set to 'true' and orientation is horizontal,
   * then the step label will be positioned under the icon.
   */
  alternativeLabel: import_prop_types43.default.bool,
  /**
   * Two or more `<Step />` components.
   */
  children: import_prop_types43.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types43.default.object,
  /**
   * @ignore
   */
  className: import_prop_types43.default.string,
  /**
   * An element to be placed between each step.
   */
  connector: import_prop_types43.default.element,
  /**
   * If set the `Stepper` will not assist in controlling steps for linear flow.
   */
  nonLinear: import_prop_types43.default.bool,
  /**
   * The stepper orientation (layout flow direction).
   */
  orientation: import_prop_types43.default.oneOf(["horizontal", "vertical"])
} : void 0;
var Stepper_default = withStyles_default(styles60, {
  name: "MuiStepper"
})(Stepper);

// ../node_modules/@material-ui/core/esm/index.js
init_SvgIcon();
init_SvgIcon();

// ../node_modules/@material-ui/core/esm/SwipeableDrawer/SwipeableDrawer.js
init_objectWithoutProperties();
init_extends();
var React50 = __toESM(require_react());
var import_prop_types45 = __toESM(require_prop_types());
var ReactDOM3 = __toESM(require_react_dom());
init_esm();
init_esm2();
init_ownerDocument();
init_useEventCallback();
init_transitions();

// ../node_modules/@material-ui/core/esm/SwipeableDrawer/SwipeArea.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var React49 = __toESM(require_react());
var import_prop_types44 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
var styles61 = function styles62(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: "fixed",
      top: 0,
      left: 0,
      bottom: 0,
      zIndex: theme.zIndex.drawer - 1
    },
    anchorLeft: {
      right: "auto"
    },
    anchorRight: {
      left: "auto",
      right: 0
    },
    anchorTop: {
      bottom: "auto",
      right: 0
    },
    anchorBottom: {
      top: "auto",
      bottom: 0,
      right: 0
    }
  };
};
var SwipeArea = React49.forwardRef(function SwipeArea2(props, ref) {
  var anchor = props.anchor, classes = props.classes, className = props.className, width = props.width, other = _objectWithoutProperties(props, ["anchor", "classes", "className", "width"]);
  return React49.createElement("div", _extends({
    className: clsx_m_default(classes.root, classes["anchor".concat(capitalize(anchor))], className),
    ref,
    style: _defineProperty({}, isHorizontal(anchor) ? "width" : "height", width)
  }, other));
});
true ? SwipeArea.propTypes = {
  /**
   * Side on which to attach the discovery area.
   */
  anchor: import_prop_types44.default.oneOf(["left", "top", "right", "bottom"]).isRequired,
  /**
   * @ignore
   */
  classes: import_prop_types44.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types44.default.string,
  /**
   * The width of the left most (or right most) area in pixels where the
   * drawer can be swiped open from.
   */
  width: import_prop_types44.default.number.isRequired
} : void 0;
var SwipeArea_default = withStyles_default(styles61, {
  name: "PrivateSwipeArea"
})(SwipeArea);

// ../node_modules/@material-ui/core/esm/SwipeableDrawer/SwipeableDrawer.js
var UNCERTAINTY_THRESHOLD = 3;
var nodeThatClaimedTheSwipe = null;
function calculateCurrentX(anchor, touches) {
  return anchor === "right" ? document.body.offsetWidth - touches[0].pageX : touches[0].pageX;
}
function calculateCurrentY(anchor, touches) {
  return anchor === "bottom" ? window.innerHeight - touches[0].clientY : touches[0].clientY;
}
function getMaxTranslate(horizontalSwipe, paperInstance) {
  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
}
function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
}
function getDomTreeShapes(element, rootNode) {
  var domTreeShapes = [];
  while (element && element !== rootNode) {
    var style = window.getComputedStyle(element);
    if (
      // Ignore the scroll children if the element is absolute positioned.
      style.getPropertyValue("position") === "absolute" || // Ignore the scroll children if the element has an overflowX hidden
      style.getPropertyValue("overflow-x") === "hidden"
    ) {
      domTreeShapes = [];
    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
      domTreeShapes.push(element);
    }
    element = element.parentElement;
  }
  return domTreeShapes;
}
function findNativeHandler(_ref2) {
  var domTreeShapes = _ref2.domTreeShapes, start = _ref2.start, current = _ref2.current, anchor = _ref2.anchor;
  var axisProperties = {
    scrollPosition: {
      x: "scrollLeft",
      y: "scrollTop"
    },
    scrollLength: {
      x: "scrollWidth",
      y: "scrollHeight"
    },
    clientLength: {
      x: "clientWidth",
      y: "clientHeight"
    }
  };
  return domTreeShapes.some(function(shape) {
    var goingForward = current >= start;
    if (anchor === "top" || anchor === "left") {
      goingForward = !goingForward;
    }
    var axis = anchor === "left" || anchor === "right" ? "x" : "y";
    var scrollPosition = shape[axisProperties.scrollPosition[axis]];
    var areNotAtStart = scrollPosition > 0;
    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];
    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
      return shape;
    }
    return null;
  });
}
var iOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent);
var transitionDurationDefault = {
  enter: duration.enteringScreen,
  exit: duration.leavingScreen
};
var useEnhancedEffect3 = typeof window !== "undefined" ? React50.useLayoutEffect : React50.useEffect;
var SwipeableDrawer = React50.forwardRef(function SwipeableDrawer2(inProps, ref) {
  var theme = useTheme2();
  var props = getThemeProps({
    name: "MuiSwipeableDrawer",
    props: _extends({}, inProps),
    theme
  });
  var _props$anchor = props.anchor, anchor = _props$anchor === void 0 ? "left" : _props$anchor, _props$disableBackdro = props.disableBackdropTransition, disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro, _props$disableDiscove = props.disableDiscovery, disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove, _props$disableSwipeTo = props.disableSwipeToOpen, disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo, hideBackdrop = props.hideBackdrop, _props$hysteresis = props.hysteresis, hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis, _props$minFlingVeloci = props.minFlingVelocity, minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci, _props$ModalProps = props.ModalProps;
  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;
  var BackdropProps = _props$ModalProps.BackdropProps, ModalPropsProp = _objectWithoutProperties(_props$ModalProps, ["BackdropProps"]), onClose = props.onClose, onOpen = props.onOpen, open = props.open, _props$PaperProps = props.PaperProps, PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps, SwipeAreaProps = props.SwipeAreaProps, _props$swipeAreaWidth = props.swipeAreaWidth, swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth, _props$transitionDura = props.transitionDuration, transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura, _props$variant = props.variant, variant = _props$variant === void 0 ? "temporary" : _props$variant, other = _objectWithoutProperties(props, ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"]);
  var _React$useState = React50.useState(false), maybeSwiping = _React$useState[0], setMaybeSwiping = _React$useState[1];
  var swipeInstance = React50.useRef({
    isSwiping: null
  });
  var swipeAreaRef = React50.useRef();
  var backdropRef = React50.useRef();
  var paperRef = React50.useRef();
  var touchDetected = React50.useRef(false);
  var calculatedDurationRef = React50.useRef();
  useEnhancedEffect3(function() {
    calculatedDurationRef.current = null;
  }, [open]);
  var setPosition = React50.useCallback(function(translate) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _options$mode = options.mode, mode = _options$mode === void 0 ? null : _options$mode, _options$changeTransi = options.changeTransition, changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;
    var anchorRtl = getAnchor(theme, anchor);
    var rtlTranslateMultiplier = ["right", "bottom"].indexOf(anchorRtl) !== -1 ? 1 : -1;
    var horizontalSwipe = isHorizontal(anchor);
    var transform = horizontalSwipe ? "translate(".concat(rtlTranslateMultiplier * translate, "px, 0)") : "translate(0, ".concat(rtlTranslateMultiplier * translate, "px)");
    var drawerStyle = paperRef.current.style;
    drawerStyle.webkitTransform = transform;
    drawerStyle.transform = transform;
    var transition = "";
    if (mode) {
      transition = theme.transitions.create("all", getTransitionProps({
        timeout: transitionDuration
      }, {
        mode
      }));
    }
    if (changeTransition) {
      drawerStyle.webkitTransition = transition;
      drawerStyle.transition = transition;
    }
    if (!disableBackdropTransition && !hideBackdrop) {
      var backdropStyle = backdropRef.current.style;
      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
      if (changeTransition) {
        backdropStyle.webkitTransition = transition;
        backdropStyle.transition = transition;
      }
    }
  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
  var handleBodyTouchEnd = useEventCallback(function(event) {
    if (!touchDetected.current) {
      return;
    }
    nodeThatClaimedTheSwipe = null;
    touchDetected.current = false;
    setMaybeSwiping(false);
    if (!swipeInstance.current.isSwiping) {
      swipeInstance.current.isSwiping = null;
      return;
    }
    swipeInstance.current.isSwiping = null;
    var anchorRtl = getAnchor(theme, anchor);
    var horizontal = isHorizontal(anchor);
    var current;
    if (horizontal) {
      current = calculateCurrentX(anchorRtl, event.changedTouches);
    } else {
      current = calculateCurrentY(anchorRtl, event.changedTouches);
    }
    var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
    var maxTranslate = getMaxTranslate(horizontal, paperRef.current);
    var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
    var translateRatio = currentTranslate / maxTranslate;
    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1e3;
    }
    if (open) {
      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
        onClose();
      } else {
        setPosition(0, {
          mode: "exit"
        });
      }
      return;
    }
    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
      onOpen();
    } else {
      setPosition(getMaxTranslate(horizontal, paperRef.current), {
        mode: "enter"
      });
    }
  });
  var handleBodyTouchMove = useEventCallback(function(event) {
    if (!paperRef.current || !touchDetected.current) {
      return;
    }
    if (nodeThatClaimedTheSwipe != null && nodeThatClaimedTheSwipe !== swipeInstance.current) {
      return;
    }
    var anchorRtl = getAnchor(theme, anchor);
    var horizontalSwipe = isHorizontal(anchor);
    var currentX = calculateCurrentX(anchorRtl, event.touches);
    var currentY = calculateCurrentY(anchorRtl, event.touches);
    if (open && paperRef.current.contains(event.target) && nodeThatClaimedTheSwipe == null) {
      var domTreeShapes = getDomTreeShapes(event.target, paperRef.current);
      var nativeHandler = findNativeHandler({
        domTreeShapes,
        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
        current: horizontalSwipe ? currentX : currentY,
        anchor
      });
      if (nativeHandler) {
        nodeThatClaimedTheSwipe = nativeHandler;
        return;
      }
      nodeThatClaimedTheSwipe = swipeInstance.current;
    }
    if (swipeInstance.current.isSwiping == null) {
      var dx = Math.abs(currentX - swipeInstance.current.startX);
      var dy = Math.abs(currentY - swipeInstance.current.startY);
      if (dx > dy) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
      var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
        swipeInstance.current.isSwiping = definitelySwiping;
        if (!definitelySwiping) {
          handleBodyTouchEnd(event);
          return;
        }
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
        if (!disableDiscovery && !open) {
          if (horizontalSwipe) {
            swipeInstance.current.startX -= swipeAreaWidth;
          } else {
            swipeInstance.current.startY -= swipeAreaWidth;
          }
        }
      }
    }
    if (!swipeInstance.current.isSwiping) {
      return;
    }
    var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
    var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
    if (open && !swipeInstance.current.paperHit) {
      startLocation = Math.min(startLocation, maxTranslate);
    }
    var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);
    if (open) {
      if (!swipeInstance.current.paperHit) {
        var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;
        if (paperHit) {
          swipeInstance.current.paperHit = true;
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        } else {
          return;
        }
      } else if (translate === 0) {
        swipeInstance.current.startX = currentX;
        swipeInstance.current.startY = currentY;
      }
    }
    if (swipeInstance.current.lastTranslate === null) {
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now() + 1;
    }
    var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;
    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
    swipeInstance.current.lastTranslate = translate;
    swipeInstance.current.lastTime = performance.now();
    if (event.cancelable) {
      event.preventDefault();
    }
    setPosition(translate);
  });
  var handleBodyTouchStart = useEventCallback(function(event) {
    if (event.defaultPrevented) {
      return;
    }
    if (event.muiHandled) {
      return;
    }
    if (open && !backdropRef.current.contains(event.target) && !paperRef.current.contains(event.target)) {
      return;
    }
    var anchorRtl = getAnchor(theme, anchor);
    var horizontalSwipe = isHorizontal(anchor);
    var currentX = calculateCurrentX(anchorRtl, event.touches);
    var currentY = calculateCurrentY(anchorRtl, event.touches);
    if (!open) {
      if (disableSwipeToOpen || event.target !== swipeAreaRef.current) {
        return;
      }
      if (horizontalSwipe) {
        if (currentX > swipeAreaWidth) {
          return;
        }
      } else if (currentY > swipeAreaWidth) {
        return;
      }
    }
    event.muiHandled = true;
    nodeThatClaimedTheSwipe = null;
    swipeInstance.current.startX = currentX;
    swipeInstance.current.startY = currentY;
    setMaybeSwiping(true);
    if (!open && paperRef.current) {
      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 20 : -swipeAreaWidth), {
        changeTransition: false
      });
    }
    swipeInstance.current.velocity = 0;
    swipeInstance.current.lastTime = null;
    swipeInstance.current.lastTranslate = null;
    swipeInstance.current.paperHit = false;
    touchDetected.current = true;
  });
  React50.useEffect(function() {
    if (variant === "temporary") {
      var doc = ownerDocument(paperRef.current);
      doc.addEventListener("touchstart", handleBodyTouchStart);
      doc.addEventListener("touchmove", handleBodyTouchMove, {
        passive: false
      });
      doc.addEventListener("touchend", handleBodyTouchEnd);
      return function() {
        doc.removeEventListener("touchstart", handleBodyTouchStart);
        doc.removeEventListener("touchmove", handleBodyTouchMove, {
          passive: false
        });
        doc.removeEventListener("touchend", handleBodyTouchEnd);
      };
    }
    return void 0;
  }, [variant, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
  React50.useEffect(function() {
    return function() {
      if (nodeThatClaimedTheSwipe === swipeInstance.current) {
        nodeThatClaimedTheSwipe = null;
      }
    };
  }, []);
  React50.useEffect(function() {
    if (!open) {
      setMaybeSwiping(false);
    }
  }, [open]);
  var handleBackdropRef = React50.useCallback(function(instance) {
    backdropRef.current = ReactDOM3.findDOMNode(instance);
  }, []);
  return React50.createElement(React50.Fragment, null, React50.createElement(Drawer_default, _extends({
    open: variant === "temporary" && maybeSwiping ? true : open,
    variant,
    ModalProps: _extends({
      BackdropProps: _extends({}, BackdropProps, {
        ref: handleBackdropRef
      })
    }, ModalPropsProp),
    PaperProps: _extends({}, PaperProps, {
      style: _extends({
        pointerEvents: variant === "temporary" && !open ? "none" : ""
      }, PaperProps.style),
      ref: paperRef
    }),
    anchor,
    transitionDuration: calculatedDurationRef.current || transitionDuration,
    onClose,
    ref
  }, other)), !disableSwipeToOpen && variant === "temporary" && React50.createElement(NoSsr_default, null, React50.createElement(SwipeArea_default, _extends({
    anchor,
    ref: swipeAreaRef,
    width: swipeAreaWidth
  }, SwipeAreaProps))));
});
true ? SwipeableDrawer.propTypes = {
  /**
   * @ignore
   */
  anchor: import_prop_types45.default.oneOf(["left", "top", "right", "bottom"]),
  /**
   * The content of the component.
   */
  children: import_prop_types45.default.node,
  /**
   * Disable the backdrop transition.
   * This can improve the FPS on low-end devices.
   */
  disableBackdropTransition: import_prop_types45.default.bool,
  /**
   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
   * to promote accidental discovery of the swipe gesture.
   */
  disableDiscovery: import_prop_types45.default.bool,
  /**
   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
   * navigation actions. Swipe to open is disabled on iOS browsers by default.
   */
  disableSwipeToOpen: import_prop_types45.default.bool,
  /**
   * @ignore
   */
  hideBackdrop: import_prop_types45.default.bool,
  /**
   * Affects how far the drawer must be opened/closed to change his state.
   * Specified as percent (0-1) of the width of the drawer
   */
  hysteresis: import_prop_types45.default.number,
  /**
   * Defines, from which (average) velocity on, the swipe is
   * defined as complete although hysteresis isn't reached.
   * Good threshold is between 250 - 1000 px/s
   */
  minFlingVelocity: import_prop_types45.default.number,
  /**
   * @ignore
   */
  ModalProps: import_prop_types45.default.shape({
    BackdropProps: import_prop_types45.default.shape({
      component: elementTypeAcceptingRef_default
    })
  }),
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   */
  onClose: import_prop_types45.default.func.isRequired,
  /**
   * Callback fired when the component requests to be opened.
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: import_prop_types45.default.func.isRequired,
  /**
   * If `true`, the drawer is open.
   */
  open: import_prop_types45.default.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: import_prop_types45.default.shape({
    component: elementTypeAcceptingRef_default,
    style: import_prop_types45.default.object
  }),
  /**
   * The element is used to intercept the touch events on the edge.
   */
  SwipeAreaProps: import_prop_types45.default.object,
  /**
   * The width of the left most (or right most) area in pixels where the
   * drawer can be swiped open from.
   */
  swipeAreaWidth: import_prop_types45.default.number,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: import_prop_types45.default.oneOfType([import_prop_types45.default.number, import_prop_types45.default.shape({
    enter: import_prop_types45.default.number,
    exit: import_prop_types45.default.number
  })]),
  /**
   * @ignore
   */
  variant: import_prop_types45.default.oneOf(["permanent", "persistent", "temporary"])
} : void 0;
var SwipeableDrawer_default = SwipeableDrawer;

// ../node_modules/@material-ui/core/esm/Switch/Switch.js
init_extends();
init_objectWithoutProperties();
var React51 = __toESM(require_react());
var import_prop_types46 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_withStyles();
init_colorManipulator();
init_capitalize();
var styles63 = function styles64(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "inline-flex",
      width: 34 + 12 * 2,
      height: 14 + 12 * 2,
      overflow: "hidden",
      padding: 12,
      boxSizing: "border-box",
      position: "relative",
      flexShrink: 0,
      zIndex: 0,
      // Reset the stacking context.
      verticalAlign: "middle",
      // For correct alignment with the text.
      "@media print": {
        colorAdjust: "exact"
      }
    },
    /* Styles applied to the root element if `edge="start"`. */
    edgeStart: {
      marginLeft: -8
    },
    /* Styles applied to the root element if `edge="end"`. */
    edgeEnd: {
      marginRight: -8
    },
    /* Styles applied to the internal `SwitchBase` component's `root` class. */
    switchBase: {
      position: "absolute",
      top: 0,
      left: 0,
      zIndex: 1,
      // Render above the focus ripple.
      color: theme.palette.type === "light" ? theme.palette.grey[50] : theme.palette.grey[400],
      transition: theme.transitions.create(["left", "transform"], {
        duration: theme.transitions.duration.shortest
      }),
      "&$checked": {
        transform: "translateX(20px)"
      },
      "&$disabled": {
        color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
      },
      "&$checked + $track": {
        opacity: 0.5
      },
      "&$disabled + $track": {
        opacity: theme.palette.type === "light" ? 0.12 : 0.1
      }
    },
    /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
    colorPrimary: {
      "&$checked": {
        color: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
      },
      "&$checked + $track": {
        backgroundColor: theme.palette.primary.main
      },
      "&$disabled + $track": {
        backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
      }
    },
    /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
    colorSecondary: {
      "&$checked": {
        color: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.type === "light" ? theme.palette.grey[400] : theme.palette.grey[800]
      },
      "&$checked + $track": {
        backgroundColor: theme.palette.secondary.main
      },
      "&$disabled + $track": {
        backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white
      }
    },
    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
      width: 40,
      height: 24,
      padding: 7,
      "& $thumb": {
        width: 16,
        height: 16
      },
      "& $switchBase": {
        padding: 4,
        "&$checked": {
          transform: "translateX(16px)"
        }
      }
    },
    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */
    checked: {},
    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */
    disabled: {},
    /* Styles applied to the internal SwitchBase component's input element. */
    input: {
      left: "-100%",
      width: "300%"
    },
    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */
    thumb: {
      boxShadow: theme.shadows[1],
      backgroundColor: "currentColor",
      width: 20,
      height: 20,
      borderRadius: "50%"
    },
    /* Styles applied to the track element. */
    track: {
      height: "100%",
      width: "100%",
      borderRadius: 14 / 2,
      zIndex: -1,
      transition: theme.transitions.create(["opacity", "background-color"], {
        duration: theme.transitions.duration.shortest
      }),
      backgroundColor: theme.palette.type === "light" ? theme.palette.common.black : theme.palette.common.white,
      opacity: theme.palette.type === "light" ? 0.38 : 0.3
    }
  };
};
var Switch = React51.forwardRef(function Switch2(props, ref) {
  var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? "secondary" : _props$color, _props$edge = props.edge, edge = _props$edge === void 0 ? false : _props$edge, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);
  var icon = React51.createElement("span", {
    className: classes.thumb
  });
  return React51.createElement("span", {
    className: clsx_m_default(classes.root, className, {
      "start": classes.edgeStart,
      "end": classes.edgeEnd
    }[edge], size === "small" && classes["size".concat(capitalize(size))])
  }, React51.createElement(SwitchBase_default, _extends({
    type: "checkbox",
    icon,
    checkedIcon: icon,
    classes: {
      root: clsx_m_default(classes.switchBase, classes["color".concat(capitalize(color))]),
      input: classes.input,
      checked: classes.checked,
      disabled: classes.disabled
    },
    ref
  }, other)), React51.createElement("span", {
    className: classes.track
  }));
});
true ? Switch.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types46.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: import_prop_types46.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types46.default.object,
  /**
   * @ignore
   */
  className: import_prop_types46.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types46.default.oneOf(["default", "primary", "secondary"]),
  /**
   * @ignore
   */
  defaultChecked: import_prop_types46.default.bool,
  /**
   * If `true`, the switch will be disabled.
   */
  disabled: import_prop_types46.default.bool,
  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: import_prop_types46.default.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   */
  edge: import_prop_types46.default.oneOf(["end", "start", false]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: import_prop_types46.default.node,
  /**
   * The id of the `input` element.
   */
  id: import_prop_types46.default.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: import_prop_types46.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types46.default.func,
  /**
   * If `true`, the `input` element will be required.
   */
  required: import_prop_types46.default.bool,
  /**
   * The size of the switch.
   * `small` is equivalent to the dense switch styling.
   */
  size: import_prop_types46.default.oneOf(["medium", "small"]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: import_prop_types46.default.any
} : void 0;
var Switch_default = withStyles_default(styles63, {
  name: "MuiSwitch"
})(Switch);

// ../node_modules/@material-ui/core/esm/TableFooter/TableFooter.js
init_extends();
init_objectWithoutProperties();
var React52 = __toESM(require_react());
var import_prop_types47 = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
var styles65 = {
  /* Styles applied to the root element. */
  root: {
    display: "table-footer-group"
  }
};
var tablelvl2 = {
  variant: "footer"
};
var defaultComponent = "tfoot";
var TableFooter = React52.forwardRef(function TableFooter2(props, ref) {
  var classes = props.classes, className = props.className, _props$component = props.component, Component2 = _props$component === void 0 ? defaultComponent : _props$component, other = _objectWithoutProperties(props, ["classes", "className", "component"]);
  return React52.createElement(Tablelvl2Context_default.Provider, {
    value: tablelvl2
  }, React52.createElement(Component2, _extends({
    className: clsx_m_default(classes.root, className),
    ref,
    role: Component2 === defaultComponent ? null : "rowgroup"
  }, other)));
});
true ? TableFooter.propTypes = {
  /**
   * The content of the component, normally `TableRow`.
   */
  children: import_prop_types47.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types47.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types47.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types47.default.elementType
} : void 0;
var TableFooter_default = withStyles_default(styles65, {
  name: "MuiTableFooter"
})(TableFooter);

// ../node_modules/@material-ui/core/esm/TableSortLabel/TableSortLabel.js
init_extends();
init_objectWithoutProperties();
var React54 = __toESM(require_react());
var import_prop_types48 = __toESM(require_prop_types());
init_clsx_m();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/ArrowDownward.js
var React53 = __toESM(require_react());
init_createSvgIcon();
var ArrowDownward_default = createSvgIcon(React53.createElement("path", {
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
}), "ArrowDownward");

// ../node_modules/@material-ui/core/esm/TableSortLabel/TableSortLabel.js
init_withStyles();
init_capitalize();
var styles66 = function styles67(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      cursor: "pointer",
      display: "inline-flex",
      justifyContent: "flex-start",
      flexDirection: "inherit",
      alignItems: "center",
      "&:focus": {
        color: theme.palette.text.secondary
      },
      "&:hover": {
        color: theme.palette.text.secondary,
        "& $icon": {
          opacity: 0.5
        }
      },
      "&$active": {
        color: theme.palette.text.primary,
        // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045
        "&& $icon": {
          opacity: 1,
          color: theme.palette.text.secondary
        }
      }
    },
    /* Pseudo-class applied to the root element if `active={true}`. */
    active: {},
    /* Styles applied to the icon component. */
    icon: {
      fontSize: 18,
      marginRight: 4,
      marginLeft: 4,
      opacity: 0,
      transition: theme.transitions.create(["opacity", "transform"], {
        duration: theme.transitions.duration.shorter
      }),
      userSelect: "none"
    },
    /* Styles applied to the icon component if `direction="desc"`. */
    iconDirectionDesc: {
      transform: "rotate(0deg)"
    },
    /* Styles applied to the icon component if `direction="asc"`. */
    iconDirectionAsc: {
      transform: "rotate(180deg)"
    }
  };
};
var TableSortLabel = React54.forwardRef(function TableSortLabel2(props, ref) {
  var _props$active = props.active, active = _props$active === void 0 ? false : _props$active, children = props.children, classes = props.classes, className = props.className, _props$direction = props.direction, direction = _props$direction === void 0 ? "asc" : _props$direction, _props$hideSortIcon = props.hideSortIcon, hideSortIcon = _props$hideSortIcon === void 0 ? false : _props$hideSortIcon, _props$IconComponent = props.IconComponent, IconComponent = _props$IconComponent === void 0 ? ArrowDownward_default : _props$IconComponent, other = _objectWithoutProperties(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);
  return React54.createElement(ButtonBase_default, _extends({
    className: clsx_m_default(classes.root, className, active && classes.active),
    component: "span",
    disableRipple: true,
    ref
  }, other), children, hideSortIcon && !active ? null : React54.createElement(IconComponent, {
    className: clsx_m_default(classes.icon, classes["iconDirection".concat(capitalize(direction))])
  }));
});
true ? TableSortLabel.propTypes = {
  /**
   * If `true`, the label will have the active styling (should be true for the sorted column).
   */
  active: import_prop_types48.default.bool,
  /**
   * Label contents, the arrow will be appended automatically.
   */
  children: import_prop_types48.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types48.default.object.isRequired,
  /**
   * @ignore
   */
  className: import_prop_types48.default.string,
  /**
   * The current sort direction.
   */
  direction: import_prop_types48.default.oneOf(["asc", "desc"]),
  /**
   * Hide sort icon when active is false.
   */
  hideSortIcon: import_prop_types48.default.bool,
  /**
   * Sort icon to use.
   */
  IconComponent: import_prop_types48.default.elementType
} : void 0;
var TableSortLabel_default = withStyles_default(styles66, {
  name: "MuiTableSortLabel"
})(TableSortLabel);

// ../node_modules/@material-ui/core/esm/useScrollTrigger/useScrollTrigger.js
init_extends();
init_objectWithoutProperties();
var React55 = __toESM(require_react());
function defaultTrigger(store, options) {
  var _options$disableHyste = options.disableHysteresis, disableHysteresis = _options$disableHyste === void 0 ? false : _options$disableHyste, _options$threshold = options.threshold, threshold = _options$threshold === void 0 ? 100 : _options$threshold, target = options.target;
  var previous = store.current;
  if (target) {
    store.current = target.pageYOffset !== void 0 ? target.pageYOffset : target.scrollTop;
  }
  if (!disableHysteresis && previous !== void 0) {
    if (store.current < previous) {
      return false;
    }
  }
  return store.current > threshold;
}
var defaultTarget = typeof window !== "undefined" ? window : null;
function useScrollTrigger() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _options$getTrigger = options.getTrigger, getTrigger = _options$getTrigger === void 0 ? defaultTrigger : _options$getTrigger, _options$target = options.target, target = _options$target === void 0 ? defaultTarget : _options$target, other = _objectWithoutProperties(options, ["getTrigger", "target"]);
  var store = React55.useRef();
  var _React$useState = React55.useState(function() {
    return getTrigger(store, other);
  }), trigger = _React$useState[0], setTrigger = _React$useState[1];
  React55.useEffect(function() {
    var handleScroll = function handleScroll2() {
      setTrigger(getTrigger(store, _extends({
        target
      }, other)));
    };
    handleScroll();
    target.addEventListener("scroll", handleScroll);
    return function() {
      target.removeEventListener("scroll", handleScroll);
    };
  }, [target, getTrigger, JSON.stringify(other)]);
  return trigger;
}

// ../node_modules/@material-ui/core/esm/withMobileDialog/withMobileDialog.js
init_extends();
var React56 = __toESM(require_react());
var import_prop_types49 = __toESM(require_prop_types());
var warnedOnce9 = false;
var withMobileDialog = function withMobileDialog2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  return function(Component2) {
    if (true) {
      if (!warnedOnce9) {
        console.warn(["Material-UI: The `withMobileDialog` function is deprecated.", "Head to https://mui.com/r/migration-v4/#dialog for a migration path."].join("\n"));
        warnedOnce9 = true;
      }
    }
    var _options$breakpoint = options.breakpoint, breakpoint = _options$breakpoint === void 0 ? "sm" : _options$breakpoint;
    function WithMobileDialog(props) {
      return React56.createElement(Component2, _extends({
        fullScreen: isWidthDown(breakpoint, props.width)
      }, props));
    }
    true ? WithMobileDialog.propTypes = {
      width: import_prop_types49.default.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired
    } : void 0;
    return withWidth_default()(WithMobileDialog);
  };
};
var withMobileDialog_default = withMobileDialog;

// ../node_modules/@material-ui/core/esm/Zoom/Zoom.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var React57 = __toESM(require_react());
var import_prop_types50 = __toESM(require_prop_types());
init_transitions();
init_useForkRef();
var styles68 = {
  entering: {
    transform: "none"
  },
  entered: {
    transform: "none"
  }
};
var defaultTimeout2 = {
  enter: duration.enteringScreen,
  exit: duration.leavingScreen
};
var Zoom = React57.forwardRef(function Zoom2(props, ref) {
  var children = props.children, _props$disableStrictM = props.disableStrictModeCompat, disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM, inProp = props.in, onEnter = props.onEnter, onEntered = props.onEntered, onEntering = props.onEntering, onExit = props.onExit, onExited = props.onExited, onExiting = props.onExiting, style = props.style, _props$timeout = props.timeout, timeout = _props$timeout === void 0 ? defaultTimeout2 : _props$timeout, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? Transition_default : _props$TransitionComp, other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);
  var theme = useTheme2();
  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
  var nodeRef = React57.useRef(null);
  var foreignRef = useForkRef(children.ref, ref);
  var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : void 0, foreignRef);
  var normalizedTransitionCallback = function normalizedTransitionCallback2(callback) {
    return function(nodeOrAppearing, maybeAppearing) {
      if (callback) {
        var _ref2 = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing], _ref22 = _slicedToArray(_ref2, 2), node = _ref22[0], isAppearing = _ref22[1];
        if (isAppearing === void 0) {
          callback(node);
        } else {
          callback(node, isAppearing);
        }
      }
    };
  };
  var handleEntering = normalizedTransitionCallback(onEntering);
  var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
    reflow(node);
    var transitionProps = getTransitionProps({
      style,
      timeout
    }, {
      mode: "enter"
    });
    node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
    node.style.transition = theme.transitions.create("transform", transitionProps);
    if (onEnter) {
      onEnter(node, isAppearing);
    }
  });
  var handleEntered = normalizedTransitionCallback(onEntered);
  var handleExiting = normalizedTransitionCallback(onExiting);
  var handleExit = normalizedTransitionCallback(function(node) {
    var transitionProps = getTransitionProps({
      style,
      timeout
    }, {
      mode: "exit"
    });
    node.style.webkitTransition = theme.transitions.create("transform", transitionProps);
    node.style.transition = theme.transitions.create("transform", transitionProps);
    if (onExit) {
      onExit(node);
    }
  });
  var handleExited = normalizedTransitionCallback(onExited);
  return React57.createElement(TransitionComponent, _extends({
    appear: true,
    in: inProp,
    nodeRef: enableStrictModeCompat ? nodeRef : void 0,
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    timeout
  }, other), function(state, childProps) {
    return React57.cloneElement(children, _extends({
      style: _extends({
        transform: "scale(0)",
        visibility: state === "exited" && !inProp ? "hidden" : void 0
      }, styles68[state], style, children.props.style),
      ref: handleRef
    }, childProps));
  });
});
true ? Zoom.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * A single child content element.
   */
  children: import_prop_types50.default.element,
  /**
   * Enable this prop if you encounter 'Function components cannot be given refs',
   * use `unstable_createStrictModeTheme`,
   * and can't forward the ref in the child component.
   */
  disableStrictModeCompat: import_prop_types50.default.bool,
  /**
   * If `true`, the component will transition in.
   */
  in: import_prop_types50.default.bool,
  /**
   * @ignore
   */
  onEnter: import_prop_types50.default.func,
  /**
   * @ignore
   */
  onEntered: import_prop_types50.default.func,
  /**
   * @ignore
   */
  onEntering: import_prop_types50.default.func,
  /**
   * @ignore
   */
  onExit: import_prop_types50.default.func,
  /**
   * @ignore
   */
  onExited: import_prop_types50.default.func,
  /**
   * @ignore
   */
  onExiting: import_prop_types50.default.func,
  /**
   * @ignore
   */
  style: import_prop_types50.default.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  timeout: import_prop_types50.default.oneOfType([import_prop_types50.default.number, import_prop_types50.default.shape({
    appear: import_prop_types50.default.number,
    enter: import_prop_types50.default.number,
    exit: import_prop_types50.default.number
  })])
} : void 0;
var Zoom_default = Zoom;

export {
  Avatar_default,
  AccordionActions_default,
  Badge_default,
  BottomNavigation_default,
  BottomNavigationAction_default,
  Breadcrumbs_default,
  ButtonGroup_default,
  CardActionArea_default,
  CardHeader_default,
  CardMedia_default,
  Slide_default,
  Drawer_default,
  ExpansionPanel_default,
  ExpansionPanelActions_default,
  ExpansionPanelDetails_default,
  ExpansionPanelSummary_default,
  Fab_default,
  GridList_default,
  GridListTile_default,
  GridListTileBar_default,
  useMediaQuery,
  isWidthUp,
  isWidthDown,
  withWidth_default,
  Hidden_default,
  Icon_default,
  ImageList_default,
  ImageListItem_default,
  ImageListItemBar_default,
  LinearProgress_default,
  ListItemAvatar_default,
  ListItemSecondaryAction_default,
  ListSubheader_default,
  MobileStepper_default,
  NoSsr_default,
  RootRef_default,
  Step_default,
  StepIcon_default,
  StepLabel_default,
  StepButton_default,
  StepConnector_default,
  StepContent_default,
  Stepper_default,
  SwipeableDrawer_default,
  Switch_default,
  TableFooter_default,
  TableSortLabel_default,
  useScrollTrigger,
  withMobileDialog_default,
  Zoom_default
};
/*! Bundled license information:

@material-ui/core/esm/index.js:
  (** @license Material-UI v4.12.4
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-TDY4KRIT.js.map
