import {
  Divider_default
} from "./chunk-W7IDD2LB.js";
import {
  AccordionDetails_default
} from "./chunk-ZEYTQU77.js";
import {
  AccordionSummary_default
} from "./chunk-CLETYUR4.js";
import {
  Accordion_default
} from "./chunk-7EABD3G6.js";
import "./chunk-7ACV3GAN.js";
import {
  Toast
} from "./chunk-NYSHD5KH.js";
import {
  require_jsx_runtime
} from "./chunk-MN6XLW6Q.js";
import {
  useMachine
} from "./chunk-J34WXHB4.js";
import "./chunk-VJSPU622.js";
import {
  Machine,
  assign
} from "./chunk-SRTTMZV5.js";
import "./chunk-KRCK54RH.js";
import "./chunk-7AV4KTZL.js";
import {
  ExpandMore_default
} from "./chunk-DJCLTQTG.js";
import "./chunk-7RCLPMH3.js";
import "./chunk-LJHHLN5M.js";
import "./chunk-B6AM2NKK.js";
import {
  makeStyles_default
} from "./chunk-VM2MZLUW.js";
import "./chunk-OTPKZYVX.js";
import "./chunk-WGZDRRR5.js";
import "./chunk-H4WM7IIL.js";
import "./chunk-DEPENL6S.js";
import "./chunk-EC4OINFY.js";
import "./chunk-MJ6MIMBS.js";
import "./chunk-CMDS46FL.js";
import "./chunk-K6J27RMN.js";
import "./chunk-RFR2NZND.js";
import "./chunk-UTKIQ5NH.js";
import "./chunk-UIJGMWLU.js";
import "./chunk-DMV3LC6V.js";
import "./chunk-WGHK5OTH.js";
import "./chunk-K22CCDOT.js";
import "./chunk-TLO7BD22.js";
import "./chunk-T3A56L2S.js";
import "./chunk-QSUIRVO3.js";
import {
  Typography_default
} from "./chunk-OSUJ7GDT.js";
import "./chunk-TSYRDUXI.js";
import "./chunk-NTHUYHC7.js";
import "./chunk-BADD6I46.js";
import "./chunk-PQJMVEX4.js";
import "./chunk-VFPNJJT6.js";
import "./chunk-CVF63FI4.js";
import "./chunk-QJKXMHKV.js";
import "./chunk-YJVCL377.js";
import "./chunk-O7PTNT6S.js";
import "./chunk-YRNTLAWF.js";
import "./chunk-QFTOHLK2.js";
import "./chunk-4JITSZEO.js";
import "./chunk-TBV2F45A.js";
import "./chunk-LINZ7S4M.js";
import "./chunk-3EESYYNB.js";
import "./chunk-KL6UBKAO.js";
import "./chunk-JL3UJI6L.js";
import "./chunk-JE5XHEFL.js";
import "./chunk-CCPUFXAI.js";
import "./chunk-B6TCGXKG.js";
import "./chunk-3SY2X4VC.js";
import "./chunk-K5M3XRFO.js";
import "./chunk-VAAWV47Q.js";
import "./chunk-LQNFPLGJ.js";
import "./chunk-TZNDNIQK.js";
import "./chunk-QYGHSHYC.js";
import "./chunk-YGDE4KKL.js";
import "./chunk-D3SGUVA5.js";
import "./chunk-WQUDTCFH.js";
import "./chunk-OBJPNOCR.js";
import "./chunk-PYVGESTF.js";
import {
  useSubscription
} from "./chunk-Z2MHMT5I.js";
import {
  gql
} from "./chunk-JJXTUFQN.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import "./chunk-EIVP3DCT.js";
import "./chunk-B2UCKYRH.js";
import "./chunk-6K7QCZCQ.js";
import "./chunk-XSD2GIWA.js";
import "./chunk-VMI4J53R.js";
import "./chunk-UCSDCOQI.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@eclipse-sirius/sirius-components-validation/dist/sirius-components-validation.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var isValidationRefreshedEventPayload = (payload) => payload.__typename === "ValidationRefreshedEventPayload";
var validationViewMachine = Machine(
  {
    type: "parallel",
    context: {
      id: crypto.randomUUID(),
      validation: null,
      message: null
    },
    states: {
      toast: {
        initial: "hidden",
        states: {
          hidden: {
            on: {
              SHOW_TOAST: {
                target: "visible",
                actions: "setMessage"
              }
            }
          },
          visible: {
            on: {
              HIDE_TOAST: {
                target: "hidden",
                actions: "clearMessage"
              }
            }
          }
        }
      },
      validationView: {
        initial: "idle",
        states: {
          idle: {
            on: {
              HANDLE_SUBSCRIPTION_RESULT: [
                {
                  cond: "isValidationRefreshedEventPayload",
                  target: "ready",
                  actions: "handleSubscriptionResult"
                },
                {
                  target: "idle",
                  actions: "handleSubscriptionResult"
                }
              ]
            }
          },
          ready: {
            on: {
              HANDLE_SUBSCRIPTION_RESULT: {
                target: "ready",
                actions: "handleSubscriptionResult"
              },
              HANDLE_COMPLETE: {
                target: "complete"
              }
            }
          },
          complete: {
            type: "final"
          }
        }
      }
    }
  },
  {
    guards: {
      isValidationRefreshedEventPayload: (_, event) => {
        const { result } = event;
        const { data } = result;
        return !!data && isValidationRefreshedEventPayload(data.validationEvent);
      }
    },
    actions: {
      handleSubscriptionResult: assign((_, event) => {
        const { result } = event;
        const { data } = result;
        if (data && isValidationRefreshedEventPayload(data.validationEvent)) {
          const { validation } = data.validationEvent;
          const categories = [];
          const processedValidation = { categories };
          validation.diagnostics.forEach((diagnostic) => {
            let category = categories.find((category2) => category2.kind === diagnostic.kind);
            if (!category) {
              category = {
                kind: diagnostic.kind,
                diagnostics: []
              };
              categories.push(category);
            }
            category.diagnostics.push({ id: diagnostic.id, message: diagnostic.message });
          });
          return { validation: processedValidation };
        }
        return {};
      }),
      setMessage: assign((_, event) => {
        const { message } = event;
        return { message };
      }),
      clearMessage: assign((_) => {
        return { message: null };
      })
    }
  }
);
var validationEventSubscription = gql`
  subscription validationEvent($input: ValidationEventInput!) {
    validationEvent(input: $input) {
      __typename
      ... on ValidationRefreshedEventPayload {
        id
        validation {
          id
          diagnostics {
            id
            kind
            message
          }
        }
      }
    }
  }
`;
var useValidationViewStyle = makeStyles_default((theme) => ({
  root: {
    padding: "8px"
  },
  heading: {
    flexBasis: "33.33%",
    flexShrink: 0
  },
  secondaryHeading: {
    color: theme.palette.text.secondary
  },
  accordionDetailsRoot: {
    flexDirection: "column"
  },
  divider: {
    margin: "8px 0"
  },
  idle: {
    padding: theme.spacing(1)
  }
}));
var ValidationView = ({ editingContextId }) => {
  const classes = useValidationViewStyle();
  const [{ value, context }, dispatch] = useMachine(validationViewMachine);
  const { toast, validationView } = value;
  const { id, validation, message } = context;
  const { error } = useSubscription(
    validationEventSubscription,
    {
      variables: {
        input: {
          id,
          editingContextId
        }
      },
      fetchPolicy: "no-cache",
      onData: ({ data }) => {
        const handleDataEvent = {
          type: "HANDLE_SUBSCRIPTION_RESULT",
          result: data
        };
        dispatch(handleDataEvent);
      },
      onComplete: () => {
        const completeEvent = { type: "HANDLE_COMPLETE" };
        dispatch(completeEvent);
      }
    }
  );
  (0, import_react2.useEffect)(() => {
    if (error) {
      const { message: message2 } = error;
      const showToastEvent = { type: "SHOW_TOAST", message: message2 };
      dispatch(showToastEvent);
    }
  }, [error, dispatch]);
  let content = null;
  if (validationView === "ready" && validation) {
    const accordions = validation.categories.map((category) => {
      const details = category.diagnostics.map((diagnostic) => {
        return (0, import_jsx_runtime.jsx)(Typography_default, { children: diagnostic.message }, diagnostic.id);
      }).reduce((prev, current, index) => [
        prev,
        (0, import_jsx_runtime.jsx)(Divider_default, { className: classes.divider }, `Divider-${index}`),
        current
      ]);
      return (0, import_jsx_runtime.jsxs)(Accordion_default, { children: [
        (0, import_jsx_runtime.jsxs)(AccordionSummary_default, { expandIcon: (0, import_jsx_runtime.jsx)(ExpandMore_default, {}), children: [
          (0, import_jsx_runtime.jsx)(Typography_default, { className: classes.heading, children: category.kind }),
          (0, import_jsx_runtime.jsxs)(Typography_default, { className: classes.secondaryHeading, children: [
            category.diagnostics.length,
            " diagnostics"
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(AccordionDetails_default, { className: classes.accordionDetailsRoot, children: details })
      ] }, category.kind);
    });
    if (accordions.length > 0) {
      content = (0, import_jsx_runtime.jsx)("div", { className: classes.root, children: accordions });
    } else {
      content = (0, import_jsx_runtime.jsx)("div", { className: classes.idle, children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", children: "No diagnostic available" }) });
    }
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    content,
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message: message ?? "",
        open: toast === "visible",
        onClose: () => dispatch({ type: "HIDE_TOAST" })
      }
    )
  ] });
};
export {
  ValidationView
};
//# sourceMappingURL=@eclipse-sirius_sirius-components-validation.js.map
