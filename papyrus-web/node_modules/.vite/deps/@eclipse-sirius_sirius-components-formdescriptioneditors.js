import {
  require_Link
} from "./chunk-PY52OKKT.js";
import {
  require_Extension
} from "./chunk-FZZ7OMPN.js";
import {
  require_Image
} from "./chunk-EZNQTHGX.js";
import {
  BarChart,
  PieChart,
  PropertySectionContext,
  getTextDecorationLineValue,
  require_Code,
  require_FormatBold,
  require_FormatItalic,
  require_FormatListNumbered,
  require_StrikethroughS,
  require_Subject,
  require_Title,
  widgetFields
} from "./chunk-SNRJU3PN.js";
import "./chunk-LU4ZSRGR.js";
import "./chunk-XYGVIDDP.js";
import {
  require_FormatListBulleted
} from "./chunk-IBH2YODD.js";
import {
  require_HelpOutlineOutlined
} from "./chunk-MYBT6HDQ.js";
import "./chunk-LGRVFEH5.js";
import {
  require_Add
} from "./chunk-WPAAFGOY.js";
import {
  require_Delete
} from "./chunk-S7GHAAFQ.js";
import "./chunk-6QAZUADE.js";
import "./chunk-S2Y5JDGU.js";
import {
  Avatar_default
} from "./chunk-TDY4KRIT.js";
import {
  TableRow_default
} from "./chunk-QO66DLHO.js";
import {
  Table_default
} from "./chunk-RERSTXQB.js";
import {
  TableBody_default
} from "./chunk-5Q7WZCR7.js";
import "./chunk-D7G7ECCP.js";
import "./chunk-2FQTDJLG.js";
import "./chunk-TIACL36Q.js";
import "./chunk-UANGUQTW.js";
import {
  TableCell_default
} from "./chunk-DVDDEJSR.js";
import "./chunk-DX5CTSMH.js";
import "./chunk-Z6TUPHL7.js";
import {
  Radio_default
} from "./chunk-B6IKDWVX.js";
import {
  RadioGroup_default
} from "./chunk-X6VMBKYA.js";
import "./chunk-SSOJURHI.js";
import "./chunk-6SE6QKLQ.js";
import {
  Link_default
} from "./chunk-M2CPW4JE.js";
import "./chunk-JU6U3L6V.js";
import "./chunk-PZTZPEF5.js";
import "./chunk-M64WZJX4.js";
import "./chunk-O3JXNHKG.js";
import "./chunk-FF43BDX5.js";
import "./chunk-XMDXGOH3.js";
import "./chunk-ITPIC75P.js";
import "./chunk-4WXSZ6HD.js";
import "./chunk-ZXCODMPZ.js";
import "./chunk-SKZ2FEGF.js";
import "./chunk-NUCQCZB3.js";
import "./chunk-XFHPGFUQ.js";
import {
  TextField_default
} from "./chunk-KKAIIBQI.js";
import {
  MenuItem_default
} from "./chunk-BPTBL6MC.js";
import "./chunk-2T45WZ2P.js";
import {
  Select_default
} from "./chunk-UZDCVM6R.js";
import "./chunk-X7JKGFX2.js";
import "./chunk-EFRU5WKF.js";
import {
  ListItemText_default
} from "./chunk-3Z2XKYYI.js";
import "./chunk-ATC4NO6R.js";
import "./chunk-CF7T5PES.js";
import "./chunk-KISTPFZY.js";
import "./chunk-SDNDIM76.js";
import "./chunk-CXISOORH.js";
import "./chunk-HQ3NZM53.js";
import {
  Divider_default
} from "./chunk-W7IDD2LB.js";
import "./chunk-ZEYTQU77.js";
import "./chunk-CLETYUR4.js";
import "./chunk-7EABD3G6.js";
import "./chunk-7ACV3GAN.js";
import {
  ServerContext,
  Toast,
  getCSSColor,
  require_CheckBox,
  useDeletionConfirmationDialog,
  useSelection
} from "./chunk-NYSHD5KH.js";
import {
  require_jsx_runtime
} from "./chunk-MN6XLW6Q.js";
import {
  useMachine
} from "./chunk-J34WXHB4.js";
import "./chunk-VJSPU622.js";
import {
  Machine,
  assign
} from "./chunk-SRTTMZV5.js";
import "./chunk-KRCK54RH.js";
import {
  require_createSvgIcon
} from "./chunk-7AV4KTZL.js";
import "./chunk-DJCLTQTG.js";
import {
  require_interopRequireDefault,
  require_interopRequireWildcard
} from "./chunk-7RCLPMH3.js";
import {
  Tab_default,
  Tabs_default
} from "./chunk-LJHHLN5M.js";
import {
  Tooltip_default
} from "./chunk-B6AM2NKK.js";
import {
  makeStyles_default
} from "./chunk-VM2MZLUW.js";
import "./chunk-OTPKZYVX.js";
import "./chunk-WGZDRRR5.js";
import "./chunk-H4WM7IIL.js";
import "./chunk-DEPENL6S.js";
import "./chunk-EC4OINFY.js";
import {
  FormControlLabel_default
} from "./chunk-MJ6MIMBS.js";
import "./chunk-CMDS46FL.js";
import "./chunk-K6J27RMN.js";
import {
  Checkbox_default
} from "./chunk-RFR2NZND.js";
import "./chunk-UTKIQ5NH.js";
import "./chunk-UIJGMWLU.js";
import "./chunk-DMV3LC6V.js";
import "./chunk-WGHK5OTH.js";
import "./chunk-K22CCDOT.js";
import "./chunk-TLO7BD22.js";
import "./chunk-T3A56L2S.js";
import "./chunk-QSUIRVO3.js";
import {
  Typography_default
} from "./chunk-OSUJ7GDT.js";
import {
  IconButton_default
} from "./chunk-TSYRDUXI.js";
import "./chunk-NTHUYHC7.js";
import {
  Button_default
} from "./chunk-BADD6I46.js";
import {
  ButtonBase_default
} from "./chunk-PQJMVEX4.js";
import {
  init_utils
} from "./chunk-VFPNJJT6.js";
import "./chunk-CVF63FI4.js";
import "./chunk-QJKXMHKV.js";
import "./chunk-YJVCL377.js";
import "./chunk-O7PTNT6S.js";
import "./chunk-YRNTLAWF.js";
import "./chunk-QFTOHLK2.js";
import "./chunk-4JITSZEO.js";
import {
  SvgIcon_default,
  init_SvgIcon
} from "./chunk-TBV2F45A.js";
import "./chunk-LINZ7S4M.js";
import "./chunk-3EESYYNB.js";
import "./chunk-KL6UBKAO.js";
import "./chunk-JL3UJI6L.js";
import "./chunk-JE5XHEFL.js";
import "./chunk-CCPUFXAI.js";
import "./chunk-B6TCGXKG.js";
import "./chunk-3SY2X4VC.js";
import "./chunk-K5M3XRFO.js";
import "./chunk-VAAWV47Q.js";
import "./chunk-LQNFPLGJ.js";
import {
  capitalize
} from "./chunk-TZNDNIQK.js";
import {
  Paper_default
} from "./chunk-QYGHSHYC.js";
import {
  withStyles_default
} from "./chunk-YGDE4KKL.js";
import {
  alpha
} from "./chunk-D3SGUVA5.js";
import "./chunk-WQUDTCFH.js";
import "./chunk-OBJPNOCR.js";
import "./chunk-PYVGESTF.js";
import {
  useMutation,
  useSubscription
} from "./chunk-Z2MHMT5I.js";
import {
  gql
} from "./chunk-JJXTUFQN.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import "./chunk-EIVP3DCT.js";
import "./chunk-B2UCKYRH.js";
import "./chunk-6K7QCZCQ.js";
import "./chunk-XSD2GIWA.js";
import "./chunk-VMI4J53R.js";
import "./chunk-UCSDCOQI.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@material-ui/icons/ArrowDropDownCircle.js
var require_ArrowDropDownCircle = __commonJS({
  "../node_modules/@material-ui/icons/ArrowDropDownCircle.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z"
    }), "ArrowDropDownCircle");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/BarChart.js
var require_BarChart = __commonJS({
  "../node_modules/@material-ui/icons/BarChart.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M5 9.2h3V19H5zM10.6 5h2.8v14h-2.8zm5.6 8H19v6h-2.8z"
    }), "BarChart");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/LabelOutlined.js
var require_LabelOutlined = __commonJS({
  "../node_modules/@material-ui/icons/LabelOutlined.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z"
    }), "LabelOutlined");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/PieChart.js
var require_PieChart = __commonJS({
  "../node_modules/@material-ui/icons/PieChart.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M11 2v20c-5.07-.5-9-4.79-9-10s3.93-9.5 9-10zm2.03 0v8.99H22c-.47-4.74-4.24-8.52-8.97-8.99zm0 11.01V22c4.74-.47 8.5-4.25 8.97-8.99h-8.97z"
    }), "PieChart");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/RadioButtonChecked.js
var require_RadioButtonChecked = __commonJS({
  "../node_modules/@material-ui/icons/RadioButtonChecked.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), "RadioButtonChecked");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/TextFields.js
var require_TextFields = __commonJS({
  "../node_modules/@material-ui/icons/TextFields.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M2.5 4v3h5v12h3V7h5V4h-13zm19 5h-9v3h3v7h3v-7h3V9z"
    }), "TextFields");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/TextFormat.js
var require_TextFormat = __commonJS({
  "../node_modules/@material-ui/icons/TextFormat.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z"
    }), "TextFormat");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/ViewAgenda.js
var require_ViewAgenda = __commonJS({
  "../node_modules/@material-ui/icons/ViewAgenda.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z"
    }), "ViewAgenda");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/ViewColumn.js
var require_ViewColumn = __commonJS({
  "../node_modules/@material-ui/icons/ViewColumn.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z"
    }), "ViewColumn");
    exports.default = _default;
  }
});

// ../node_modules/@material-ui/icons/Web.js
var require_Web = __commonJS({
  "../node_modules/@material-ui/icons/Web.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    var _interopRequireWildcard = require_interopRequireWildcard();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var React2 = _interopRequireWildcard(require_react());
    var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
    var _default = (0, _createSvgIcon.default)(React2.createElement("path", {
      d: "M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z"
    }), "Web");
    exports.default = _default;
  }
});

// ../node_modules/@eclipse-sirius/sirius-components-formdescriptioneditors/dist/sirius-components-formdescriptioneditors.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_ArrowDropDownCircle = __toESM(require_ArrowDropDownCircle());
var import_BarChart = __toESM(require_BarChart());
var import_CheckBox = __toESM(require_CheckBox());
var import_FormatListBulleted = __toESM(require_FormatListBulleted());
var import_Image = __toESM(require_Image());
var import_LabelOutlined = __toESM(require_LabelOutlined());
var import_Link = __toESM(require_Link());
var import_PieChart = __toESM(require_PieChart());
var import_RadioButtonChecked = __toESM(require_RadioButtonChecked());
var import_TextFields = __toESM(require_TextFields());
var import_TextFormat = __toESM(require_TextFormat());
var import_ViewAgenda = __toESM(require_ViewAgenda());
var import_ViewColumn = __toESM(require_ViewColumn());
var import_Web = __toESM(require_Web());
var React = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_Add = __toESM(require_Add());
var import_HelpOutlineOutlined = __toESM(require_HelpOutlineOutlined());
var import_Extension = __toESM(require_Extension());
var import_Delete = __toESM(require_Delete());
var import_Code = __toESM(require_Code());
var import_FormatBold = __toESM(require_FormatBold());
var import_FormatItalic = __toESM(require_FormatItalic());
var import_FormatListNumbered = __toESM(require_FormatListNumbered());
var import_StrikethroughS = __toESM(require_StrikethroughS());
var import_Subject = __toESM(require_Subject());
var import_Title = __toESM(require_Title());
init_utils();
init_SvgIcon();
var widgetContainerContent = (depth) => {
  if (depth === 0) {
    return "...widgetFields";
  } else {
    const children = widgetContainerContent(depth - 1);
    return `
      ...widgetFields
      ... on FlexboxContainer {
        ...flexboxContainerProperFields
        children {
          ${children}
        }
      }
      ... on FormDescriptionEditorIf {
        ...ifProperFields
        children {
          ${children}
        }
      }
      ... on FormDescriptionEditorFor {
        ...forProperFields
        children {
          ${children}
        }
      }
    `;
  }
};
var formDescriptionEditorEventSubscription = (contributions) => {
  return `
  ${widgetFields(contributions)}

  fragment ifProperFields on FormDescriptionEditorIf {
    ...commonFields
    label
  }

  fragment forProperFields on FormDescriptionEditorFor {
    ...commonFields
    label
  }

  fragment flexboxContainerProperFields on FlexboxContainer {
    ...commonFields
    label
    flexDirection
    flexWrap
    flexGrow
    borderStyle {
      color
      lineStyle
      size
      radius
    }
  }

  subscription formDescriptionEditorEvent($input: FormDescriptionEditorEventInput!) {
    formDescriptionEditorEvent(input: $input) {
      __typename
      ... on ErrorPayload {
        id
        message
      }
      ... on SubscribersUpdatedEventPayload {
        id
        subscribers {
          username
        }
      }
      ... on FormDescriptionEditorRefreshedEventPayload {
        id
        formDescriptionEditor {
          id
          pages {
            id
            label
            toolbarActions {
              ...commonFields
              ...toolbarActionFields
            }
            groups {
              id
              label
              displayMode
              borderStyle {
                color
                lineStyle
                size
                radius
              }
              toolbarActions {
                ...commonFields
                ...toolbarActionFields
              }
              widgets {
                ${widgetContainerContent(4)}
              }
            }
          }
        }
      }
    }
  }
`;
};
var addGroupMutation = gql`
  mutation addGroup($input: AddGroupInput!) {
    addGroup(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var deleteGroupMutation = gql`
  mutation deleteGroup($input: DeleteGroupInput!) {
    deleteGroup(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var moveGroupMutation = gql`
  mutation moveGroup($input: MoveGroupInput!) {
    moveGroup(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var addWidgetMutation = gql`
  mutation addWidget($input: AddWidgetInput!) {
    addWidget(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var deleteWidgetMutation = gql`
  mutation deleteWidget($input: DeleteWidgetInput!) {
    deleteWidget(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var moveWidgetMutation = gql`
  mutation moveWidget($input: MoveWidgetInput!) {
    moveWidget(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var addToolbarActionMutation = gql`
  mutation addToolbarAction($input: AddToolbarActionInput!) {
    addToolbarAction(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var deleteToolbarActionMutation = gql`
  mutation deleteToolbarAction($input: DeleteToolbarActionInput!) {
    deleteToolbarAction(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var moveToolbarActionMutation = gql`
  mutation moveToolbarAction($input: MoveToolbarActionInput!) {
    moveToolbarAction(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var addPageMutation = gql`
  mutation addPage($input: AddPageInput!) {
    addPage(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var movePageMutation = gql`
  mutation movePage($input: MovePageInput!) {
    movePage(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var deletePageMutation = gql`
  mutation deletePage($input: DeletePageInput!) {
    deletePage(input: $input) {
      __typename
      ... on SuccessPayload {
        id
      }
      ... on ErrorPayload {
        message
      }
    }
  }
`;
var isFormDescriptionEditorRefreshedEventPayload = (payload) => payload.__typename === "FormDescriptionEditorRefreshedEventPayload";
var isSubscribersUpdatedEventPayload = (payload) => payload.__typename === "SubscribersUpdatedEventPayload";
var formDescriptionEditorRepresentationMachine = Machine(
  {
    type: "parallel",
    context: {
      id: crypto.randomUUID(),
      formDescriptionEditor: null,
      subscribers: [],
      message: null
    },
    states: {
      toast: {
        initial: "hidden",
        states: {
          hidden: {
            on: {
              SHOW_TOAST: {
                target: "visible",
                actions: "setMessage"
              }
            }
          },
          visible: {
            on: {
              HIDE_TOAST: {
                target: "hidden",
                actions: "clearMessage"
              }
            }
          }
        }
      },
      formDescriptionEditorRepresentation: {
        initial: "loading",
        states: {
          empty: {},
          loading: {
            on: {
              INITIALIZE: [
                {
                  target: "ready",
                  actions: "initialize"
                }
              ]
            }
          },
          ready: {
            on: {
              HANDLE_SUBSCRIPTION_RESULT: [
                {
                  actions: "handleSubscriptionResult"
                }
              ],
              HANDLE_COMPLETE: [
                {
                  target: "complete",
                  actions: "handleComplete"
                }
              ]
            }
          },
          complete: {}
        }
      }
    }
  },
  {
    actions: {
      initialize: assign((_) => {
        return {
          message: void 0
        };
      }),
      handleComplete: assign((_) => {
        return {};
      }),
      handleSubscriptionResult: assign((_, event) => {
        const { result } = event;
        const { data } = result;
        if (isFormDescriptionEditorRefreshedEventPayload(data.formDescriptionEditorEvent)) {
          const { formDescriptionEditor } = data.formDescriptionEditorEvent;
          return { formDescriptionEditor };
        } else if (isSubscribersUpdatedEventPayload(data.formDescriptionEditorEvent)) {
          const { subscribers } = data.formDescriptionEditorEvent;
          return { subscribers };
        }
        return {};
      }),
      setMessage: assign((_, event) => {
        const { message } = event;
        return { message };
      }),
      clearMessage: assign((_) => {
        return { message: null };
      })
    }
  }
);
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var propTypes = { exports: {} };
var reactIs$1 = { exports: {} };
var reactIs_development$1 = {};
var hasRequiredReactIs_development$1;
function requireReactIs_development$1() {
  if (hasRequiredReactIs_development$1)
    return reactIs_development$1;
  hasRequiredReactIs_development$1 = 1;
  if (true) {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type) {
        return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development$1.AsyncMode = AsyncMode;
      reactIs_development$1.ConcurrentMode = ConcurrentMode;
      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }
  return reactIs_development$1;
}
var hasRequiredReactIs;
function requireReactIs() {
  if (hasRequiredReactIs)
    return reactIs$1.exports;
  hasRequiredReactIs = 1;
  if (false) {
    reactIs$1.exports = requireReactIs_production_min$1();
  } else {
    reactIs$1.exports = requireReactIs_development$1();
  }
  return reactIs$1.exports;
}
var objectAssign;
var hasRequiredObjectAssign;
function requireObjectAssign() {
  if (hasRequiredObjectAssign)
    return objectAssign;
  hasRequiredObjectAssign = 1;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }
    return to;
  };
  return objectAssign;
}
var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;
function requireReactPropTypesSecret() {
  if (hasRequiredReactPropTypesSecret)
    return ReactPropTypesSecret_1;
  hasRequiredReactPropTypesSecret = 1;
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  ReactPropTypesSecret_1 = ReactPropTypesSecret;
  return ReactPropTypesSecret_1;
}
var has;
var hasRequiredHas;
function requireHas() {
  if (hasRequiredHas)
    return has;
  hasRequiredHas = 1;
  has = Function.call.bind(Object.prototype.hasOwnProperty);
  return has;
}
var checkPropTypes_1;
var hasRequiredCheckPropTypes;
function requireCheckPropTypes() {
  if (hasRequiredCheckPropTypes)
    return checkPropTypes_1;
  hasRequiredCheckPropTypes = 1;
  var printWarning = function() {
  };
  if (true) {
    var ReactPropTypesSecret = requireReactPropTypesSecret();
    var loggedTypeFailures = {};
    var has2 = requireHas();
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (true) {
      for (var typeSpecName in typeSpecs) {
        if (has2(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error(
                (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning(
              (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning(
              "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
            );
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (true) {
      loggedTypeFailures = {};
    }
  };
  checkPropTypes_1 = checkPropTypes;
  return checkPropTypes_1;
}
var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;
function requireFactoryWithTypeCheckers() {
  if (hasRequiredFactoryWithTypeCheckers)
    return factoryWithTypeCheckers;
  hasRequiredFactoryWithTypeCheckers = 1;
  var ReactIs = requireReactIs();
  var assign2 = requireObjectAssign();
  var ReactPropTypesSecret = requireReactPropTypesSecret();
  var has2 = requireHas();
  var checkPropTypes = requireCheckPropTypes();
  var printWarning = function() {
  };
  if (true) {
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  factoryWithTypeCheckers = function(isValidElement2, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bigint: createPrimitiveTypeChecker("bigint"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && typeof data === "object" ? data : {};
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      if (true) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            err.name = "Invariant Violation";
            throw err;
          } else if (typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError(
            "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
            { expectedType }
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement2(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (true) {
          if (arguments.length > 1) {
            printWarning(
              "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
            );
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key in propValue) {
          if (has2(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== "function") {
          printWarning(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
          );
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
      return new PropTypeError(
        (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
      );
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign2({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has2(shapeTypes, key) && typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement2(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case "array":
        case "object":
          return "an " + type;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type;
        default:
          return type;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithTypeCheckers;
}
if (true) {
  ReactIs = requireReactIs();
  throwOnDirectAccess = true;
  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
} else {
  propTypes.exports = requireFactoryWithThrowingShims()();
}
var ReactIs;
var throwOnDirectAccess;
var propTypesExports = propTypes.exports;
var PropTypes = getDefaultExportFromCjs(propTypesExports);
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var styles$1 = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: _extends({}, theme.typography.button, {
      boxSizing: "border-box",
      borderRadius: theme.shape.borderRadius,
      padding: 11,
      border: "1px solid ".concat(alpha(theme.palette.action.active, 0.12)),
      color: alpha(theme.palette.action.active, 0.38),
      "&$selected": {
        color: theme.palette.action.active,
        backgroundColor: alpha(theme.palette.action.active, 0.12),
        "&:hover": {
          backgroundColor: alpha(theme.palette.action.active, 0.15)
        },
        "& + &": {
          borderLeft: 0,
          marginLeft: 0
        }
      },
      "&$disabled": {
        color: alpha(theme.palette.action.disabled, 0.12)
      },
      "&:hover": {
        textDecoration: "none",
        // Reset on mouse devices
        backgroundColor: alpha(theme.palette.text.primary, 0.05),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        },
        "&$disabled": {
          backgroundColor: "transparent"
        }
      }
    }),
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Pseudo-class applied to the root element if `selected={true}`. */
    selected: {},
    /* Styles applied to the `label` wrapper element. */
    label: {
      width: "100%",
      // Ensure the correct width for iOS Safari
      display: "inherit",
      alignItems: "inherit",
      justifyContent: "inherit"
    },
    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
      padding: 7,
      fontSize: theme.typography.pxToRem(13)
    },
    /* Styles applied to the root element if `size="large"`. */
    sizeLarge: {
      padding: 15,
      fontSize: theme.typography.pxToRem(15)
    }
  };
};
var ToggleButton = React.forwardRef(function ToggleButton2(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, onChange = props.onChange, onClick = props.onClick, selected = props.selected, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, value = props.value, other = _objectWithoutProperties(props, ["children", "classes", "className", "disabled", "disableFocusRipple", "onChange", "onClick", "selected", "size", "value"]);
  var handleChange = function handleChange2(event) {
    if (onClick) {
      onClick(event, value);
      if (event.isDefaultPrevented()) {
        return;
      }
    }
    if (onChange) {
      onChange(event, value);
    }
  };
  return React.createElement(ButtonBase_default, _extends({
    className: clsx(classes.root, className, disabled && classes.disabled, selected && classes.selected, size !== "medium" && classes["size".concat(capitalize(size))]),
    disabled,
    focusRipple: !disableFocusRipple,
    ref,
    onClick: handleChange,
    onChange,
    value,
    "aria-pressed": selected
  }, other), React.createElement("span", {
    className: classes.label
  }, children));
});
true ? ToggleButton.propTypes = {
  /**
   * The content of the button.
   */
  children: PropTypes.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: PropTypes.object.isRequired,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * If `true`, the button will be disabled.
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, the  keyboard focus ripple will be disabled.
   */
  disableFocusRipple: PropTypes.bool,
  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: PropTypes.bool,
  /**
   * @ignore
   */
  onChange: PropTypes.func,
  /**
   * @ignore
   */
  onClick: PropTypes.func,
  /**
   * If `true`, the button will be rendered in an active state.
   */
  selected: PropTypes.bool,
  /**
   * @ignore
   */
  size: PropTypes.oneOf(["small", "medium", "large"]),
  /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */
  value: PropTypes.any.isRequired
} : void 0;
var ToggleButton$1 = withStyles_default(styles$1, {
  name: "MuiToggleButton"
})(ToggleButton);
var reactIs = { exports: {} };
var reactIs_development = {};
var hasRequiredReactIs_development;
function requireReactIs_development() {
  if (hasRequiredReactIs_development)
    return reactIs_development;
  hasRequiredReactIs_development = 1;
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      var REACT_FRAGMENT_TYPE = 60107;
      var REACT_STRICT_MODE_TYPE = 60108;
      var REACT_PROFILER_TYPE = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      var REACT_SUSPENSE_TYPE = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
        REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
        REACT_PROFILER_TYPE = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        symbolFor("react.scope");
        symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var enableScopeAPI = false;
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      var hasWarnedAboutDeprecatedIsConcurrentMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isConcurrentMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
            hasWarnedAboutDeprecatedIsConcurrentMode = true;
            console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
          }
        }
        return false;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }
  return reactIs_development;
}
if (false) {
  reactIs.exports = requireReactIs_production_min();
} else {
  reactIs.exports = requireReactIs_development();
}
var reactIsExports = reactIs.exports;
function isValueSelected(value, candidate) {
  if (candidate === void 0 || value === void 0) {
    return false;
  }
  if (Array.isArray(candidate)) {
    return candidate.indexOf(value) >= 0;
  }
  return value === candidate;
}
var styles2 = function styles3(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: "inline-flex",
      borderRadius: theme.shape.borderRadius
    },
    /* Styles applied to the root element if `orientation="vertical"`. */
    vertical: {
      flexDirection: "column"
    },
    /* Styles applied to the children. */
    grouped: {},
    /* Styles applied to the children if `orientation="horizontal"`. */
    groupedHorizontal: {
      "&:not(:first-child)": {
        marginLeft: -1,
        borderLeft: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      "&:not(:last-child)": {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      }
    },
    /* Styles applied to the children if `orientation="vertical"`. */
    groupedVertical: {
      "&:not(:first-child)": {
        marginTop: -1,
        borderTop: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0
      },
      "&:not(:last-child)": {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      }
    }
  };
};
var ToggleButtonGroup = React.forwardRef(function ToggleButton3(props, ref) {
  var children = props.children, classes = props.classes, className = props.className, _props$exclusive = props.exclusive, exclusive = _props$exclusive === void 0 ? false : _props$exclusive, onChange = props.onChange, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? "horizontal" : _props$orientation, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, value = props.value, other = _objectWithoutProperties(props, ["children", "classes", "className", "exclusive", "onChange", "orientation", "size", "value"]);
  var handleChange = function handleChange2(event, buttonValue) {
    if (!onChange) {
      return;
    }
    var index = value && value.indexOf(buttonValue);
    var newValue;
    if (value && index >= 0) {
      newValue = value.slice();
      newValue.splice(index, 1);
    } else {
      newValue = value ? value.concat(buttonValue) : [buttonValue];
    }
    onChange(event, newValue);
  };
  var handleExclusiveChange = function handleExclusiveChange2(event, buttonValue) {
    if (!onChange) {
      return;
    }
    onChange(event, value === buttonValue ? null : buttonValue);
  };
  return React.createElement("div", _extends({
    role: "group",
    className: clsx(classes.root, className, orientation === "vertical" && classes.vertical),
    ref
  }, other), React.Children.map(children, function(child) {
    if (!React.isValidElement(child)) {
      return null;
    }
    if (true) {
      if (reactIsExports.isFragment(child)) {
        console.error(["Material-UI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
      }
    }
    return React.cloneElement(child, {
      className: clsx(classes.grouped, classes["grouped".concat(capitalize(orientation))], child.props.className),
      onChange: exclusive ? handleExclusiveChange : handleChange,
      selected: child.props.selected === void 0 ? isValueSelected(child.props.value, value) : child.props.selected,
      size: child.props.size || size
    });
  }));
});
true ? ToggleButtonGroup.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * The content of the button.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * If `true`, only allow one of the child ToggleButton values to be selected.
   */
  exclusive: PropTypes.bool,
  /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: PropTypes.func,
  /**
   * The group orientation (layout flow direction).
   */
  orientation: PropTypes.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the buttons.
   */
  size: PropTypes.oneOf(["large", "medium", "small"]),
  /**
   * The currently selected value within the group or an array of selected
   * values when `exclusive` is false.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: PropTypes.any
} : void 0;
var ToggleButtonGroup$1 = withStyles_default(styles2, {
  name: "MuiToggleButtonGroup"
})(ToggleButtonGroup);
var useStyles$g = makeStyles_default((theme) => ({
  style: {
    minWidth: "32px",
    lineHeight: 1.25,
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : theme.palette.primary.light,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : "white",
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough),
    "&:hover": {
      backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : theme.palette.primary.main,
      color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : "white",
      fontSize: ({ fontSize }) => fontSize ? fontSize : null,
      fontStyle: ({ italic }) => italic ? "italic" : null,
      fontWeight: ({ bold }) => bold ? "bold" : null,
      textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
    }
  },
  selected: {
    minWidth: "32px",
    lineHeight: 1.25,
    backgroundColor: theme.palette.secondary.light,
    color: "white",
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough),
    "&:hover": {
      backgroundColor: theme.palette.secondary.main,
      color: "white",
      fontSize: ({ fontSize }) => fontSize ? fontSize : null,
      fontStyle: ({ italic }) => italic ? "italic" : null,
      fontWeight: ({ bold }) => bold ? "bold" : null,
      textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
    }
  },
  toolbarAction: {
    display: "flex",
    flexDirection: "row",
    flexGrow: 1
  },
  placeholder: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    border: "1px solid whitesmoke",
    borderRadius: "5px",
    height: "inherit",
    width: "20px"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  },
  icon: {
    marginRight: ({ iconOnly }) => iconOnly ? theme.spacing(0) : theme.spacing(2)
  }
}));
var isErrorPayload$6 = (payload) => payload.__typename === "ErrorPayload";
var ToolbarActionWidget = ({
  editingContextId,
  representationId,
  toolbarActions,
  containerId,
  toolbarAction
}) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const initialState = {
    buttonLabel: toolbarAction.buttonLabel,
    imageURL: toolbarAction.imageURL,
    validImage: false,
    message: null,
    selected: false
  };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const props = {
    backgroundColor: ((_a = toolbarAction.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = toolbarAction.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = toolbarAction.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = toolbarAction.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = toolbarAction.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = toolbarAction.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = toolbarAction.style) == null ? void 0 : _g.strikeThrough) ?? null,
    iconOnly: state.buttonLabel ? false : true
  };
  const classes = useStyles$g(props);
  const { httpOrigin } = (0, import_react2.useContext)(ServerContext);
  const { selection, setSelection } = useSelection();
  const onErrorLoadingImage = () => {
    setState((prevState) => {
      return {
        ...prevState,
        validImage: false
      };
    });
  };
  (0, import_react2.useEffect)(() => {
    let newURL = null;
    let validURL = true;
    if (!toolbarAction.imageURL) {
      validURL = false;
    } else if (toolbarAction.imageURL.startsWith("http://") || toolbarAction.imageURL.startsWith("https://")) {
      newURL = toolbarAction.imageURL;
    } else {
      newURL = httpOrigin + toolbarAction.imageURL;
    }
    const buttonLabel = toolbarAction.buttonLabel;
    const isButtonLabelBlank = buttonLabel == null || buttonLabel.trim() === "";
    let newButtonLabel = null;
    if (validURL && isButtonLabelBlank) {
      newButtonLabel = null;
    } else if (!isButtonLabelBlank && !buttonLabel.startsWith("aql:")) {
      newButtonLabel = buttonLabel;
    } else {
      newButtonLabel = "Lorem";
    }
    setState((prevState) => {
      return {
        ...prevState,
        buttonLabel: newButtonLabel,
        imageURL: newURL,
        validImage: validURL
      };
    });
  }, [toolbarAction.imageURL, toolbarAction.buttonLabel]);
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === toolbarAction.id)) {
      ref.current.focus();
      setState((prevState) => {
        return {
          ...prevState,
          selected: true
        };
      });
    } else {
      setState((prevState) => {
        return {
          ...prevState,
          selected: false
        };
      });
    }
  }, [selection, toolbarAction]);
  const [
    deleteToolbarAction,
    { loading: deleteToolbarActionLoading, data: deleteToolbarActionData, error: deleteToolbarActionError }
  ] = useMutation(
    deleteToolbarActionMutation
  );
  (0, import_react2.useEffect)(() => {
    if (!deleteToolbarActionLoading) {
      if (deleteToolbarActionError) {
        setState((prevState) => {
          return {
            ...prevState,
            message: deleteToolbarActionError.message
          };
        });
      }
      if (deleteToolbarActionData) {
        const { deleteToolbarAction: deleteToolbarAction2 } = deleteToolbarActionData;
        if (isErrorPayload$6(deleteToolbarAction2)) {
          setState((prevState) => {
            return {
              ...prevState,
              message: deleteToolbarAction2.message
            };
          });
        }
      }
    }
  }, [deleteToolbarActionLoading, deleteToolbarActionData, deleteToolbarActionError]);
  const [
    moveToolbarAction,
    { loading: moveToolbarActionLoading, data: moveToolbarActionData, error: moveToolbarActionError }
  ] = useMutation(moveToolbarActionMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveToolbarActionLoading) {
      if (moveToolbarActionError) {
        setState((prevState) => {
          return {
            ...prevState,
            message: moveToolbarActionError.message
          };
        });
      }
      if (moveToolbarActionData) {
        const { moveToolbarAction: moveToolbarAction2 } = moveToolbarActionData;
        if (isErrorPayload$6(moveToolbarAction2)) {
          setState((prevState) => {
            return {
              ...prevState,
              message: moveToolbarAction2.message
            };
          });
        }
      }
    }
  }, [moveToolbarActionLoading, moveToolbarActionData, moveToolbarActionError]);
  const handleDragStart = (event) => {
    event.dataTransfer.setData("draggedElementId", toolbarAction.id);
    event.dataTransfer.setData("draggedElementType", "ToolbarActionWidget");
    event.stopPropagation();
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    onDropBefore(event, toolbarAction);
  };
  const onDropBefore = (event, toolbarAction2) => {
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "ToolbarActionWidget") {
      return;
    }
    let index = toolbarActions.indexOf(toolbarAction2);
    if (index <= 0) {
      index = 0;
    }
    const movedToolbarActionIndex = toolbarActions.findIndex((tba) => tba.id === id);
    if (movedToolbarActionIndex > -1 && movedToolbarActionIndex < index) {
      index--;
    }
    const moveToolbarActionInput = {
      id: crypto.randomUUID(),
      editingContextId,
      representationId,
      containerId,
      toolbarActionId: id,
      index
    };
    const moveToolbarActionVariables = { input: moveToolbarActionInput };
    moveToolbarAction({ variables: moveToolbarActionVariables });
  };
  const handleClick = (event) => {
    const newSelection = {
      entries: [
        {
          id: toolbarAction.id,
          label: toolbarAction.label,
          kind: `siriusComponents://semantic?domain=view&entity=${toolbarAction.__typename}Description`
        }
      ]
    };
    setSelection(newSelection);
    event.stopPropagation();
  };
  const handleDelete = (event) => {
    event.preventDefault();
    if (event.key === "Delete") {
      const deleteToolbarActionInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        toolbarActionId: toolbarAction.id
      };
      const deleteToolbarActionVariables = { input: deleteToolbarActionInput };
      deleteToolbarAction({ variables: deleteToolbarActionVariables });
      event.stopPropagation();
    }
  };
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.toolbarAction, children: [
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": `ToolbarAction-DropArea-${toolbarAction.id}`,
        className: classes.placeholder,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop
      }
    ),
    (0, import_jsx_runtime.jsx)("div", { onClick: handleClick, onKeyDown: handleDelete, draggable: "true", onDragStart: handleDragStart, children: (0, import_jsx_runtime.jsxs)(
      Button_default,
      {
        "data-testid": toolbarAction.label,
        classes: state.selected ? { root: classes.selected } : { root: classes.style },
        variant: "contained",
        onFocus: () => setState((prevState) => {
          return {
            ...prevState,
            selected: true
          };
        }),
        onBlur: () => setState((prevState) => {
          return {
            ...prevState,
            selected: false
          };
        }),
        ref,
        children: [
          state.validImage && state.imageURL ? (0, import_jsx_runtime.jsx)(
            "img",
            {
              className: classes.icon,
              width: "16",
              height: "16",
              alt: toolbarAction.label,
              src: state.imageURL,
              onError: onErrorLoadingImage
            }
          ) : null,
          state.buttonLabel
        ]
      }
    ) }),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message: state.message,
        open: !!state.message,
        onClose: () => setState((prevState) => {
          return {
            ...prevState,
            message: null
          };
        })
      }
    )
  ] });
};
var useToolbarActionsStyles = makeStyles_default((theme) => ({
  toolbar: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "flex-end"
  },
  toolbarAction: {
    whiteSpace: "nowrap"
  },
  toolbarActionDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    border: "1px solid whitesmoke",
    borderRadius: "5px",
    width: "20px",
    height: "30px"
  },
  newToolbarAction: {
    paddingLeft: theme.spacing(1)
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  }
}));
var isErrorPayload$5 = (payload) => payload.__typename === "ErrorPayload";
var ToolbarActions = ({
  editingContextId,
  representationId,
  formDescriptionEditor,
  toolbarActions,
  containerId
}) => {
  const classes = useToolbarActionsStyles();
  const [message, setMessage] = (0, import_react2.useState)(null);
  const [
    addToolbarAction,
    { loading: addToolbarActionLoading, data: addToolbarActionData, error: addToolbarActionError }
  ] = useMutation(addToolbarActionMutation);
  (0, import_react2.useEffect)(() => {
    if (!addToolbarActionLoading) {
      if (addToolbarActionError) {
        setMessage(addToolbarActionError.message);
      }
      if (addToolbarActionData) {
        const { addToolbarAction: addToolbarAction2 } = addToolbarActionData;
        if (isErrorPayload$5(addToolbarAction2)) {
          setMessage(addToolbarAction2.message);
        }
      }
    }
  }, [addToolbarActionLoading, addToolbarActionData, addToolbarActionError]);
  const [
    moveToolbarAction,
    { loading: moveToolbarActionLoading, data: moveToolbarActionData, error: moveToolbarActionError }
  ] = useMutation(moveToolbarActionMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveToolbarActionLoading) {
      if (moveToolbarActionError) {
        setMessage(moveToolbarActionError.message);
      }
      if (moveToolbarActionData) {
        const { moveToolbarAction: moveToolbarAction2 } = moveToolbarActionData;
        if (isErrorPayload$5(moveToolbarAction2)) {
          setMessage(moveToolbarAction2.message);
        }
      }
    }
  }, [moveToolbarActionLoading, moveToolbarActionData, moveToolbarActionError]);
  const handleAddToolbarAction = () => {
    const addToolbarActionInput = {
      id: crypto.randomUUID(),
      editingContextId,
      representationId,
      containerId
    };
    const addToolbarActionVariables = { input: addToolbarActionInput };
    addToolbarAction({ variables: addToolbarActionVariables });
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "ToolbarActionWidget") {
      return;
    }
    let index = toolbarActions.length;
    if (toolbarActions.find((tba) => tba.id === id)) {
      index--;
    }
    const moveToolbarActionInput = {
      id: crypto.randomUUID(),
      editingContextId,
      representationId,
      containerId,
      toolbarActionId: id,
      index
    };
    const moveToolbarActionVariables = { input: moveToolbarActionInput };
    moveToolbarAction({ variables: moveToolbarActionVariables });
  };
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.toolbar, children: [
    toolbarActions.map((toolbarAction) => (0, import_jsx_runtime.jsx)("div", { className: classes.toolbarAction, children: (0, import_jsx_runtime.jsx)(
      ToolbarActionWidget,
      {
        "data-testid": toolbarAction.id,
        editingContextId,
        representationId,
        formDescriptionEditor,
        toolbarActions,
        containerId,
        toolbarAction
      }
    ) }, toolbarAction.id)),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": `ToolbarActions-DropArea-${containerId}`,
        className: classes.toolbarActionDropArea,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop
      }
    ),
    (0, import_jsx_runtime.jsx)("div", { className: classes.newToolbarAction, children: (0, import_jsx_runtime.jsx)(Tooltip_default, { title: "Add new Toolbar Action", arrow: true, "data-testid": `ToolbarActions-NewAction-${containerId}`, children: (0, import_jsx_runtime.jsx)(IconButton_default, { size: "small", "aria-label": "add", color: "primary", onClick: handleAddToolbarAction, children: (0, import_jsx_runtime.jsx)(import_Add.default, {}) }) }) }),
    (0, import_jsx_runtime.jsx)(Toast, { message, open: !!message, onClose: () => setMessage(null) })
  ] });
};
var useStyles$f = makeStyles_default((theme) => ({
  selected: {
    color: theme.palette.primary.main
  },
  chart: {
    overflowX: "auto"
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var BarChartWidget = ({ widget }) => {
  const classes = useStyles$f();
  const barChartWidget = widget.chart;
  const chart = {
    label: "Frequency",
    entries: [
      { key: "A", value: 0.08167 },
      { key: "B", value: 0.01492 },
      { key: "C", value: 0.02782 },
      { key: "D", value: 0.04253 },
      { key: "E", value: 0.12702 },
      { key: "F", value: 0.02288 },
      { key: "G", value: 0.02015 },
      { key: "H", value: 0.06094 },
      { key: "I", value: 0.06966 },
      { key: "J", value: 153e-5 },
      { key: "K", value: 772e-5 },
      { key: "L", value: 0.04025 },
      { key: "M", value: 0.02406 },
      { key: "N", value: 0.06749 },
      { key: "O", value: 0.07507 },
      { key: "P", value: 0.01929 },
      { key: "Q", value: 95e-5 },
      { key: "R", value: 0.05987 },
      { key: "S", value: 0.06327 },
      { key: "T", value: 0.09056 },
      { key: "U", value: 0.02758 },
      { key: "V", value: 978e-5 },
      { key: "W", value: 0.0236 },
      { key: "X", value: 15e-4 },
      { key: "Y", value: 0.01974 },
      { key: "Z", value: 74e-5 }
    ],
    style: barChartWidget.style,
    width: barChartWidget.width,
    height: barChartWidget.height
  };
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)(
    "div",
    {
      "data-testid": barChartWidget.label,
      onFocus: () => setSelected(true),
      onBlur: () => setSelected(false),
      ref,
      tabIndex: 0,
      children: [
        (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
          (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
          widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
        ] }),
        (0, import_jsx_runtime.jsx)("div", { className: classes.chart, children: (0, import_jsx_runtime.jsx)(BarChart, { chart }) })
      ]
    }
  );
};
var useStyles$e = makeStyles_default((theme) => ({
  style: {
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : theme.palette.primary.light,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : "white",
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough),
    "&:hover": {
      backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : theme.palette.primary.main,
      color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : "white",
      fontSize: ({ fontSize }) => fontSize ? fontSize : null,
      fontStyle: ({ italic }) => italic ? "italic" : null,
      fontWeight: ({ bold }) => bold ? "bold" : null,
      textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
    }
  },
  icon: {
    marginRight: ({ iconOnly }) => iconOnly ? theme.spacing(0) : theme.spacing(2)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var ButtonWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const initialState = {
    buttonLabel: widget.buttonLabel,
    imageURL: widget.imageURL,
    validImage: false,
    selected: false
  };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const props = {
    backgroundColor: ((_a = widget.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = widget.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = widget.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = widget.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = widget.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = widget.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = widget.style) == null ? void 0 : _g.strikeThrough) ?? null,
    iconOnly: state.buttonLabel ? false : true
  };
  const classes = useStyles$e(props);
  const { httpOrigin } = (0, import_react2.useContext)(ServerContext);
  const { selection } = useSelection();
  const onErrorLoadingImage = () => {
    setState((prevState) => {
      return {
        ...prevState,
        validImage: false
      };
    });
  };
  (0, import_react2.useEffect)(() => {
    let newURL = null;
    let validURL = true;
    if (!widget.imageURL) {
      validURL = false;
    } else if (widget.imageURL.startsWith("http://") || widget.imageURL.startsWith("https://")) {
      newURL = widget.imageURL;
    } else {
      newURL = httpOrigin + widget.imageURL;
    }
    const buttonLabel = widget.buttonLabel;
    const isButtonLabelBlank = buttonLabel == null || buttonLabel.trim() === "";
    let newButtonLabel = null;
    if (validURL && isButtonLabelBlank) {
      newButtonLabel = null;
    } else if (!isButtonLabelBlank && !buttonLabel.startsWith("aql:")) {
      newButtonLabel = buttonLabel;
    } else {
      newButtonLabel = "Lorem";
    }
    setState((prevState) => {
      return {
        ...prevState,
        buttonLabel: newButtonLabel,
        imageURL: newURL,
        validImage: validURL
      };
    });
  }, [widget.imageURL, widget.buttonLabel]);
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setState((prevState) => {
        return {
          ...prevState,
          selected: true
        };
      });
    } else {
      setState((prevState) => {
        return {
          ...prevState,
          selected: false
        };
      });
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: state.selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsxs)(
      Button_default,
      {
        "data-testid": widget.label,
        classes: { root: classes.style },
        variant: "contained",
        onFocus: () => setState((prevState) => {
          return {
            ...prevState,
            selected: true
          };
        }),
        onBlur: () => setState((prevState) => {
          return {
            ...prevState,
            selected: false
          };
        }),
        ref,
        children: [
          state.validImage && state.imageURL ? (0, import_jsx_runtime.jsx)(
            "img",
            {
              className: classes.icon,
              width: "16",
              height: "16",
              alt: widget.label,
              src: state.imageURL,
              onError: onErrorLoadingImage
            }
          ) : null,
          state.buttonLabel
        ]
      }
    )
  ] });
};
var useStyles$d = makeStyles_default((theme) => ({
  style: {
    color: ({ color }) => color ? getCSSColor(color, theme) : theme.palette.primary.light,
    "&.Mui-checked": {
      color: ({ color }) => color ? getCSSColor(color, theme) : theme.palette.primary.light
    }
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var CheckboxWidget = ({ widget }) => {
  var _a, _b;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null
  };
  const classes = useStyles$d(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsx)(
    FormControlLabel_default,
    {
      labelPlacement: ((_b = widget.style) == null ? void 0 : _b.labelPlacement) ?? "end",
      label: (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
        (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
        widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
      ] }),
      control: (0, import_jsx_runtime.jsx)(
        Checkbox_default,
        {
          "data-testid": widget.label,
          checked: true,
          inputRef: ref,
          onFocus: () => setSelected(true),
          onBlur: () => setSelected(false),
          classes: { root: classes.style }
        }
      )
    }
  );
};
var useStyles$c = makeStyles_default((theme) => ({
  style: {
    color: theme.palette.secondary.main
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var CustomWidget = ({ widget }) => {
  const props = {};
  const classes = useStyles$c(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        tabIndex: 0,
        className: classes.style,
        children: (0, import_jsx_runtime.jsx)(import_Extension.default, {})
      }
    )
  ] });
};
var isKind = (value) => {
  return value === "Textfield" || value === "TextArea" || value === "Checkbox" || value === "Radio" || value === "Select" || value === "MultiSelect" || value === "Button" || value === "Label" || value === "Link" || value === "List" || value === "BarChart" || value === "PieChart" || value === "FlexboxContainer" || value === "Image" || value === "RichText" || value === "FormElementFor" || value === "FormElementIf";
};
var isGroup = (element) => {
  return element.__typename === "Group";
};
var isFlexboxContainer = (element) => {
  return element.__typename === "FlexboxContainer";
};
var isErrorPayload$4 = (payload) => payload.__typename === "ErrorPayload";
var useStyles$b = makeStyles_default((theme) => ({
  selected: {
    color: theme.palette.primary.main
  },
  containerAndLabel: {
    margin: ({ borderStyle }) => borderStyle ? theme.spacing(0.5) : 0,
    padding: ({ borderStyle }) => borderStyle ? theme.spacing(0.5) : 0,
    borderWidth: ({ borderStyle }) => (borderStyle == null ? void 0 : borderStyle.size) || 1,
    borderColor: ({ borderStyle }) => getCSSColor(borderStyle == null ? void 0 : borderStyle.color, theme) || "gray",
    borderStyle: ({ borderStyle }) => (borderStyle == null ? void 0 : borderStyle.lineStyle) || "solid",
    borderRadius: ({ borderStyle }) => (borderStyle == null ? void 0 : borderStyle.radius) || 0
  },
  container: {
    display: "flex",
    flexWrap: ({ flexWrap }) => flexWrap,
    flexDirection: ({ flexDirection }) => flexDirection,
    "& > *": {
      marginBottom: theme.spacing(0)
    },
    paddingLeft: theme.spacing(1)
  },
  bottomDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    borderRadius: "10px",
    color: "gray",
    height: "30px",
    width: "100%"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var FlexboxContainerWidget = ({
  editingContextId,
  representationId,
  formDescriptionEditor,
  page,
  widget
}) => {
  const classes = useStyles$b({
    flexDirection: widget.flexDirection,
    flexWrap: widget.flexWrap,
    borderStyle: widget.borderStyle
  });
  const initialState = { message: null, selected: false };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const { message, selected } = state;
  const { selection } = useSelection();
  const [addWidget, { loading: addWidgetLoading, data: addWidgetData, error: addWidgetError }] = useMutation(addWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!addWidgetLoading) {
      if (addWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: addWidgetError.message };
        });
      }
      if (addWidgetData) {
        const { addWidget: addWidget2 } = addWidgetData;
        if (isErrorPayload$4(addWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: addWidget2.message };
          });
        }
      }
    }
  }, [addWidgetLoading, addWidgetData, addWidgetError]);
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setState((prevState) => {
        return { ...prevState, selected: true };
      });
    } else {
      setState((prevState) => {
        return { ...prevState, selected: false };
      });
    }
  }, [selection, widget]);
  const [moveWidget, { loading: moveWidgetLoading, data: moveWidgetData, error: moveWidgetError }] = useMutation(moveWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveWidgetLoading) {
      if (moveWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: moveWidgetError.message };
        });
      }
      if (moveWidgetData) {
        const { moveWidget: moveWidget2 } = moveWidgetData;
        if (isErrorPayload$4(moveWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: moveWidget2.message };
          });
        }
      }
    }
  }, [moveWidgetLoading, moveWidgetData, moveWidgetError]);
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const { propertySectionsRegistry } = (0, import_react2.useContext)(PropertySectionContext);
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Widget") {
      return;
    }
    let index = widget.children.length || 0;
    if (isKind(id) || propertySectionsRegistry.getWidgetContributions().find((contrib) => contrib.name === id)) {
      const addWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: widget.id,
        kind: id,
        index
      };
      const addWidgetVariables = { input: addWidgetInput };
      addWidget({ variables: addWidgetVariables });
    } else {
      if (widget.children.find((w) => w.id === id)) {
        index--;
      }
      const moveWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: widget.id,
        widgetId: id,
        index
      };
      const moveWidgetVariables = { input: moveWidgetInput };
      moveWidget({ variables: moveWidgetVariables });
    }
  };
  let children = widget.children.map((childWidget) => {
    return (0, import_jsx_runtime.jsx)(
      WidgetEntry,
      {
        editingContextId,
        representationId,
        formDescriptionEditor,
        page,
        container: widget,
        widget: childWidget,
        flexDirection: widget.flexDirection,
        flexGrow: widget.flexGrow
      },
      childWidget.id
    );
  });
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.containerAndLabel, tabIndex: 0, ref, children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(
        Typography_default,
        {
          variant: "subtitle2",
          className: selected ? classes.selected : "",
          onFocus: () => setState((prevState) => {
            return { ...prevState, selected: true };
          }),
          onBlur: () => setState((prevState) => {
            return { ...prevState, selected: false };
          }),
          children: widget.label
        }
      ),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)("div", { className: classes.container, children }),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": `${widget.__typename}-Widgets-DropArea-${widget.id}`,
        className: classes.bottomDropArea,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop,
        children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "body1", children: "Drag and drop a widget here" })
      }
    ),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message,
        open: !!message,
        onClose: () => setState((prevState) => {
          return { ...prevState, message: null };
        })
      }
    )
  ] });
};
var useStyles$a = makeStyles_default((theme) => ({
  container: {
    display: "grid",
    gridTemplateColumns: ({ maxWidth }) => {
      if (maxWidth) {
        let max = maxWidth;
        if (maxWidth.match(/[0-9]$/)) {
          max = maxWidth + "px";
        }
        return `minmax(auto, ${max})`;
      } else {
        return "1fr";
      }
    }
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var ImageWidget = ({ widget }) => {
  const props = {
    maxWidth: widget.maxWidth
  };
  const classes = useStyles$a(props);
  const { httpOrigin } = (0, import_react2.useContext)(ServerContext);
  const initialState = { imageURL: widget.url, validImage: false, selected: false };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const { selection } = useSelection();
  const onErrorLoadingImage = () => {
    setState((prevState) => {
      return {
        ...prevState,
        validImage: false
      };
    });
  };
  (0, import_react2.useEffect)(() => {
    let newURL = null;
    let validURL = true;
    if (!widget.url) {
      validURL = false;
    } else if (widget.url.startsWith("http://") || widget.url.startsWith("https://")) {
      newURL = widget.url;
    } else {
      newURL = httpOrigin + widget.url;
    }
    setState((prevState) => {
      return {
        ...prevState,
        imageURL: newURL,
        validImage: validURL
      };
    });
  }, [widget.url]);
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setState((prevState) => {
        return {
          ...prevState,
          selected: true
        };
      });
    } else {
      setState((prevState) => {
        return {
          ...prevState,
          selected: false
        };
      });
    }
  }, [selection, widget]);
  let imageElement = null;
  if (state.validImage && state.imageURL) {
    imageElement = (0, import_jsx_runtime.jsx)("img", { id: widget.id, src: state.imageURL, width: "100%", onError: onErrorLoadingImage });
  } else {
    imageElement = (0, import_jsx_runtime.jsx)(import_Image.default, { style: { fontSize: 72 }, color: "secondary" });
  }
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: state.selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        onFocus: () => setState((prevState) => {
          return {
            ...prevState,
            selected: true
          };
        }),
        onBlur: () => setState((prevState) => {
          return {
            ...prevState,
            selected: false
          };
        }),
        ref,
        tabIndex: 0,
        className: classes.container,
        children: imageElement
      }
    )
  ] });
};
var useStyles$9 = makeStyles_default((theme) => ({
  style: {
    color: ({ color }) => color ? getCSSColor(color, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var LabelWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$9(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      Typography_default,
      {
        ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        tabIndex: 0,
        className: classes.style,
        children: "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
      }
    )
  ] });
};
var useStyles$8 = makeStyles_default((theme) => ({
  style: {
    color: ({ color }) => color ? getCSSColor(color, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var LinkWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$8(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsx)("div", { className: selected ? classes.selected : "", children: (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
    (0, import_jsx_runtime.jsx)(
      Link_default,
      {
        ref,
        className: classes.style,
        onClick: (event) => {
          event.preventDefault();
          setSelected(true);
        },
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        tabIndex: 0,
        href: "#",
        rel: "noopener noreferrer",
        target: "_blank",
        children: widget.label
      }
    ),
    widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
  ] }) });
};
var useStyles$7 = makeStyles_default((theme) => ({
  style: {
    color: ({ color }) => color ? getCSSColor(color, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  icon: {
    width: "16px",
    height: "16px",
    marginRight: theme.spacing(2)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var ListWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$7(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [widget, selection]);
  return (0, import_jsx_runtime.jsxs)("div", { onFocus: () => setSelected(true), onBlur: () => setSelected(false), ref, tabIndex: 0, children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(Table_default, { size: "small", children: (0, import_jsx_runtime.jsxs)(TableBody_default, { children: [
      (0, import_jsx_runtime.jsxs)(TableRow_default, { children: [
        (0, import_jsx_runtime.jsxs)(TableCell_default, { children: [
          " ",
          (0, import_jsx_runtime.jsxs)(Typography_default, { color: "textPrimary", className: classes.style, children: [
            (0, import_jsx_runtime.jsx)(import_Image.default, { className: classes.icon }),
            "Value 1"
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(TableCell_default, { align: "right", children: (0, import_jsx_runtime.jsx)(IconButton_default, { "aria-label": "deleteListItem", children: (0, import_jsx_runtime.jsx)(import_Delete.default, {}) }) })
      ] }),
      (0, import_jsx_runtime.jsxs)(TableRow_default, { children: [
        (0, import_jsx_runtime.jsxs)(TableCell_default, { children: [
          " ",
          (0, import_jsx_runtime.jsxs)(Typography_default, { color: "textPrimary", className: classes.style, children: [
            (0, import_jsx_runtime.jsx)(import_Image.default, { className: classes.icon }),
            "Value 2"
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(TableCell_default, { align: "right", children: (0, import_jsx_runtime.jsx)(IconButton_default, { "aria-label": "deleteListItem", children: (0, import_jsx_runtime.jsx)(import_Delete.default, {}) }) })
      ] }),
      (0, import_jsx_runtime.jsxs)(TableRow_default, { children: [
        (0, import_jsx_runtime.jsxs)(TableCell_default, { children: [
          " ",
          (0, import_jsx_runtime.jsxs)(Typography_default, { color: "textPrimary", className: classes.style, children: [
            (0, import_jsx_runtime.jsx)(import_Image.default, { className: classes.icon }),
            "Value 3"
          ] })
        ] }),
        (0, import_jsx_runtime.jsx)(TableCell_default, { align: "right", children: (0, import_jsx_runtime.jsx)(IconButton_default, { "aria-label": "deleteListItem", children: (0, import_jsx_runtime.jsx)(import_Delete.default, {}) }) })
      ] })
    ] }) })
  ] });
};
var useStyles$6 = makeStyles_default((theme) => ({
  style: {
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : null,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var MultiSelectWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const props = {
    backgroundColor: ((_a = widget.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = widget.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = widget.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = widget.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = widget.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = widget.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = widget.style) == null ? void 0 : _g.strikeThrough) ?? null
  };
  const classes = useStyles$6(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    let cleanup = void 0;
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      const timeoutId = setTimeout(function() {
        ref.current.focus();
      }, 50);
      cleanup = () => clearTimeout(timeoutId);
      setSelected(true);
    } else {
      setSelected(false);
    }
    return cleanup;
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsxs)(
      Select_default,
      {
        "data-testid": widget.label,
        label: widget.label,
        multiple: true,
        fullWidth: true,
        value: ["value1", "value3"],
        renderValue: () => "Value 1, Value 3",
        inputRef: ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        inputProps: widget.style ? {
          className: classes.style
        } : {},
        children: [
          (0, import_jsx_runtime.jsxs)(MenuItem_default, { value: "value1", children: [
            (0, import_jsx_runtime.jsx)(Checkbox_default, { checked: true }),
            (0, import_jsx_runtime.jsx)(
              ListItemText_default,
              {
                primary: "Value 1",
                primaryTypographyProps: widget.style ? {
                  className: classes.style
                } : {}
              }
            )
          ] }, "value1"),
          (0, import_jsx_runtime.jsxs)(MenuItem_default, { value: "value2", children: [
            (0, import_jsx_runtime.jsx)(Checkbox_default, { checked: false }),
            (0, import_jsx_runtime.jsx)(
              ListItemText_default,
              {
                primary: "Value 2",
                primaryTypographyProps: widget.style ? {
                  className: classes.style
                } : {}
              }
            )
          ] }, "value2"),
          (0, import_jsx_runtime.jsxs)(MenuItem_default, { value: "value3", children: [
            (0, import_jsx_runtime.jsx)(Checkbox_default, { checked: true }),
            (0, import_jsx_runtime.jsx)(
              ListItemText_default,
              {
                primary: "Value 3",
                primaryTypographyProps: widget.style ? {
                  className: classes.style
                } : {}
              }
            )
          ] }, "value3")
        ]
      }
    )
  ] });
};
var useStyles$5 = makeStyles_default((theme) => ({
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var PieChartWidget = ({ widget }) => {
  const classes = useStyles$5();
  const pieChartWidget = widget.chart;
  const chart = {
    entries: [
      { key: "<5", value: 19912018 },
      { key: "5-9", value: 20501982 },
      { key: "10-14", value: 20679786 },
      { key: "15-19", value: 21354481 },
      { key: "20-24", value: 22604232 },
      { key: "25-29", value: 21698010 },
      { key: "30-34", value: 21183639 },
      { key: "35-39", value: 19855782 },
      { key: "40-44", value: 20796128 },
      { key: "45-49", value: 21370368 },
      { key: "50-54", value: 22525490 },
      { key: "55-59", value: 21001947 },
      { key: "60-64", value: 18415681 },
      { key: "65-69", value: 14547446 },
      { key: "70-74", value: 10587721 },
      { key: "75-79", value: 7730129 },
      { key: "80-84", value: 5811429 },
      { key: "≥85", value: 5938752 }
    ],
    style: pieChartWidget.style
  };
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)(
    "div",
    {
      "data-testid": pieChartWidget.label,
      onFocus: () => setSelected(true),
      onBlur: () => setSelected(false),
      ref,
      tabIndex: 0,
      children: [
        (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
          (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: pieChartWidget.label }),
          widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
        ] }),
        (0, import_jsx_runtime.jsx)(PieChart, { width: 300, height: 300, chart })
      ]
    }
  );
};
var useStyles$4 = makeStyles_default((theme) => ({
  style: {
    color: ({ color }) => color ? getCSSColor(color, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var RadioWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$4(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsxs)(
      RadioGroup_default,
      {
        "data-testid": widget.label,
        "aria-label": widget.label,
        name: widget.label,
        defaultValue: "value2",
        row: true,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        children: [
          (0, import_jsx_runtime.jsx)(
            FormControlLabel_default,
            {
              value: "value1",
              control: (0, import_jsx_runtime.jsx)(Radio_default, { color: "primary", "data-testid": "value1" }),
              label: (0, import_jsx_runtime.jsx)(
                Typography_default,
                {
                  classes: widget.style ? {
                    root: classes.style
                  } : {},
                  children: "Value 1"
                }
              ),
              checked: false
            }
          ),
          (0, import_jsx_runtime.jsx)(
            FormControlLabel_default,
            {
              value: "value2",
              control: (0, import_jsx_runtime.jsx)(Radio_default, { color: "primary", "data-testid": "value2", inputRef: ref }),
              label: (0, import_jsx_runtime.jsx)(
                Typography_default,
                {
                  classes: widget.style ? {
                    root: classes.style
                  } : {},
                  children: "Value 2"
                }
              ),
              checked: true
            }
          ),
          (0, import_jsx_runtime.jsx)(
            FormControlLabel_default,
            {
              value: "value3",
              control: (0, import_jsx_runtime.jsx)(Radio_default, { color: "primary", "data-testid": "value2" }),
              label: (0, import_jsx_runtime.jsx)(
                Typography_default,
                {
                  classes: widget.style ? {
                    root: classes.style
                  } : {},
                  children: "Value 3"
                }
              ),
              checked: false
            }
          )
        ]
      }
    )
  ] });
};
var useStyles$3 = makeStyles_default((theme) => ({
  selected: {
    color: theme.palette.primary.main
  },
  editorContainer: {
    marginTop: theme.spacing(2),
    borderRadius: "2px",
    borderColor: theme.palette.divider,
    borderWidth: "1px",
    borderStyle: "solid",
    color: theme.palette.text.primary,
    position: "relative",
    fontWeight: Number(theme.typography.fontWeightRegular),
    textAlign: "left"
  },
  paper: {
    display: "flex",
    flexDirection: "row",
    borderBottom: `1px solid ${theme.palette.divider}`,
    flexWrap: "wrap"
  },
  divider: {
    margin: theme.spacing(1, 0.5)
  },
  button: {
    color: theme.palette.primary.light,
    "&.Mui-selected": {
      color: theme.palette.primary.main
    }
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var StyledToggleButtonGroup = withStyles_default((theme) => ({
  grouped: {
    margin: theme.spacing(0.5),
    border: "none",
    "&:not(:first-child)": {
      borderRadius: theme.shape.borderRadius
    },
    "&:first-child": {
      borderRadius: theme.shape.borderRadius
    }
  }
}))(ToggleButtonGroup$1);
var RichTextWidget = ({ widget }) => {
  const classes = useStyles$3();
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsxs)("div", { onFocus: () => setSelected(true), onBlur: () => setSelected(false), ref, tabIndex: 0, children: [
      (0, import_jsx_runtime.jsxs)(Paper_default, { elevation: 0, className: classes.paper, children: [
        (0, import_jsx_runtime.jsxs)(StyledToggleButtonGroup, { size: "small", children: [
          (0, import_jsx_runtime.jsx)(
            ToggleButton$1,
            {
              classes: { root: classes.button },
              selected: true,
              disabled: false,
              value: "paragraph",
              children: (0, import_jsx_runtime.jsx)(import_Subject.default, { fontSize: "small" })
            },
            "paragraph"
          ),
          (0, import_jsx_runtime.jsx)(
            ToggleButton$1,
            {
              classes: { root: classes.button },
              selected: false,
              disabled: false,
              value: "header1",
              children: (0, import_jsx_runtime.jsx)(import_Title.default, { fontSize: "small" })
            },
            "header1"
          ),
          (0, import_jsx_runtime.jsx)(
            ToggleButton$1,
            {
              classes: { root: classes.button },
              selected: false,
              disabled: false,
              value: "bullet-list",
              children: (0, import_jsx_runtime.jsx)(import_FormatListBulleted.default, { fontSize: "small" })
            },
            "bullet-list"
          ),
          (0, import_jsx_runtime.jsx)(
            ToggleButton$1,
            {
              classes: { root: classes.button },
              selected: false,
              disabled: false,
              value: "number-list",
              children: (0, import_jsx_runtime.jsx)(import_FormatListNumbered.default, { fontSize: "small" })
            },
            "number-list"
          )
        ] }),
        (0, import_jsx_runtime.jsx)(Divider_default, { flexItem: true, orientation: "vertical", className: classes.divider }),
        (0, import_jsx_runtime.jsxs)(StyledToggleButtonGroup, { size: "small", children: [
          (0, import_jsx_runtime.jsx)(ToggleButton$1, { classes: { root: classes.button }, disabled: false, value: "bold", children: (0, import_jsx_runtime.jsx)(import_FormatBold.default, { fontSize: "small" }) }, "bold"),
          (0, import_jsx_runtime.jsx)(ToggleButton$1, { classes: { root: classes.button }, value: "italic", children: (0, import_jsx_runtime.jsx)(import_FormatItalic.default, { fontSize: "small" }) }, "italic"),
          (0, import_jsx_runtime.jsx)(ToggleButton$1, { classes: { root: classes.button }, disabled: false, value: "code", children: (0, import_jsx_runtime.jsx)(import_Code.default, { fontSize: "small" }) }, "code"),
          (0, import_jsx_runtime.jsx)(
            ToggleButton$1,
            {
              classes: { root: classes.button },
              disabled: false,
              value: "strikethrough",
              children: (0, import_jsx_runtime.jsx)(import_StrikethroughS.default, { fontSize: "small" })
            },
            "strikethrough"
          )
        ] })
      ] }),
      (0, import_jsx_runtime.jsxs)("div", { className: classes.editorContainer, children: [
        (0, import_jsx_runtime.jsx)(Typography_default, { variant: "h4", children: "Rich text document" }),
        (0, import_jsx_runtime.jsxs)(Typography_default, { variant: "body1", gutterBottom: true, children: [
          "Your ",
          (0, import_jsx_runtime.jsx)("b", { children: "rich text" }),
          "."
        ] })
      ] })
    ] })
  ] });
};
var useStyles$2 = makeStyles_default((theme) => ({
  style: {
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : null,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var SelectWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const props = {
    backgroundColor: ((_a = widget.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = widget.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = widget.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = widget.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = widget.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = widget.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = widget.style) == null ? void 0 : _g.strikeThrough) ?? null
  };
  const classes = useStyles$2(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    let cleanup = void 0;
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      const timeoutId = setTimeout(function() {
        ref.current.focus();
      }, 50);
      setSelected(true);
      cleanup = () => clearTimeout(timeoutId);
    } else {
      setSelected(false);
    }
    return cleanup;
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsxs)(
      Select_default,
      {
        "data-testid": widget.label,
        label: widget.label,
        fullWidth: true,
        value: "value1",
        inputRef: ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        inputProps: widget.style ? {
          className: classes.style
        } : {},
        children: [
          (0, import_jsx_runtime.jsx)(
            MenuItem_default,
            {
              value: "",
              classes: widget.style ? {
                root: classes.style
              } : {},
              children: (0, import_jsx_runtime.jsx)("em", { children: "None" })
            }
          ),
          (0, import_jsx_runtime.jsx)(
            MenuItem_default,
            {
              value: "value1",
              classes: widget.style ? {
                root: classes.style
              } : {},
              children: "Value 1"
            }
          ),
          (0, import_jsx_runtime.jsx)(
            MenuItem_default,
            {
              value: "value2",
              classes: widget.style ? {
                root: classes.style
              } : {},
              children: "Value 2"
            }
          ),
          (0, import_jsx_runtime.jsx)(
            MenuItem_default,
            {
              value: "value3",
              classes: widget.style ? {
                root: classes.style
              } : {},
              children: "Value 3"
            }
          )
        ]
      }
    )
  ] });
};
var useStyles$1 = makeStyles_default((theme) => ({
  style: {
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : null,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var TextAreaWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const props = {
    backgroundColor: ((_a = widget.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = widget.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = widget.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = widget.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = widget.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = widget.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = widget.style) == null ? void 0 : _g.strikeThrough) ?? null
  };
  const classes = useStyles$1(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      TextField_default,
      {
        "data-testid": widget.label,
        multiline: true,
        minRows: 3,
        fullWidth: true,
        inputRef: ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        InputProps: widget.style ? {
          className: classes.style,
          readOnly: true
        } : { readOnly: true },
        value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
      }
    )
  ] });
};
var useStyles = makeStyles_default((theme) => ({
  style: {
    backgroundColor: ({ backgroundColor }) => backgroundColor ? getCSSColor(backgroundColor, theme) : null,
    color: ({ foregroundColor }) => foregroundColor ? getCSSColor(foregroundColor, theme) : null,
    fontSize: ({ fontSize }) => fontSize ? fontSize : null,
    fontStyle: ({ italic }) => italic ? "italic" : null,
    fontWeight: ({ bold }) => bold ? "bold" : null,
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline, strikeThrough)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  }
}));
var TextfieldWidget = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f, _g;
  const props = {
    backgroundColor: ((_a = widget.style) == null ? void 0 : _a.backgroundColor) ?? null,
    foregroundColor: ((_b = widget.style) == null ? void 0 : _b.foregroundColor) ?? null,
    fontSize: ((_c = widget.style) == null ? void 0 : _c.fontSize) ?? null,
    italic: ((_d = widget.style) == null ? void 0 : _d.italic) ?? null,
    bold: ((_e = widget.style) == null ? void 0 : _e.bold) ?? null,
    underline: ((_f = widget.style) == null ? void 0 : _f.underline) ?? null,
    strikeThrough: ((_g = widget.style) == null ? void 0 : _g.strikeThrough) ?? null
  };
  const classes = useStyles(props);
  const [selected, setSelected] = (0, import_react2.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      TextField_default,
      {
        "data-testid": widget.label,
        fullWidth: true,
        inputRef: ref,
        onFocus: () => setSelected(true),
        onBlur: () => setSelected(false),
        InputProps: widget.style ? {
          className: classes.style,
          readOnly: true
        } : { readOnly: true },
        value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
      }
    )
  ] });
};
var useWidgetEntryStyles = makeStyles_default((theme) => ({
  widget: {
    display: "flex",
    flexDirection: ({ flexDirection }) => flexDirection,
    flexGrow: ({ flexGrow }) => flexGrow
  },
  widgetElement: {
    flexGrow: ({ flexGrow }) => flexGrow,
    border: "1px solid transparent",
    "&:hover": {
      borderColor: theme.palette.primary.main
    },
    "&:has($widgetElement:hover)": {
      borderStyle: "dashed"
    }
  },
  placeholder: {
    height: ({ flexDirection }) => flexDirection === "column" || flexDirection === "column-reverse" ? "10px" : "inherit",
    width: ({ flexDirection }) => flexDirection === "row" || flexDirection === "row-reverse" ? "10px" : "inherit",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    border: "1px solid whitesmoke",
    borderRadius: "5px"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  }
}));
var WidgetTooltip = withStyles_default((theme) => ({
  tooltip: {
    backgroundColor: theme.palette.primary.main,
    margin: "0px",
    borderRadius: "0px"
  }
}))(Tooltip_default);
var isErrorPayload$3 = (payload) => payload.__typename === "ErrorPayload";
var WidgetEntry = ({
  editingContextId,
  representationId,
  formDescriptionEditor,
  page,
  container,
  widget,
  flexDirection,
  flexGrow
}) => {
  const classes = useWidgetEntryStyles({ flexDirection, flexGrow, kind: widget.__typename });
  const initialState = { message: null };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const { message } = state;
  const { propertySectionsRegistry } = (0, import_react2.useContext)(PropertySectionContext);
  const { setSelection } = useSelection();
  const { showDeletionConfirmation } = useDeletionConfirmationDialog();
  const [addWidget, { loading: addWidgetLoading, data: addWidgetData, error: addWidgetError }] = useMutation(addWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!addWidgetLoading) {
      if (addWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: addWidgetError.message };
        });
      }
      if (addWidgetData) {
        const { addWidget: addWidget2 } = addWidgetData;
        if (isErrorPayload$3(addWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: addWidget2.message };
          });
        }
      }
    }
  }, [addWidgetLoading, addWidgetData, addWidgetError]);
  const [deleteWidget, { loading: deleteWidgetLoading, data: deleteWidgetData, error: deleteWidgetError }] = useMutation(deleteWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!deleteWidgetLoading) {
      if (deleteWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: deleteWidgetError.message };
        });
      }
      if (deleteWidgetData) {
        const { deleteWidget: deleteWidget2 } = deleteWidgetData;
        if (isErrorPayload$3(deleteWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: deleteWidget2.message };
          });
        }
      }
    }
  }, [deleteWidgetLoading, deleteWidgetData, deleteWidgetError]);
  const [moveWidget, { loading: moveWidgetLoading, data: moveWidgetData, error: moveWidgetError }] = useMutation(moveWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveWidgetLoading) {
      if (moveWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: moveWidgetError.message };
        });
      }
      if (moveWidgetData) {
        const { moveWidget: moveWidget2 } = moveWidgetData;
        if (isErrorPayload$3(moveWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: moveWidget2.message };
          });
        }
      }
    }
  }, [moveWidgetLoading, moveWidgetData, moveWidgetError]);
  const handleClick = (event) => {
    const newSelection = {
      entries: [
        {
          id: widget.id,
          label: widget.label,
          kind: `siriusComponents://semantic?domain=view&entity=${widget.__typename}Description`
        }
      ]
    };
    setSelection(newSelection);
    event.stopPropagation();
  };
  const handleDelete = (event) => {
    event.preventDefault();
    if (event.key === "Delete") {
      const deleteWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        widgetId: widget.id
      };
      const deleteWidgetVariables = { input: deleteWidgetInput };
      showDeletionConfirmation(() => {
        deleteWidget({ variables: deleteWidgetVariables });
      });
      event.stopPropagation();
    }
  };
  const handleDragStart = (event) => {
    event.dataTransfer.setData("draggedElementId", widget.id);
    event.dataTransfer.setData("draggedElementType", "Widget");
    event.stopPropagation();
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    onDropBefore(event, widget);
  };
  const onDropBefore = (event, widget2) => {
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Widget") {
      return;
    }
    let children = null;
    if (isGroup(container)) {
      children = container.widgets;
    } else if (isFlexboxContainer(container)) {
      children = container.children;
    }
    let index = children.indexOf(widget2);
    if (index <= 0) {
      index = 0;
    }
    if (isKind(id) || propertySectionsRegistry.getWidgetContributions().find((contrib) => contrib.name === id)) {
      const addWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: container.id,
        kind: id,
        index
      };
      const addWidgetVariables = { input: addWidgetInput };
      addWidget({ variables: addWidgetVariables });
    } else {
      const movedWidgetIndex = children.findIndex((w) => w.id === id);
      if (movedWidgetIndex > -1 && movedWidgetIndex < index) {
        index--;
      }
      const moveWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: container.id,
        widgetId: id,
        index
      };
      const moveWidgetVariables = { input: moveWidgetInput };
      moveWidget({ variables: moveWidgetVariables });
    }
  };
  let widgetElement = null;
  if (widget.__typename === "Button") {
    widgetElement = (0, import_jsx_runtime.jsx)(ButtonWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Checkbox") {
    widgetElement = (0, import_jsx_runtime.jsx)(CheckboxWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "FlexboxContainer") {
    widgetElement = (0, import_jsx_runtime.jsx)(
      FlexboxContainerWidget,
      {
        "data-testid": widget.id,
        editingContextId,
        representationId,
        formDescriptionEditor,
        page,
        container,
        widget
      }
    );
  } else if (widget.__typename === "FormDescriptionEditorIf") {
    const ifPreview = {
      ...widget,
      flexDirection: "column",
      flexWrap: "nowrap",
      flexGrow: 1,
      children: widget.children
    };
    widgetElement = (0, import_jsx_runtime.jsx)(
      FlexboxContainerWidget,
      {
        "data-testid": widget.id,
        editingContextId,
        representationId,
        formDescriptionEditor,
        page,
        container,
        widget: ifPreview
      }
    );
  } else if (widget.__typename === "FormDescriptionEditorFor") {
    const forPreview = {
      ...widget,
      flexDirection: "column",
      flexWrap: "nowrap",
      flexGrow: 1,
      children: widget.children
    };
    widgetElement = (0, import_jsx_runtime.jsx)(
      FlexboxContainerWidget,
      {
        "data-testid": widget.id,
        editingContextId,
        representationId,
        formDescriptionEditor,
        page,
        container,
        widget: forPreview
      }
    );
  } else if (widget.__typename === "Image") {
    widgetElement = (0, import_jsx_runtime.jsx)(ImageWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "LabelWidget") {
    widgetElement = (0, import_jsx_runtime.jsx)(LabelWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Link") {
    widgetElement = (0, import_jsx_runtime.jsx)(LinkWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "List") {
    widgetElement = (0, import_jsx_runtime.jsx)(ListWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "MultiSelect") {
    widgetElement = (0, import_jsx_runtime.jsx)(MultiSelectWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Radio") {
    widgetElement = (0, import_jsx_runtime.jsx)(RadioWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "RichText") {
    widgetElement = (0, import_jsx_runtime.jsx)(RichTextWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Select") {
    widgetElement = (0, import_jsx_runtime.jsx)(SelectWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Textarea") {
    widgetElement = (0, import_jsx_runtime.jsx)(TextAreaWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "Textfield") {
    widgetElement = (0, import_jsx_runtime.jsx)(TextfieldWidget, { "data-testid": widget.id, widget, onDropBefore });
  } else if (widget.__typename === "ChartWidget") {
    const chartWidget = widget;
    if (chartWidget.chart.metadata.kind === "BarChart") {
      widgetElement = (0, import_jsx_runtime.jsx)(BarChartWidget, { "data-testid": widget.id, widget, onDropBefore });
    } else if (chartWidget.chart.metadata.kind === "PieChart") {
      widgetElement = (0, import_jsx_runtime.jsx)(PieChartWidget, { "data-testid": widget.id, widget, onDropBefore });
    }
  } else {
    const PreviewComponent = propertySectionsRegistry.getPreviewComponent(widget);
    if (PreviewComponent) {
      widgetElement = (0, import_jsx_runtime.jsx)(PreviewComponent, { "data-testid": widget.id, widget, onDropBefore });
    } else if (propertySectionsRegistry.getComponent(widget)) {
      widgetElement = (0, import_jsx_runtime.jsx)(CustomWidget, { "data-testid": widget.id, widget, onDropBefore });
    } else {
      console.error(`Unsupported widget type ${widget.__typename}`);
    }
  }
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.widget, children: [
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": `WidgetEntry-DropArea-${widget.id}`,
        className: classes.placeholder,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop
      }
    ),
    (0, import_jsx_runtime.jsx)(WidgetTooltip, { title: widget.__typename, placement: "top-end", children: (0, import_jsx_runtime.jsx)(
      "div",
      {
        className: classes.widgetElement,
        onClick: handleClick,
        tabIndex: 0,
        onKeyDown: handleDelete,
        draggable: "true",
        onDragStart: handleDragStart,
        children: widgetElement
      }
    ) }),
    (0, import_jsx_runtime.jsx)(Toast, { message, open: !!message, onClose: () => setState({ message: null }) })
  ] });
};
var useGroupEntryStyles = makeStyles_default((theme) => ({
  group: {
    display: "flex",
    flexDirection: "column",
    flexGrow: 1,
    borderWidth: ({ borderStyle }) => borderStyle ? borderStyle.size : 1,
    borderColor: ({ borderStyle }) => borderStyle ? getCSSColor(borderStyle == null ? void 0 : borderStyle.color, theme) || "transparent" : "gray",
    borderStyle: ({ borderStyle }) => (borderStyle == null ? void 0 : borderStyle.lineStyle) || "solid",
    borderRadius: ({ borderStyle }) => borderStyle ? borderStyle.radius : 10,
    paddingTop: "1px",
    "&:hover": {
      borderColor: theme.palette.primary.main
    },
    "&:has($verticalSections:hover)": {
      borderStyle: "dashed"
    },
    "&:has($adaptableSections:hover)": {
      borderStyle: "dashed"
    }
  },
  labelAndToolbar: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    paddingLeft: theme.spacing(1),
    overflowX: "auto"
  },
  verticalSections: {
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch",
    paddingLeft: theme.spacing(1),
    overflowX: "auto"
  },
  adaptableSections: {
    display: "grid",
    gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
    gap: theme.spacing(2),
    "& > *": {
      marginBottom: theme.spacing(2)
    }
  },
  placeholder: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    border: "1px solid whitesmoke",
    borderRadius: "5px",
    height: "20px",
    width: "inherit"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  },
  bottomDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    borderRadius: "10px",
    color: "gray",
    height: "60px"
  },
  selected: {
    color: theme.palette.primary.main
  }
}));
var GroupTooltip = withStyles_default((theme) => ({
  tooltip: {
    backgroundColor: theme.palette.primary.main,
    margin: "0px",
    borderRadius: "0px"
  }
}))(Tooltip_default);
var isErrorPayload$2 = (payload) => payload.__typename === "ErrorPayload";
var Group = ({ editingContextId, representationId, formDescriptionEditor, page, group }) => {
  const classes = useGroupEntryStyles({
    borderStyle: group.borderStyle
  });
  const initialState = { message: null, selected: false };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const { message, selected } = state;
  const { selection, setSelection } = useSelection();
  const { showDeletionConfirmation } = useDeletionConfirmationDialog();
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === group.id)) {
      ref.current.focus();
      setState((prevState) => {
        return { ...prevState, selected: true };
      });
    } else {
      setState((prevState) => {
        return { ...prevState, selected: false };
      });
    }
  }, [selection, group]);
  const [addWidget, { loading: addWidgetLoading, data: addWidgetData, error: addWidgetError }] = useMutation(addWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!addWidgetLoading) {
      if (addWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: addWidgetError.message };
        });
      }
      if (addWidgetData) {
        const { addWidget: addWidget2 } = addWidgetData;
        if (isErrorPayload$2(addWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: addWidget2.message };
          });
        }
      }
    }
  }, [addWidgetLoading, addWidgetData, addWidgetError]);
  const [moveWidget, { loading: moveWidgetLoading, data: moveWidgetData, error: moveWidgetError }] = useMutation(moveWidgetMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveWidgetLoading) {
      if (moveWidgetError) {
        setState((prevState) => {
          return { ...prevState, message: moveWidgetError.message };
        });
      }
      if (moveWidgetData) {
        const { moveWidget: moveWidget2 } = moveWidgetData;
        if (isErrorPayload$2(moveWidget2)) {
          setState((prevState) => {
            return { ...prevState, message: moveWidget2.message };
          });
        }
      }
    }
  }, [moveWidgetLoading, moveWidgetData, moveWidgetError]);
  const [addGroup, { loading: addGroupLoading, data: addGroupData, error: addGroupError }] = useMutation(addGroupMutation);
  (0, import_react2.useEffect)(() => {
    if (!addGroupLoading) {
      if (addGroupError) {
        setState((prevState) => {
          return { ...prevState, message: addGroupError.message };
        });
      }
      if (addGroupData) {
        const { addGroup: addGroup2 } = addGroupData;
        if (isErrorPayload$2(addGroup2)) {
          setState((prevState) => {
            return { ...prevState, message: addGroup2.message };
          });
        }
      }
    }
  }, [addGroupLoading, addGroupData, addGroupError]);
  const [deleteGroup, { loading: deleteGroupLoading, data: deleteGroupData, error: deleteGroupError }] = useMutation(deleteGroupMutation);
  (0, import_react2.useEffect)(() => {
    if (!deleteGroupLoading) {
      if (deleteGroupError) {
        setState((prevState) => {
          return { ...prevState, message: deleteGroupError.message };
        });
      }
      if (deleteGroupData) {
        const { deleteGroup: deleteGroup2 } = deleteGroupData;
        if (isErrorPayload$2(deleteGroup2)) {
          setState((prevState) => {
            return { ...prevState, message: deleteGroup2.message };
          });
        }
      }
    }
  }, [deleteGroupLoading, deleteGroupData, deleteGroupError]);
  const [moveGroup, { loading: moveGroupLoading, data: moveGroupData, error: moveGroupError }] = useMutation(moveGroupMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveGroupLoading) {
      if (moveGroupError) {
        setState((prevState) => {
          return { ...prevState, message: moveGroupError.message };
        });
      }
      if (moveGroupData) {
        const { moveGroup: moveGroup2 } = moveGroupData;
        if (isErrorPayload$2(moveGroup2)) {
          setState((prevState) => {
            return { ...prevState, message: moveGroup2.message };
          });
        }
      }
    }
  }, [moveGroupLoading, moveGroupData, moveGroupError]);
  const handleClick = (event) => {
    const newSelection = {
      entries: [
        {
          id: group.id,
          label: group.label,
          kind: `siriusComponents://semantic?domain=view&entity=GroupDescription`
        }
      ]
    };
    setSelection(newSelection);
    event.stopPropagation();
  };
  const handleDelete = (event) => {
    event.preventDefault();
    if (event.key === "Delete") {
      const deleteGroupInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        groupId: group.id
      };
      const deleteGroupVariables = { input: deleteGroupInput };
      showDeletionConfirmation(() => {
        deleteGroup({ variables: deleteGroupVariables });
      });
      event.stopPropagation();
    }
  };
  const handleDragStart = (event) => {
    event.dataTransfer.setData("draggedElementId", group.id);
    event.dataTransfer.setData("draggedElementType", "Group");
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const { propertySectionsRegistry } = (0, import_react2.useContext)(PropertySectionContext);
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Group") {
      return;
    }
    if (id === "Group") {
      let newGroupIndex = page.groups.indexOf(group);
      if (newGroupIndex <= 0) {
        newGroupIndex = 0;
      }
      const addGroupInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: page.id,
        index: newGroupIndex
      };
      const addGroupVariables = { input: addGroupInput };
      addGroup({ variables: addGroupVariables });
    } else if (page.groups.find((g) => g.id === id)) {
      let groupNewIndex = page.groups.indexOf(group);
      if (groupNewIndex <= 0) {
        groupNewIndex = 0;
      }
      const movedGroupIndex = page.groups.findIndex((g) => g.id === id);
      if (movedGroupIndex > -1 && movedGroupIndex < groupNewIndex) {
        groupNewIndex--;
      }
      const moveGroupInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: page.id,
        groupId: id,
        index: groupNewIndex
      };
      const moveGroupVariables = { input: moveGroupInput };
      moveGroup({ variables: moveGroupVariables });
    }
  };
  const handleDropBottom = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Widget") {
      return;
    }
    let widgetIndex = group.widgets.length;
    if (isKind(id) || propertySectionsRegistry.getWidgetContributions().find((contrib) => contrib.name === id)) {
      const addWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: group.id,
        kind: id,
        index: widgetIndex
      };
      const addWidgetVariables = { input: addWidgetInput };
      addWidget({ variables: addWidgetVariables });
    } else {
      if (group.widgets.find((w) => w.id === id)) {
        widgetIndex--;
      }
      const moveWidgetInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        containerId: group.id,
        widgetId: id,
        index: widgetIndex
      };
      const moveWidgetVariables = { input: moveWidgetInput };
      moveWidget({ variables: moveWidgetVariables });
    }
  };
  const [visibleWidgetIds, setVisibleWidgetIds] = (0, import_react2.useState)([]);
  (0, import_react2.useEffect)(() => {
    setVisibleWidgetIds(group.widgets.map((widget) => widget.id));
  }, [group]);
  let widgetSelector = void 0;
  if (group.displayMode === "TOGGLEABLE_AREAS") {
    widgetSelector = (0, import_jsx_runtime.jsx)(
      ToggleButtonGroup$1,
      {
        size: "small",
        value: visibleWidgetIds,
        onChange: (_, newVisibleIds) => setVisibleWidgetIds(newVisibleIds),
        children: group.widgets.map((widget) => {
          return (0, import_jsx_runtime.jsx)(ToggleButton$1, { value: widget.id, children: widget.label }, widget.id);
        })
      }
    );
  }
  const toolbar = (0, import_jsx_runtime.jsx)(
    ToolbarActions,
    {
      "data-testid": `Group-ToolbarActions-${group.id}`,
      editingContextId,
      representationId,
      formDescriptionEditor,
      toolbarActions: group.toolbarActions,
      containerId: group.id
    }
  );
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": `Group-DropArea-${group.id}`,
        className: classes.placeholder,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop
      }
    ),
    (0, import_jsx_runtime.jsx)(GroupTooltip, { title: group.__typename, placement: "top-end", children: (0, import_jsx_runtime.jsxs)(
      "div",
      {
        "data-testid": group.id,
        className: classes.group,
        onClick: handleClick,
        onKeyDown: handleDelete,
        draggable: "true",
        onDragStart: handleDragStart,
        children: [
          (0, import_jsx_runtime.jsxs)(
            "div",
            {
              className: `${classes.labelAndToolbar} ${selected ? classes.selected : ""}`,
              onFocus: () => setState((prevState) => {
                return { ...prevState, selected: true };
              }),
              onBlur: () => setState((prevState) => {
                return { ...prevState, selected: false };
              }),
              ref,
              tabIndex: 0,
              children: [
                group.displayMode === "TOGGLEABLE_AREAS" ? widgetSelector : (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle1", children: group.label }),
                toolbar
              ]
            }
          ),
          (0, import_jsx_runtime.jsx)("div", { className: group.displayMode === "LIST" ? classes.verticalSections : classes.adaptableSections, children: group.widgets.filter((widget) => visibleWidgetIds.includes(widget.id)).map((widget) => (0, import_jsx_runtime.jsx)(
            WidgetEntry,
            {
              editingContextId,
              representationId,
              formDescriptionEditor,
              page,
              container: group,
              widget,
              flexDirection: group.displayMode === "LIST" ? "column" : "row",
              flexGrow: 1
            },
            widget.id
          )) }),
          (0, import_jsx_runtime.jsx)(
            "div",
            {
              "data-testid": `Group-Widgets-DropArea-${group.id}`,
              className: classes.bottomDropArea,
              onDragEnter: handleDragEnter,
              onDragOver: handleDragOver,
              onDragLeave: handleDragLeave,
              onDrop: handleDropBottom,
              children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "body1", children: "Drag and drop a widget here" })
            }
          )
        ]
      }
    ) }),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message,
        open: !!message,
        onClose: () => setState((prevState) => {
          return { ...prevState, message: null };
        })
      }
    )
  ] });
};
var isErrorPayload$1 = (payload) => payload.__typename === "ErrorPayload";
var usePageStyles = makeStyles_default((theme) => ({
  page: {
    display: "flex",
    flexDirection: "column",
    "& > *": {
      marginBottom: theme.spacing(2)
    },
    overflowY: "auto"
  },
  preview: {
    width: "100%",
    padding: "4px 8px 4px 8px",
    overflowY: "auto"
  },
  bottomDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    borderRadius: "10px",
    color: "gray",
    height: "60px"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  }
}));
var Page = ({ editingContextId, representationId, formDescriptionEditor, page }) => {
  const classes = usePageStyles();
  const initialState = { message: null, selected: false };
  const [state, setState] = (0, import_react2.useState)(initialState);
  const { message } = state;
  const ref = (0, import_react2.useRef)(null);
  const { selection } = useSelection();
  (0, import_react2.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === page.id)) {
      ref.current.focus();
      setState((prevState) => {
        return { ...prevState, selected: true };
      });
    } else {
      setState((prevState) => {
        return { ...prevState, selected: false };
      });
    }
  }, [selection, page]);
  const [addGroup, { loading: addGroupLoading, data: addGroupData, error: addGroupError }] = useMutation(addGroupMutation);
  (0, import_react2.useEffect)(() => {
    if (!addGroupLoading) {
      if (addGroupError) {
        setState((prevState) => {
          return { ...prevState, message: addGroupError.message };
        });
      }
      if (addGroupData) {
        const { addGroup: addGroup2 } = addGroupData;
        if (isErrorPayload$1(addGroup2)) {
          setState((prevState) => {
            return { ...prevState, message: addGroup2.message };
          });
        }
      }
    }
  }, [addGroupLoading, addGroupData, addGroupError]);
  const [moveGroup, { loading: moveGroupLoading, data: moveGroupData, error: moveGroupError }] = useMutation(moveGroupMutation);
  (0, import_react2.useEffect)(() => {
    if (!moveGroupLoading) {
      if (moveGroupError) {
        setState((prevState) => {
          return { ...prevState, message: moveGroupError.message };
        });
      }
      if (moveGroupData) {
        const { moveGroup: moveGroup2 } = moveGroupData;
        if (isErrorPayload$1(moveGroup2)) {
          setState((prevState) => {
            return { ...prevState, message: moveGroup2.message };
          });
        }
      }
    }
  }, [moveGroupLoading, moveGroupData, moveGroupError]);
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const handleDrop = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Group") {
      return;
    }
    let index = page.groups.length;
    if (id === "Group") {
      const addGroupInput = {
        id: crypto.randomUUID(),
        editingContextId,
        pageId: page.id,
        representationId,
        index
      };
      const addGroupVariables = { input: addGroupInput };
      addGroup({ variables: addGroupVariables });
    } else if (page.groups.find((g) => g.id === id)) {
      index--;
      const moveGroupInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: page.id,
        groupId: id,
        index
      };
      const moveGroupVariables = { input: moveGroupInput };
      moveGroup({ variables: moveGroupVariables });
    }
  };
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.preview, children: [
    (0, import_jsx_runtime.jsx)("div", { className: classes.page, children: page.groups.map((group) => {
      return (0, import_jsx_runtime.jsx)(
        Group,
        {
          editingContextId,
          representationId,
          formDescriptionEditor,
          page,
          group
        },
        group.id
      );
    }) }),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        "data-testid": "Page-DropArea",
        className: classes.bottomDropArea,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDragLeave: handleDragLeave,
        onDrop: handleDrop,
        children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "body1", children: "Drag and drop a group here" })
      }
    ),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message,
        open: !!message,
        onClose: () => setState((prevState) => {
          return { ...prevState, message: null };
        })
      }
    )
  ] });
};
var isErrorPayload = (payload) => payload.__typename === "ErrorPayload";
var recursiveWidgetSearch = (widget, entryId) => {
  if (entryId === widget.id) {
    return true;
  }
  if (isFlexboxContainer(widget)) {
    {
      return widget.children.some((widget2) => recursiveWidgetSearch(widget2, entryId));
    }
  }
  return false;
};
var usePageListStyles = makeStyles_default((theme) => ({
  rightDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    borderRadius: "10px",
    color: "gray",
    height: "40px",
    width: "50%"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  },
  pagesListDropAreaAndToolbar: {
    display: "flex",
    justifyContent: "space-between"
  },
  tabsRoot: {
    minHeight: theme.spacing(4),
    borderBottomColor: theme.palette.divider,
    borderBottomWidth: "1px",
    borderBottomStyle: "solid"
  },
  tabRoot: {
    minHeight: theme.spacing(4),
    textTransform: "none"
  },
  tabLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    width: "inherit"
  },
  tabLabelText: {
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
}));
var a11yProps = (id) => {
  return {
    id: `simple-tab-${id}`,
    "aria-controls": `simple-tabpanel-${id}`
  };
};
var PageList = ({ editingContextId, representationId, formDescriptionEditor }) => {
  const classes = usePageListStyles();
  const { pages } = formDescriptionEditor;
  const [state, setState] = (0, import_react2.useState)({ message: null, selectedPage: pages[0], pages });
  const { message } = state;
  const { selection, setSelection } = useSelection();
  const { showDeletionConfirmation } = useDeletionConfirmationDialog();
  (0, import_react2.useEffect)(() => {
    const entry = selection.entries.at(0);
    if (!entry) {
      return;
    }
    let pageToSelect;
    pageToSelect = state.pages.find((page) => entry.id === page.id);
    if (!pageToSelect) {
      pageToSelect = state.pages.find((page) => page.groups.some((group) => entry.id === group.id));
    }
    if (!pageToSelect) {
      pageToSelect = state.pages.find(
        (page) => page.groups.some((group) => group.toolbarActions.some((toolbar) => entry.id === toolbar.id))
      );
    }
    if (!pageToSelect) {
      pageToSelect = state.pages.find((page) => page.toolbarActions.some((toolbar) => entry.id === toolbar.id));
    }
    if (!pageToSelect) {
      pageToSelect = state.pages.find(
        (page) => page.groups.some((group) => group.widgets.some((widget) => recursiveWidgetSearch(widget, entry.id)))
      );
    }
    if (pageToSelect && pageToSelect.id !== state.selectedPage.id) {
      setState((prevState) => {
        return { ...prevState, selectedPage: pageToSelect };
      });
    }
  }, [selection]);
  (0, import_react2.useEffect)(() => {
    setState((prevState) => {
      const selectedPage = pages.find((page) => page.id === state.selectedPage.id);
      if (selectedPage) {
        return { ...prevState, selectedPage, pages };
      }
      return { ...prevState, selectedPage: pages[0], pages };
    });
  }, [pages, state.selectedPage.id]);
  const onChangeTab = (_, value) => {
    const selectedPage = pages.find((page) => page.id === value);
    setState((prevState) => {
      return { ...prevState, selectedPage };
    });
  };
  const [addPage, { loading: addPageLoading, data: addPageData, error: addPageError }] = useMutation(addPageMutation);
  (0, import_react2.useEffect)(() => {
    if (!addPageLoading) {
      if (addPageError) {
        setState((prevState) => {
          return { ...prevState, message: addPageError.message };
        });
      }
      if (addPageData) {
        const { addPage: addPage2 } = addPageData;
        if (isErrorPayload(addPage2)) {
          setState((prevState) => {
            return { ...prevState, message: addPage2.message };
          });
        }
      }
    }
  }, [addPageLoading, addPageData, addPageError]);
  const [movePage, { loading: movePageLoading, data: movePageData, error: movePageError }] = useMutation(movePageMutation);
  (0, import_react2.useEffect)(() => {
    if (!movePageLoading) {
      if (movePageError) {
        setState((prevState) => {
          return { ...prevState, message: movePageError.message };
        });
      }
      if (movePageData) {
        const { movePage: movePage2 } = movePageData;
        if (isErrorPayload(movePage2)) {
          setState((prevState) => {
            return { ...prevState, message: movePage2.message };
          });
        }
      }
    }
  }, [movePageLoading, movePageData, movePageError]);
  const [deletePage, { loading: deletePageLoading, data: deletePageData, error: deletePageError }] = useMutation(deletePageMutation);
  (0, import_react2.useEffect)(() => {
    if (!deletePageLoading) {
      if (deletePageError) {
        setState((prevState) => {
          return { ...prevState, message: deletePageError.message };
        });
      }
      if (deletePageData) {
        const { deletePage: deletePage2 } = deletePageData;
        if (isErrorPayload(deletePage2)) {
          setState((prevState) => {
            return { ...prevState, message: deletePage2.message };
          });
        }
      }
    }
  }, [deletePageLoading, deletePageData, deletePageError]);
  const handleClick = (event) => {
    const currentPage = pages.find((page) => page.id === event.currentTarget.id);
    if (currentPage) {
      const newSelection = {
        entries: [
          {
            id: currentPage.id,
            label: currentPage.label,
            kind: `siriusComponents://semantic?domain=view&entity=PageDescription`
          }
        ]
      };
      setSelection(newSelection);
    }
    event.stopPropagation();
  };
  const handleDelete = (event) => {
    event.preventDefault();
    if (event.key === "Delete") {
      const deletePageInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: state.selectedPage.id
      };
      const deletePageVariables = { input: deletePageInput };
      showDeletionConfirmation(() => {
        deletePage({ variables: deletePageVariables });
      });
      event.stopPropagation();
    }
  };
  const handleDragStart = (event) => {
    event.dataTransfer.setData("draggedElementId", event.currentTarget.id);
    event.dataTransfer.setData("draggedElementType", "Page");
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragOver = (event) => {
    event.preventDefault();
    event.currentTarget.classList.add(classes.dragOver);
  };
  const handleDragLeave = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
  };
  const handleDropTab = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const draggedElementId = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Page") {
      return;
    }
    const dropLocationId = event.currentTarget.id;
    const index = pages.findIndex((p) => p.id === dropLocationId);
    if (index < 0) {
      return;
    }
    if (draggedElementId === "Page") {
      const addPageInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        index
      };
      const addPageVariables = { input: addPageInput };
      addPage({ variables: addPageVariables });
    } else if (formDescriptionEditor.pages.find((g) => g.id === draggedElementId)) {
      const movePageInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: draggedElementId,
        index
      };
      const movePageVariables = { input: movePageInput };
      movePage({ variables: movePageVariables });
    }
  };
  const handleDropArea = (event) => {
    event.preventDefault();
    event.currentTarget.classList.remove(classes.dragOver);
    const id = event.dataTransfer.getData("draggedElementId");
    const type = event.dataTransfer.getData("draggedElementType");
    if (type !== "Page") {
      return;
    }
    let index = formDescriptionEditor.pages.length;
    if (id === "Page") {
      const addPageInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        index
      };
      const addPageVariables = { input: addPageInput };
      addPage({ variables: addPageVariables });
    } else if (pages.find((g) => g.id === id)) {
      index--;
      const movePageInput = {
        id: crypto.randomUUID(),
        editingContextId,
        representationId,
        pageId: id,
        index
      };
      const movePageVariables = { input: movePageInput };
      movePage({ variables: movePageVariables });
    }
  };
  const selectedPageToolbar = (0, import_jsx_runtime.jsx)(
    ToolbarActions,
    {
      "data-testid": `Page-ToolbarActions-${state.selectedPage.id}`,
      editingContextId,
      representationId,
      formDescriptionEditor,
      toolbarActions: state.selectedPage.toolbarActions,
      containerId: state.selectedPage.id
    }
  );
  return (0, import_jsx_runtime.jsxs)("div", { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.pagesListDropAreaAndToolbar, children: [
      (0, import_jsx_runtime.jsx)(
        Tabs_default,
        {
          classes: { root: classes.tabsRoot },
          value: state.selectedPage.id,
          onChange: onChangeTab,
          variant: "scrollable",
          scrollButtons: "on",
          textColor: "primary",
          indicatorColor: "primary",
          children: state.pages.map((page) => {
            return (0, import_react2.createElement)(
              Tab_default,
              {
                ...a11yProps(page.id),
                "data-testid": `Page-${page.id}`,
                classes: { root: classes.tabRoot },
                id: page.id,
                value: page.id,
                label: (0, import_jsx_runtime.jsx)("div", { className: classes.tabLabel, children: (0, import_jsx_runtime.jsx)("div", { className: classes.tabLabelText, children: page.label }) }),
                key: page.id,
                onClick: handleClick,
                onKeyDown: handleDelete,
                draggable: true,
                onDragStart: handleDragStart,
                onDragEnter: handleDragEnter,
                onDragOver: handleDragOver,
                onDragLeave: handleDragLeave,
                onDrop: handleDropTab
              }
            );
          })
        }
      ),
      (0, import_jsx_runtime.jsx)(
        "div",
        {
          "data-testid": "PageList-DropArea",
          className: classes.rightDropArea,
          onDragEnter: handleDragEnter,
          onDragOver: handleDragOver,
          onDragLeave: handleDragLeave,
          onDrop: handleDropArea,
          children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "body1", children: "Drag and drop a page here" })
        }
      ),
      selectedPageToolbar
    ] }),
    (0, import_jsx_runtime.jsx)(
      Page,
      {
        editingContextId,
        page: state.selectedPage,
        formDescriptionEditor,
        representationId
      }
    ),
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message,
        open: !!message,
        onClose: () => setState((prevState) => {
          return { ...prevState, message: null };
        })
      }
    )
  ] });
};
var Button = (props) => {
  return (0, import_jsx_runtime.jsx)(
    SvgIcon_default,
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      "aria-labelledby": "title",
      "aria-describedby": "desc",
      role: "img",
      ...props,
      children: (0, import_jsx_runtime.jsx)("path", { d: "M22,9v6c0,1.1-0.9,2-2,2h-1l0-2h1V9H4v6h6v2H4c-1.1,0-2-0.9-2-2V9c0-1.1,0.9-2,2-2h16C21.1,7,22,7.9,22,9z M14.5,19 l1.09-2.41L18,15.5l-2.41-1.09L14.5,12l-1.09,2.41L11,15.5l2.41,1.09L14.5,19z M17,14l0.62-1.38L19,12l-1.38-0.62L17,10l-0.62,1.38 L15,12l1.38,0.62L17,14z M14.5,19l1.09-2.41L18,15.5l-2.41-1.09L14.5,12l-1.09,2.41L11,15.5l2.41,1.09L14.5,19z M17,14l0.62-1.38 L19,12l-1.38-0.62L17,10l-0.62,1.38L15,12l1.38,0.62L17,14z" })
    }
  );
};
var ForIcon = (props) => {
  return (0, import_jsx_runtime.jsx)(
    SvgIcon_default,
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 -960 960 960",
      "aria-labelledby": "title",
      "aria-describedby": "desc",
      role: "img",
      ...props,
      children: (0, import_jsx_runtime.jsx)("path", { d: "M480-80q-75 0-140.5-28T225-185q-49-49-77-114.5T120-440h60q0 125 87.5 212.5T480-140q125 0 212.5-87.5T780-440q0-125-85-212.5T485-740h-23l73 73-41 42-147-147 147-147 41 41-78 78h23q75 0 140.5 28T735-695q49 49 77 114.5T840-440q0 75-28 140.5T735-185q-49 49-114.5 77T480-80Z" })
    }
  );
};
var IfIcon = (props) => {
  return (0, import_jsx_runtime.jsx)(
    SvgIcon_default,
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 -960 960 960",
      "aria-labelledby": "title",
      "aria-describedby": "desc",
      role: "img",
      ...props,
      children: (0, import_jsx_runtime.jsx)("path", { d: "M160-448v-60h306l232-232H575v-60h225v225h-60v-122L491-448H160Zm415 288v-60h123L524-395l42-42 174 174v-122h60v225H575Z" })
    }
  );
};
var useFormDescriptionEditorStyles = makeStyles_default((theme) => ({
  formDescriptionEditor: {
    display: "flex",
    flexDirection: "column",
    width: "100%",
    overflowX: "auto"
  },
  hover: {
    borderColor: theme.palette.primary.main
  },
  header: {
    padding: "4px 8px 4px 8px",
    display: "flex",
    flexDirection: "row"
  },
  main: {
    display: "flex",
    flexDirection: "row",
    height: "100%",
    borderTop: "1px solid grey",
    overflowY: "auto"
  },
  widgets: {
    display: "flex",
    flexDirection: "column",
    borderRight: "1px solid grey",
    padding: "4px 8px 4px 8px",
    overflowY: "auto"
  },
  widgetKind: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    marginTop: "8px",
    marginBottom: "8px",
    cursor: "move"
  },
  preview: {
    width: "100%",
    padding: "4px 8px 4px 8px",
    overflowY: "auto"
  },
  body: {
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch",
    overflowX: "auto"
  },
  bottomDropArea: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "whitesmoke",
    borderRadius: "10px",
    color: "gray",
    height: "60px"
  },
  dragOver: {
    borderWidth: "1px",
    borderStyle: "dashed",
    borderColor: theme.palette.primary.main
  },
  subscribers: {
    marginLeft: "auto",
    display: "flex",
    flexDirection: "row",
    alignItems: "center",
    "& > *": {
      marginLeft: theme.spacing(0.5),
      marginRight: theme.spacing(0.5)
    }
  },
  avatar: {
    fontSize: "1rem",
    width: theme.spacing(3),
    height: theme.spacing(3)
  },
  noFormDescriptionEditor: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyItems: "center"
  }
}));
var FormDescriptionEditorRepresentation = ({
  editingContextId,
  representationId
}) => {
  const classes = useFormDescriptionEditorStyles();
  const [{ value, context }, dispatch] = useMachine(formDescriptionEditorRepresentationMachine);
  const { toast, formDescriptionEditorRepresentation } = value;
  const { id, formDescriptionEditor, subscribers, message } = context;
  const input = {
    id,
    editingContextId,
    formDescriptionEditorId: representationId
  };
  const variables = { input };
  const { propertySectionsRegistry } = (0, import_react2.useContext)(PropertySectionContext);
  const { error } = useSubscription(
    gql(formDescriptionEditorEventSubscription(propertySectionsRegistry.getWidgetContributions())),
    {
      variables,
      fetchPolicy: "no-cache",
      skip: formDescriptionEditorRepresentation !== "ready",
      onData: ({ data }) => {
        const handleDataEvent = {
          type: "HANDLE_SUBSCRIPTION_RESULT",
          result: data
        };
        dispatch(handleDataEvent);
      },
      onComplete: () => {
        dispatch({ type: "HANDLE_COMPLETE" });
      }
    }
  );
  (0, import_react2.useEffect)(() => {
    if (error) {
      const message2 = "An error has occurred while trying to retrieve the form description editor";
      const showToastEvent = { type: "SHOW_TOAST", message: message2 };
      dispatch(showToastEvent);
      dispatch({ type: "HANDLE_COMPLETE" });
    }
  }, [error, dispatch]);
  (0, import_react2.useEffect)(() => {
    if (formDescriptionEditorRepresentation === "loading") {
      const initializeRepresentationEvent = {
        type: "INITIALIZE"
      };
      dispatch(initializeRepresentationEvent);
    }
  }, [formDescriptionEditorRepresentation, dispatch]);
  const handleDragStartPage = (event) => {
    event.dataTransfer.setData("draggedElementId", event.currentTarget.id);
    event.dataTransfer.setData("draggedElementType", "Page");
  };
  const handleDragStartGroup = (event) => {
    event.dataTransfer.setData("draggedElementId", event.currentTarget.id);
    event.dataTransfer.setData("draggedElementType", "Group");
  };
  const handleDragStartWidget = (event) => {
    event.dataTransfer.setData("draggedElementId", event.currentTarget.id);
    event.dataTransfer.setData("draggedElementType", "Widget");
  };
  let content = null;
  if (formDescriptionEditorRepresentation === "ready" && formDescriptionEditor) {
    content = (0, import_jsx_runtime.jsxs)("div", { className: classes.main, children: [
      (0, import_jsx_runtime.jsxs)("div", { className: classes.widgets, children: [
        (0, import_jsx_runtime.jsx)(Typography_default, { gutterBottom: true, children: "Pages" }),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Page",
            "data-testid": "FormDescriptionEditor-Page",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartPage,
            children: [
              (0, import_jsx_runtime.jsx)(import_Web.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Page" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsx)(Typography_default, { gutterBottom: true, children: "Groups" }),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Group",
            "data-testid": "FormDescriptionEditor-Group",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartGroup,
            children: [
              (0, import_jsx_runtime.jsx)(import_ViewAgenda.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Group" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsx)(Typography_default, { gutterBottom: true, children: "Controls" }),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "FormElementFor",
            "data-testid": "FormDescriptionEditor-FormElementFor",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(ForIcon, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "For" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "FormElementIf",
            "data-testid": "FormDescriptionEditor-FormElementIf",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(IfIcon, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "If" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsx)(Typography_default, { gutterBottom: true, children: "Widgets" }),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "BarChart",
            "data-testid": "FormDescriptionEditor-BarChart",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_BarChart.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "BarChart" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Button",
            "data-testid": "FormDescriptionEditor-Button",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(Button, { width: "24px", height: "24px", color: "secondary" }),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Button" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Checkbox",
            "data-testid": "FormDescriptionEditor-Checkbox",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_CheckBox.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Checkbox" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "FlexboxContainer",
            "data-testid": "FormDescriptionEditor-FlexboxContainer",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_ViewColumn.default, { width: "24px", height: "24px", color: "secondary" }),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, align: "center", children: "Flexbox Container" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Image",
            "data-testid": "FormDescriptionEditor-Image",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_Image.default, { width: "24px", height: "24px", color: "secondary" }),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Image" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Label",
            "data-testid": "FormDescriptionEditor-Label",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_LabelOutlined.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Label" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Link",
            "data-testid": "FormDescriptionEditor-Link",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_Link.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Link" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "List",
            "data-testid": "FormDescriptionEditor-List",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_FormatListBulleted.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "List" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "MultiSelect",
            "data-testid": "FormDescriptionEditor-MultiSelect",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_ArrowDropDownCircle.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "MultiSelect" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "PieChart",
            "data-testid": "FormDescriptionEditor-PieChart",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_PieChart.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "PieChart" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Radio",
            "data-testid": "FormDescriptionEditor-Radio",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_RadioButtonChecked.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Radio" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "RichText",
            "data-testid": "FormDescriptionEditor-RichText",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_TextFormat.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "RichText" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Select",
            "data-testid": "FormDescriptionEditor-Select",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_ArrowDropDownCircle.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Select" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "TextArea",
            "data-testid": "FormDescriptionEditor-TextArea",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_TextFields.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Textarea" })
            ]
          }
        ),
        (0, import_jsx_runtime.jsxs)(
          "div",
          {
            id: "Textfield",
            "data-testid": "FormDescriptionEditor-Textfield",
            draggable: "true",
            className: classes.widgetKind,
            onDragStart: handleDragStartWidget,
            children: [
              (0, import_jsx_runtime.jsx)(import_TextFields.default, {}),
              (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: "Textfield" })
            ]
          }
        ),
        propertySectionsRegistry.getWidgetContributions().map((customWidget) => {
          return (0, import_jsx_runtime.jsxs)(
            "div",
            {
              id: customWidget.name,
              "data-testid": `FormDescriptionEditor-${customWidget.name}`,
              draggable: "true",
              className: classes.widgetKind,
              onDragStart: handleDragStartWidget,
              children: [
                customWidget.icon,
                (0, import_jsx_runtime.jsx)(Typography_default, { variant: "caption", gutterBottom: true, children: customWidget.name })
              ]
            },
            customWidget.name
          );
        })
      ] }),
      (0, import_jsx_runtime.jsx)("div", { className: classes.preview, children: (0, import_jsx_runtime.jsx)("div", { className: classes.body, children: (0, import_jsx_runtime.jsx)(
        PageList,
        {
          editingContextId,
          representationId,
          formDescriptionEditor
        }
      ) }) })
    ] });
  }
  if (formDescriptionEditorRepresentation === "complete") {
    content = (0, import_jsx_runtime.jsx)("div", { className: classes.main + " " + classes.noFormDescriptionEditor, children: (0, import_jsx_runtime.jsx)(Typography_default, { variant: "h5", align: "center", "data-testid": "FormDescriptionEditor-complete-message", children: "The form description editor does not exist" }) });
  }
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.formDescriptionEditor, children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.header, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { children: "Form" }),
      (0, import_jsx_runtime.jsx)("div", { className: classes.subscribers, children: subscribers.map((subscriber) => (0, import_jsx_runtime.jsx)(Tooltip_default, { title: subscriber.username, arrow: true, children: (0, import_jsx_runtime.jsx)(Avatar_default, { classes: { root: classes.avatar }, children: subscriber.username.substring(0, 1).toUpperCase() }) }, subscriber.username)) })
    ] }),
    content,
    (0, import_jsx_runtime.jsx)(
      Toast,
      {
        message,
        open: toast === "visible",
        onClose: () => dispatch({ type: "HIDE_TOAST" })
      }
    )
  ] });
};
export {
  FormDescriptionEditorRepresentation
};
/*! Bundled license information:

@eclipse-sirius/sirius-components-formdescriptioneditors/dist/sirius-components-formdescriptioneditors.es.js:
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@eclipse-sirius/sirius-components-formdescriptioneditors/dist/sirius-components-formdescriptioneditors.es.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

@eclipse-sirius/sirius-components-formdescriptioneditors/dist/sirius-components-formdescriptioneditors.es.js:
  (** @license React v17.0.2
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@eclipse-sirius/sirius-components-formdescriptioneditors/dist/sirius-components-formdescriptioneditors.es.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@eclipse-sirius_sirius-components-formdescriptioneditors.js.map
