import {
  ApolloClient,
  ApolloConsumer,
  ApolloError,
  ApolloProvider,
  DocumentType,
  HttpLink,
  NetworkStatus,
  ObservableQuery,
  SuspenseCache,
  checkFetcher,
  createHttpLink,
  createSignalIfSupported,
  defaultPrinter,
  fallbackHttpConfig,
  getApolloContext,
  isApolloError,
  isNetworkRequestSettled,
  operationName,
  parseAndCheckHttpResponse,
  parser,
  resetApolloContext,
  rewriteURIForGET,
  selectHttpOptionsAndBody,
  selectHttpOptionsAndBodyInternal,
  selectURI,
  serializeFetchParameter,
  skipToken,
  useApolloClient,
  useBackgroundQuery,
  useFragment,
  useLazyQuery,
  useMutation,
  useQuery,
  useReactiveVar,
  useReadQuery,
  useSubscription,
  useSuspenseQuery
} from "./chunk-Z2MHMT5I.js";
import {
  disableExperimentalFragmentVariables,
  disableFragmentWarnings,
  enableExperimentalFragmentVariables,
  gql,
  resetCaches
} from "./chunk-JJXTUFQN.js";
import "./chunk-QCWLDGW7.js";
import {
  ApolloCache,
  Cache,
  InMemoryCache,
  MissingFieldError,
  defaultDataIdFromObject,
  makeVar
} from "./chunk-EIVP3DCT.js";
import {
  ApolloLink,
  concat,
  empty,
  execute,
  from,
  fromError,
  fromPromise,
  split,
  throwServerError,
  toPromise
} from "./chunk-B2UCKYRH.js";
import {
  DocumentTransform,
  Observable,
  isReference,
  makeReference,
  mergeOptions
} from "./chunk-6K7QCZCQ.js";
import "./chunk-XSD2GIWA.js";
import {
  setVerbosity
} from "./chunk-VMI4J53R.js";
import "./chunk-UCSDCOQI.js";
import "./chunk-AUZ3RYOM.js";
export {
  ApolloCache,
  ApolloClient,
  ApolloConsumer,
  ApolloError,
  ApolloLink,
  ApolloProvider,
  Cache,
  DocumentTransform,
  DocumentType,
  HttpLink,
  InMemoryCache,
  MissingFieldError,
  NetworkStatus,
  Observable,
  ObservableQuery,
  SuspenseCache,
  checkFetcher,
  concat,
  createHttpLink,
  createSignalIfSupported,
  defaultDataIdFromObject,
  defaultPrinter,
  disableExperimentalFragmentVariables,
  disableFragmentWarnings,
  empty,
  enableExperimentalFragmentVariables,
  execute,
  fallbackHttpConfig,
  from,
  fromError,
  fromPromise,
  getApolloContext,
  gql,
  isApolloError,
  isNetworkRequestSettled,
  isReference,
  makeReference,
  makeVar,
  mergeOptions,
  operationName,
  parseAndCheckHttpResponse,
  parser,
  resetApolloContext,
  resetCaches,
  rewriteURIForGET,
  selectHttpOptionsAndBody,
  selectHttpOptionsAndBodyInternal,
  selectURI,
  serializeFetchParameter,
  setVerbosity as setLogVerbosity,
  skipToken,
  split,
  throwServerError,
  toPromise,
  useApolloClient,
  useBackgroundQuery,
  useFragment,
  useLazyQuery,
  useMutation,
  useQuery,
  useReactiveVar,
  useReadQuery,
  useSubscription,
  useSuspenseQuery
};
//# sourceMappingURL=@apollo_client.js.map
