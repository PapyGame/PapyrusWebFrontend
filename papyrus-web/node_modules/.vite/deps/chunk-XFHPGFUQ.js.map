{
  "version": 3,
  "sources": ["../../../../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, position === 'end' ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']).isRequired,\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA,YAAuB;AACvB,wBAAsB;AACtB;AAEA;AAEO,IAAI,SAAS;AAAA;AAAA,EAElB,MAAM;AAAA,IACJ,SAAS;AAAA,IACT,QAAQ;AAAA;AAAA,IAER,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,YAAY;AAAA,EACd;AAAA;AAAA,EAGA,QAAQ;AAAA,IACN,qCAAqC;AAAA,MACnC,WAAW;AAAA,IACb;AAAA,EACF;AAAA;AAAA,EAGA,eAAe;AAAA,IACb,aAAa;AAAA,EACf;AAAA;AAAA,EAGA,aAAa;AAAA,IACX,YAAY;AAAA,EACd;AAAA;AAAA,EAGA,sBAAsB;AAAA,IACpB,eAAe;AAAA,EACjB;AAAA;AAAA,EAGA,aAAa,CAAC;AAAA;AAAA,EAGd,aAAa,CAAC;AAChB;AACA,IAAI,iBAAoC,iBAAW,SAASA,gBAAe,OAAO,KAAK;AACrF,MAAI,WAAW,MAAM,UACjB,UAAU,MAAM,SAChB,YAAY,MAAM,WAClB,mBAAmB,MAAM,WACzB,YAAY,qBAAqB,SAAS,QAAQ,kBAClD,wBAAwB,MAAM,sBAC9B,uBAAuB,0BAA0B,SAAS,QAAQ,uBAClE,wBAAwB,MAAM,mBAC9B,oBAAoB,0BAA0B,SAAS,QAAQ,uBAC/D,WAAW,MAAM,UACjB,cAAc,MAAM,SACpB,QAAQ,yBAAyB,OAAO,CAAC,YAAY,WAAW,aAAa,aAAa,wBAAwB,qBAAqB,YAAY,SAAS,CAAC;AAEjK,MAAI,iBAAiB,eAAe,KAAK,CAAC;AAC1C,MAAI,UAAU;AAEd,MAAI,eAAe,eAAe,SAAS;AACzC,QAAI,MAAuC;AACzC,UAAI,gBAAgB,eAAe,SAAS;AAC1C,gBAAQ,MAAM,mGAAwG;AAAA,MACxH;AAAA,IACF;AAAA,EACF;AAEA,MAAI,kBAAkB,CAAC,SAAS;AAC9B,cAAU,eAAe;AAAA,EAC3B;AAEA,SAA0B,oBAAc,2BAAmB,UAAU;AAAA,IACnE,OAAO;AAAA,EACT,GAAsB,oBAAc,WAAW,SAAS;AAAA,IACtD,WAAW,eAAK,QAAQ,MAAM,WAAW,aAAa,QAAQ,QAAQ,cAAc,QAAQ,eAAe,wBAAwB,QAAQ,sBAAsB,eAAe,eAAe,QAAQ,aAAa,YAAY,YAAY,QAAQ,QAAQ,eAAe,WAAW,WAAW,QAAQ,WAAW;AAAA,IACpT;AAAA,EACF,GAAG,KAAK,GAAG,OAAO,aAAa,YAAY,CAAC,oBAAuC,oBAAc,oBAAY;AAAA,IAC3G,OAAO;AAAA,EACT,GAAG,QAAQ,IAAI,QAAQ,CAAC;AAC1B,CAAC;AACD,OAAwC,eAAe,YAAY;AAAA;AAAA;AAAA;AAAA,EAIjE,UAAU,kBAAAC,QAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,SAAS,kBAAAA,QAAU,OAAO;AAAA;AAAA;AAAA;AAAA,EAK1B,WAAW,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAMrB,WAAW,kBAAAA,QAEV;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,sBAAsB,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA,EAKhC,mBAAmB,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA,EAK7B,gBAAgB,kBAAAA,QAAU;AAAA;AAAA;AAAA;AAAA,EAK1B,UAAU,kBAAAA,QAAU,MAAM,CAAC,SAAS,KAAK,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5C,SAAS,kBAAAA,QAAU,MAAM,CAAC,YAAY,YAAY,QAAQ,CAAC;AAC7D,IAAI;AACJ,IAAO,yBAAQ,mBAAW,QAAQ;AAAA,EAChC,MAAM;AACR,CAAC,EAAE,cAAc;",
  "names": ["InputAdornment", "PropTypes"]
}
