import {
  useRadioGroup
} from "./chunk-SSOJURHI.js";
import {
  SwitchBase_default
} from "./chunk-UTKIQ5NH.js";
import {
  createSvgIcon,
  init_createSvgIcon
} from "./chunk-4JITSZEO.js";
import {
  createChainedFunction,
  init_createChainedFunction
} from "./chunk-KL6UBKAO.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-TZNDNIQK.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-YGDE4KKL.js";
import {
  alpha,
  init_colorManipulator
} from "./chunk-D3SGUVA5.js";
import {
  _objectWithoutProperties,
  init_esm,
  init_objectWithoutProperties,
  refType_default
} from "./chunk-WQUDTCFH.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-OBJPNOCR.js";
import {
  _extends,
  init_extends,
  require_prop_types
} from "./chunk-PYVGESTF.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@material-ui/core/esm/Radio/Radio.js
init_extends();
init_objectWithoutProperties();
var React4 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// ../node_modules/@material-ui/core/esm/Radio/RadioButtonIcon.js
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();

// ../node_modules/@material-ui/core/esm/internal/svg-icons/RadioButtonUnchecked.js
var React = __toESM(require_react());
init_createSvgIcon();
var RadioButtonUnchecked_default = createSvgIcon(React.createElement("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "RadioButtonUnchecked");

// ../node_modules/@material-ui/core/esm/internal/svg-icons/RadioButtonChecked.js
var React2 = __toESM(require_react());
init_createSvgIcon();
var RadioButtonChecked_default = createSvgIcon(React2.createElement("path", {
  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
}), "RadioButtonChecked");

// ../node_modules/@material-ui/core/esm/Radio/RadioButtonIcon.js
init_withStyles();
var styles = function styles2(theme) {
  return {
    root: {
      position: "relative",
      display: "flex",
      "&$checked $layer": {
        transform: "scale(1)",
        transition: theme.transitions.create("transform", {
          easing: theme.transitions.easing.easeOut,
          duration: theme.transitions.duration.shortest
        })
      }
    },
    layer: {
      left: 0,
      position: "absolute",
      transform: "scale(0)",
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeIn,
        duration: theme.transitions.duration.shortest
      })
    },
    checked: {}
  };
};
function RadioButtonIcon(props) {
  var checked = props.checked, classes = props.classes, fontSize = props.fontSize;
  return React3.createElement("div", {
    className: clsx_m_default(classes.root, checked && classes.checked)
  }, React3.createElement(RadioButtonUnchecked_default, {
    fontSize
  }), React3.createElement(RadioButtonChecked_default, {
    fontSize,
    className: classes.layer
  }));
}
true ? RadioButtonIcon.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types.default.bool,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types.default.object.isRequired,
  /**
   * The size of the radio.
   * `small` is equivalent to the dense radio styling.
   */
  fontSize: import_prop_types.default.oneOf(["small", "medium"])
} : void 0;
var RadioButtonIcon_default = withStyles_default(styles, {
  name: "PrivateRadioButtonIcon"
})(RadioButtonIcon);

// ../node_modules/@material-ui/core/esm/Radio/Radio.js
init_colorManipulator();
init_capitalize();
init_createChainedFunction();
init_withStyles();
var styles3 = function styles4(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary
    },
    /* Pseudo-class applied to the root element if `checked={true}`. */
    checked: {},
    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      "&$checked": {
        color: theme.palette.primary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.action.disabled
      }
    },
    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      "&$checked": {
        color: theme.palette.secondary.main,
        "&:hover": {
          backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }
      },
      "&$disabled": {
        color: theme.palette.action.disabled
      }
    }
  };
};
var defaultCheckedIcon = React4.createElement(RadioButtonIcon_default, {
  checked: true
});
var defaultIcon = React4.createElement(RadioButtonIcon_default, null);
var Radio = React4.forwardRef(function Radio2(props, ref) {
  var checkedProp = props.checked, classes = props.classes, _props$color = props.color, color = _props$color === void 0 ? "secondary" : _props$color, nameProp = props.name, onChangeProp = props.onChange, _props$size = props.size, size = _props$size === void 0 ? "medium" : _props$size, other = _objectWithoutProperties(props, ["checked", "classes", "color", "name", "onChange", "size"]);
  var radioGroup = useRadioGroup();
  var checked = checkedProp;
  var onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
  var name = nameProp;
  if (radioGroup) {
    if (typeof checked === "undefined") {
      checked = radioGroup.value === props.value;
    }
    if (typeof name === "undefined") {
      name = radioGroup.name;
    }
  }
  return React4.createElement(SwitchBase_default, _extends({
    color,
    type: "radio",
    icon: React4.cloneElement(defaultIcon, {
      fontSize: size === "small" ? "small" : "medium"
    }),
    checkedIcon: React4.cloneElement(defaultCheckedIcon, {
      fontSize: size === "small" ? "small" : "medium"
    }),
    classes: {
      root: clsx_m_default(classes.root, classes["color".concat(capitalize(color))]),
      checked: classes.checked,
      disabled: classes.disabled
    },
    name,
    checked,
    onChange,
    ref
  }, other));
});
true ? Radio.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the component is checked.
   */
  checked: import_prop_types2.default.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: import_prop_types2.default.node,
  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: import_prop_types2.default.object,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types2.default.oneOf(["default", "primary", "secondary"]),
  /**
   * If `true`, the radio will be disabled.
   */
  disabled: import_prop_types2.default.bool,
  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: import_prop_types2.default.bool,
  /**
   * The icon to display when the component is unchecked.
   */
  icon: import_prop_types2.default.node,
  /**
   * The id of the `input` element.
   */
  id: import_prop_types2.default.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: import_prop_types2.default.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: refType_default,
  /**
   * Name attribute of the `input` element.
   */
  name: import_prop_types2.default.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: import_prop_types2.default.func,
  /**
   * If `true`, the `input` element will be required.
   */
  required: import_prop_types2.default.bool,
  /**
   * The size of the radio.
   * `small` is equivalent to the dense radio styling.
   */
  size: import_prop_types2.default.oneOf(["medium", "small"]),
  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: import_prop_types2.default.any
} : void 0;
var Radio_default = withStyles_default(styles3, {
  name: "MuiRadio"
})(Radio);

export {
  Radio_default
};
//# sourceMappingURL=chunk-B6IKDWVX.js.map
