import {
  require_MoreHoriz
} from "./chunk-LN4VA2K5.js";
import {
  require_Search
} from "./chunk-4YK67F36.js";
import {
  require_DragHandle
} from "./chunk-N4QVDQRW.js";
import {
  require_ChevronLeft
} from "./chunk-4UMN56MV.js";
import {
  require_Clear
} from "./chunk-PNAP2VNW.js";
import {
  PropertySectionLabel,
  getTextDecorationLineValue,
  useClickHandler
} from "./chunk-SNRJU3PN.js";
import {
  Autocomplete_default
} from "./chunk-LU4ZSRGR.js";
import "./chunk-XYGVIDDP.js";
import "./chunk-IBH2YODD.js";
import {
  require_HelpOutlineOutlined
} from "./chunk-MYBT6HDQ.js";
import "./chunk-LGRVFEH5.js";
import {
  require_Add
} from "./chunk-WPAAFGOY.js";
import {
  TreeView,
  splitText
} from "./chunk-ALGWDILR.js";
import "./chunk-G2STZICV.js";
import {
  require_Delete
} from "./chunk-S7GHAAFQ.js";
import {
  require_ChevronRight
} from "./chunk-6QAZUADE.js";
import "./chunk-S2Y5JDGU.js";
import "./chunk-T775FBGK.js";
import "./chunk-TDY4KRIT.js";
import "./chunk-QO66DLHO.js";
import "./chunk-RERSTXQB.js";
import "./chunk-5Q7WZCR7.js";
import "./chunk-D7G7ECCP.js";
import "./chunk-2FQTDJLG.js";
import "./chunk-TIACL36Q.js";
import "./chunk-UANGUQTW.js";
import "./chunk-DVDDEJSR.js";
import "./chunk-DX5CTSMH.js";
import "./chunk-Z6TUPHL7.js";
import "./chunk-B6IKDWVX.js";
import "./chunk-X6VMBKYA.js";
import "./chunk-SSOJURHI.js";
import "./chunk-6SE6QKLQ.js";
import "./chunk-M2CPW4JE.js";
import "./chunk-JU6U3L6V.js";
import {
  Grid_default
} from "./chunk-PZTZPEF5.js";
import {
  Chip_default
} from "./chunk-M64WZJX4.js";
import "./chunk-O3JXNHKG.js";
import "./chunk-FF43BDX5.js";
import "./chunk-XMDXGOH3.js";
import "./chunk-ITPIC75P.js";
import "./chunk-4WXSZ6HD.js";
import "./chunk-ZXCODMPZ.js";
import "./chunk-SKZ2FEGF.js";
import "./chunk-NUCQCZB3.js";
import {
  InputAdornment_default
} from "./chunk-XFHPGFUQ.js";
import {
  TextField_default
} from "./chunk-KKAIIBQI.js";
import {
  MenuItem_default
} from "./chunk-BPTBL6MC.js";
import {
  ListItemIcon_default
} from "./chunk-2T45WZ2P.js";
import {
  Select_default
} from "./chunk-UZDCVM6R.js";
import "./chunk-X7JKGFX2.js";
import {
  ListItem_default
} from "./chunk-EFRU5WKF.js";
import {
  ListItemText_default
} from "./chunk-3Z2XKYYI.js";
import "./chunk-ATC4NO6R.js";
import "./chunk-CF7T5PES.js";
import {
  List_default
} from "./chunk-KISTPFZY.js";
import "./chunk-SDNDIM76.js";
import "./chunk-CXISOORH.js";
import "./chunk-HQ3NZM53.js";
import "./chunk-W7IDD2LB.js";
import "./chunk-ZEYTQU77.js";
import "./chunk-CLETYUR4.js";
import "./chunk-7EABD3G6.js";
import "./chunk-7ACV3GAN.js";
import {
  DRAG_SOURCES_TYPE,
  IconOverlay,
  SelectionContext,
  getCSSColor,
  useDeletionConfirmationDialog,
  useMultiToast,
  useSelection
} from "./chunk-NYSHD5KH.js";
import {
  require_jsx_runtime
} from "./chunk-MN6XLW6Q.js";
import {
  useMachine
} from "./chunk-J34WXHB4.js";
import "./chunk-VJSPU622.js";
import {
  Machine,
  assign
} from "./chunk-SRTTMZV5.js";
import "./chunk-KRCK54RH.js";
import "./chunk-7AV4KTZL.js";
import "./chunk-DJCLTQTG.js";
import "./chunk-7RCLPMH3.js";
import "./chunk-LJHHLN5M.js";
import "./chunk-B6AM2NKK.js";
import {
  makeStyles_default
} from "./chunk-VM2MZLUW.js";
import "./chunk-OTPKZYVX.js";
import "./chunk-WGZDRRR5.js";
import "./chunk-H4WM7IIL.js";
import {
  DialogActions_default
} from "./chunk-DEPENL6S.js";
import {
  DialogTitle_default
} from "./chunk-EC4OINFY.js";
import "./chunk-MJ6MIMBS.js";
import "./chunk-CMDS46FL.js";
import "./chunk-K6J27RMN.js";
import "./chunk-RFR2NZND.js";
import "./chunk-UTKIQ5NH.js";
import "./chunk-UIJGMWLU.js";
import "./chunk-DMV3LC6V.js";
import {
  Dialog_default
} from "./chunk-WGHK5OTH.js";
import "./chunk-K22CCDOT.js";
import "./chunk-TLO7BD22.js";
import {
  DialogContent_default
} from "./chunk-T3A56L2S.js";
import "./chunk-QSUIRVO3.js";
import {
  Typography_default
} from "./chunk-OSUJ7GDT.js";
import {
  IconButton_default
} from "./chunk-TSYRDUXI.js";
import "./chunk-NTHUYHC7.js";
import {
  Button_default
} from "./chunk-BADD6I46.js";
import "./chunk-PQJMVEX4.js";
import "./chunk-VFPNJJT6.js";
import "./chunk-CVF63FI4.js";
import "./chunk-QJKXMHKV.js";
import "./chunk-YJVCL377.js";
import "./chunk-O7PTNT6S.js";
import "./chunk-YRNTLAWF.js";
import "./chunk-QFTOHLK2.js";
import "./chunk-4JITSZEO.js";
import {
  SvgIcon_default,
  init_SvgIcon
} from "./chunk-TBV2F45A.js";
import "./chunk-LINZ7S4M.js";
import "./chunk-3EESYYNB.js";
import "./chunk-KL6UBKAO.js";
import "./chunk-JL3UJI6L.js";
import {
  useTheme
} from "./chunk-JE5XHEFL.js";
import "./chunk-CCPUFXAI.js";
import "./chunk-B6TCGXKG.js";
import "./chunk-3SY2X4VC.js";
import "./chunk-K5M3XRFO.js";
import "./chunk-VAAWV47Q.js";
import "./chunk-LQNFPLGJ.js";
import "./chunk-TZNDNIQK.js";
import "./chunk-QYGHSHYC.js";
import "./chunk-YGDE4KKL.js";
import "./chunk-D3SGUVA5.js";
import "./chunk-WQUDTCFH.js";
import "./chunk-OBJPNOCR.js";
import "./chunk-PYVGESTF.js";
import {
  useLazyQuery,
  useMutation,
  useQuery
} from "./chunk-Z2MHMT5I.js";
import {
  gql
} from "./chunk-JJXTUFQN.js";
import {
  require_react
} from "./chunk-QCWLDGW7.js";
import "./chunk-EIVP3DCT.js";
import "./chunk-B2UCKYRH.js";
import "./chunk-6K7QCZCQ.js";
import "./chunk-XSD2GIWA.js";
import "./chunk-VMI4J53R.js";
import "./chunk-UCSDCOQI.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/@eclipse-sirius/sirius-components-widget-reference/dist/sirius-components-widget-reference.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
init_SvgIcon();
var import_Delete = __toESM(require_Delete());
var import_HelpOutlineOutlined = __toESM(require_HelpOutlineOutlined());
var import_react = __toESM(require_react());
var import_MoreHoriz = __toESM(require_MoreHoriz());
var import_Add = __toESM(require_Add());
var import_Clear = __toESM(require_Clear());
var import_Search = __toESM(require_Search());
var import_ChevronLeft = __toESM(require_ChevronLeft());
var import_ChevronRight = __toESM(require_ChevronRight());
var import_DragHandle = __toESM(require_DragHandle());
var ReferenceIcon = (props) => {
  return (0, import_jsx_runtime.jsxs)(
    SvgIcon_default,
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      "aria-labelledby": "title",
      "aria-describedby": "desc",
      role: "img",
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("g", { children: (0, import_jsx_runtime.jsx)("rect", { fill: "none", height: "24", width: "24" }) }),
        (0, import_jsx_runtime.jsxs)("g", { children: [
          (0, import_jsx_runtime.jsx)("polygon", { points: "17,17 22,12 17,7 15.59,8.41 18.17,11 9,11 9,13 18.17,13 15.59,15.59" }),
          (0, import_jsx_runtime.jsx)("path", { d: "M19,19H5V5h14v2h2V5c0-1.1-0.89-2-2-2H5C3.9,3,3,3.9,3,5v14c0,1.1,0.9,2,2,2h14c1.11,0,2-0.9,2-2v-2h-2V19z" })
        ] })
      ]
    }
  );
};
var useStyles$4 = makeStyles_default((theme) => ({
  referenceValueStyle: {
    color: ({ color }) => color ? getCSSColor(color, theme) : void 0,
    fontSize: ({ fontSize }) => fontSize ? fontSize : void 0,
    fontStyle: ({ italic }) => italic ? "italic" : "unset",
    fontWeight: ({ bold }) => bold ? "bold" : "unset",
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline ?? null, strikeThrough ?? null)
  },
  selected: {
    color: theme.palette.primary.main
  },
  propertySectionLabel: {
    display: "flex",
    flexDirection: "row",
    alignItems: "center"
  },
  propertySection: {
    overflowX: "hidden"
  }
}));
var ReferencePreview = ({ widget }) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$4(props);
  const [selected, setSelected] = (0, import_react.useState)(false);
  const { selection } = useSelection();
  const ref = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    if (ref.current && selection.entries.find((entry) => entry.id === widget.id)) {
      ref.current.focus();
      setSelected(true);
    } else {
      setSelected(false);
    }
  }, [selection, widget]);
  const options = [{ label: "Referenced Value", iconURL: "/api/images/icons/full/obj16/Entity.svg" }];
  return (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySection, children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.propertySectionLabel, children: [
      (0, import_jsx_runtime.jsx)(Typography_default, { variant: "subtitle2", className: selected ? classes.selected : "", children: widget.label }),
      widget.hasHelpText ? (0, import_jsx_runtime.jsx)(import_HelpOutlineOutlined.default, { color: "secondary", style: { marginLeft: 8, fontSize: 16 } }) : null
    ] }),
    (0, import_jsx_runtime.jsx)(
      Autocomplete_default,
      {
        "data-testid": widget.label,
        multiple: true,
        filterSelectedOptions: true,
        disabled: false,
        open: false,
        loading: false,
        options,
        value: options,
        disableClearable: true,
        renderTags: (value, getTagProps) => value.map(({ label, iconURL }, index) => (0, import_jsx_runtime.jsx)(
          Chip_default,
          {
            classes: { label: classes.referenceValueStyle },
            label,
            "data-testid": `reference-value-${label}`,
            icon: (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(IconOverlay, { iconURL: [iconURL], alt: "" }) }),
            ...getTagProps({ index })
          },
          index
        )),
        renderInput: (params) => {
          var _a2;
          return (0, import_jsx_runtime.jsx)(
            TextField_default,
            {
              inputRef: ref,
              ...params,
              variant: "standard",
              error: widget.diagnostics.length > 0,
              helperText: (_a2 = widget.diagnostics[0]) == null ? void 0 : _a2.message,
              InputProps: {
                readOnly: true,
                ...params.InputProps,
                endAdornment: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
                  params.InputProps.endAdornment,
                  (0, import_jsx_runtime.jsxs)(InputAdornment_default, { position: "end", className: classes.endAdornmentButton, children: [
                    (0, import_jsx_runtime.jsx)(
                      IconButton_default,
                      {
                        "aria-label": "edit",
                        size: "small",
                        title: "Edit",
                        disabled: false,
                        "data-testid": `${widget.label}-more`,
                        children: (0, import_jsx_runtime.jsx)(import_MoreHoriz.default, {})
                      }
                    ),
                    (0, import_jsx_runtime.jsx)(
                      IconButton_default,
                      {
                        "aria-label": "add",
                        size: "small",
                        title: "Create an object",
                        disabled: false,
                        "data-testid": `${widget.label}-add`,
                        children: (0, import_jsx_runtime.jsx)(import_Add.default, {})
                      }
                    ),
                    (0, import_jsx_runtime.jsx)(
                      IconButton_default,
                      {
                        "aria-label": "clear",
                        size: "small",
                        title: "Clear",
                        disabled: false,
                        "data-testid": `${widget.label}-clear`,
                        children: (0, import_jsx_runtime.jsx)(import_Delete.default, {})
                      }
                    )
                  ] })
                ] })
              }
            }
          );
        }
      }
    )
  ] });
};
var useStyles$3 = makeStyles_default((theme) => ({
  optionLabel: {
    paddingLeft: theme.spacing(0.5)
  },
  referenceValueStyle: {
    color: ({ color }) => color ? getCSSColor(color, theme) : void 0,
    fontSize: ({ fontSize }) => fontSize ? fontSize : void 0,
    fontStyle: ({ italic }) => italic ? "italic" : "unset",
    fontWeight: ({ bold }) => bold ? "bold" : "unset",
    textDecorationLine: ({ underline, strikeThrough }) => getTextDecorationLineValue(underline ?? null, strikeThrough ?? null)
  },
  endAdornmentButton: {
    position: "absolute",
    display: "flex",
    right: theme.spacing(2.5),
    "& > *": {
      padding: 0
    }
  }
}));
var getReferenceValueOptionsQuery$1 = gql`
  query getReferenceValueOptions($editingContextId: ID!, $representationId: ID!, $referenceWidgetId: ID!) {
    viewer {
      editingContext(editingContextId: $editingContextId) {
        representation(representationId: $representationId) {
          description {
            ... on FormDescription {
              referenceValueOptions(referenceWidgetId: $referenceWidgetId) {
                id
                label
                kind
                iconURL
              }
            }
          }
        }
      }
    }
  }
`;
var isFormDescription$1 = (representationDescription) => representationDescription.__typename === "FormDescription";
var ValuedReferenceAutocomplete = ({
  editingContextId,
  formId,
  widget,
  readOnly,
  onDragEnter,
  onDragOver,
  onDrop,
  onMoreClick,
  onCreateClick,
  optionClickHandler,
  clearReference,
  removeReferenceValue,
  addReferenceValues,
  setReferenceValue
}) => {
  var _a, _b, _c, _d, _e, _f;
  const props = {
    color: ((_a = widget.style) == null ? void 0 : _a.color) ?? null,
    fontSize: ((_b = widget.style) == null ? void 0 : _b.fontSize) ?? null,
    italic: ((_c = widget.style) == null ? void 0 : _c.italic) ?? null,
    bold: ((_d = widget.style) == null ? void 0 : _d.bold) ?? null,
    underline: ((_e = widget.style) == null ? void 0 : _e.underline) ?? null,
    strikeThrough: ((_f = widget.style) == null ? void 0 : _f.strikeThrough) ?? null
  };
  const classes = useStyles$3(props);
  const theme = useTheme();
  const { addErrorMessage } = useMultiToast();
  const [state, setState] = (0, import_react.useState)({ open: false, options: null });
  const loading = state.open && state.options === null;
  const [
    getReferenceValueOptions,
    {
      loading: childReferenceValueOptionsLoading,
      data: childReferenceValueOptionsData,
      error: childReferenceValueOptionsError
    }
  ] = useLazyQuery(
    getReferenceValueOptionsQuery$1
  );
  (0, import_react.useEffect)(() => {
    if (!childReferenceValueOptionsLoading) {
      if (childReferenceValueOptionsError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (childReferenceValueOptionsData) {
        const representationDescription = childReferenceValueOptionsData.viewer.editingContext.representation.description;
        if (isFormDescription$1(representationDescription)) {
          setState((prevState) => {
            return {
              ...prevState,
              options: representationDescription.referenceValueOptions
            };
          });
        }
      }
    }
  }, [childReferenceValueOptionsLoading, childReferenceValueOptionsData, childReferenceValueOptionsError]);
  (0, import_react.useEffect)(() => {
    if (loading) {
      getReferenceValueOptions({
        variables: {
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id
        }
      });
    }
  }, [loading]);
  const handleRemoveReferenceValue = (updatedValues) => {
    widget.referenceValues.forEach((value) => {
      if (!updatedValues.find((updateValue) => updateValue.id === value.id)) {
        removeReferenceValue(value.id);
      }
    });
  };
  const getOnlyNewValueIds = (updatedValues) => {
    var _a2;
    if (((_a2 = widget.referenceValues) == null ? void 0 : _a2.length) > 0) {
      return updatedValues.filter((updatedValue) => widget.referenceValues.some((value) => value.id !== updatedValue.id)).map((value) => value.id);
    } else {
      return updatedValues.map((value) => value.id);
    }
  };
  const handleAutocompleteChange = (_event, updatedValues, reason) => {
    if (reason === "remove-option") {
      handleRemoveReferenceValue(updatedValues);
    } else {
      const newValueIds = getOnlyNewValueIds(updatedValues);
      if (widget.reference.manyValued) {
        addReferenceValues(newValueIds);
      } else {
        setReferenceValue(newValueIds[0] ?? null);
      }
    }
  };
  (0, import_react.useEffect)(() => {
    if (!state.open) {
      setState((prevState) => {
        return {
          ...prevState,
          options: null
        };
      });
    }
  }, [widget]);
  let placeholder;
  if (widget.reference.manyValued) {
    placeholder = "Values";
  } else {
    placeholder = widget.referenceValues.length > 0 ? "" : "Value";
  }
  return (0, import_jsx_runtime.jsx)(
    Autocomplete_default,
    {
      "data-testid": widget.label,
      multiple: true,
      filterSelectedOptions: true,
      disabled: readOnly || widget.readOnly,
      open: state.open,
      onOpen: () => setState((prevState) => {
        return {
          ...prevState,
          open: true
        };
      }),
      onClose: () => setState((prevState) => {
        return {
          ...prevState,
          open: false
        };
      }),
      loading,
      options: state.options || [],
      getOptionLabel: (option) => option.label,
      value: widget.referenceValues,
      getOptionSelected: (option, value) => option.id === value.id,
      onChange: handleAutocompleteChange,
      renderOption: (option) => (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        (0, import_jsx_runtime.jsx)(IconOverlay, { iconURL: option.iconURL, alt: option.kind }),
        (0, import_jsx_runtime.jsx)("span", { className: classes.optionLabel, "data-testid": `option-${option.label}`, children: option.label })
      ] }),
      disableClearable: true,
      renderTags: (value, getTagProps) => value.map((option, index) => (0, import_jsx_runtime.jsx)(
        Chip_default,
        {
          classes: { label: classes.referenceValueStyle },
          label: option.label,
          "data-testid": `reference-value-${option.label}`,
          icon: (0, import_jsx_runtime.jsx)("div", { children: (0, import_jsx_runtime.jsx)(IconOverlay, { iconURL: option.iconURL, alt: option.kind }) }),
          clickable: !readOnly && !widget.readOnly,
          onClick: () => optionClickHandler(option),
          ...getTagProps({ index })
        },
        index
      )),
      renderInput: (params) => {
        var _a2;
        return (0, import_jsx_runtime.jsx)(
          TextField_default,
          {
            ...params,
            variant: "standard",
            placeholder,
            error: widget.diagnostics.length > 0,
            helperText: (_a2 = widget.diagnostics[0]) == null ? void 0 : _a2.message,
            InputProps: {
              ...params.InputProps,
              style: { paddingRight: theme.spacing(10) },
              // Offset required to prevent values from being displayed below the buttons
              endAdornment: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
                params.InputProps.endAdornment,
                (0, import_jsx_runtime.jsxs)(InputAdornment_default, { position: "end", className: classes.endAdornmentButton, children: [
                  (0, import_jsx_runtime.jsx)(
                    IconButton_default,
                    {
                      "aria-label": "edit",
                      size: "small",
                      title: "Edit",
                      disabled: readOnly || widget.readOnly,
                      "data-testid": `${widget.label}-more`,
                      onClick: onMoreClick,
                      children: (0, import_jsx_runtime.jsx)(import_MoreHoriz.default, {})
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    IconButton_default,
                    {
                      "aria-label": "add",
                      size: "small",
                      title: "Create an object",
                      disabled: readOnly || widget.readOnly,
                      "data-testid": `${widget.label}-add`,
                      onClick: onCreateClick,
                      children: (0, import_jsx_runtime.jsx)(import_Add.default, {})
                    }
                  ),
                  (0, import_jsx_runtime.jsx)(
                    IconButton_default,
                    {
                      "aria-label": "clear",
                      size: "small",
                      title: "Clear",
                      disabled: readOnly || widget.readOnly,
                      "data-testid": `${widget.label}-clear`,
                      onClick: clearReference,
                      children: (0, import_jsx_runtime.jsx)(import_Delete.default, {})
                    }
                  )
                ] })
              ] })
            }
          }
        );
      },
      onDragEnter,
      onDragOver,
      onDrop
    }
  );
};
var useFilterBarStyles = makeStyles_default((theme) => ({
  filterbar: {
    display: "flex",
    flexDirection: "row",
    overflow: "hidden"
  },
  textfield: {
    height: theme.spacing(3),
    fontSize: theme.typography.fontSize
  },
  placeHolderIcon: {
    color: theme.palette.text.disabled
  }
}));
var ModelBrowserFilterBar = ({ onTextChange, onTextClear, text }) => {
  const classes = useFilterBarStyles();
  return (0, import_jsx_runtime.jsx)("div", { className: classes.filterbar, children: (0, import_jsx_runtime.jsx)(
    TextField_default,
    {
      id: "filterbar-textfield",
      "data-testid": "filterbar-textfield",
      name: "filterbar-textfield",
      placeholder: "Type to filter",
      spellCheck: false,
      size: "small",
      margin: "none",
      autoFocus: true,
      multiline: false,
      fullWidth: true,
      value: text,
      onChange: onTextChange,
      InputProps: {
        startAdornment: (0, import_jsx_runtime.jsx)(InputAdornment_default, { position: "start", children: (0, import_jsx_runtime.jsx)(import_Search.default, { fontSize: "small", className: classes.placeHolderIcon }) }),
        endAdornment: (0, import_jsx_runtime.jsx)(InputAdornment_default, { position: "end", children: (0, import_jsx_runtime.jsx)(IconButton_default, { "data-testid": "filterbar-clear-button", "aria-label": "clear", size: "small", onClick: onTextClear, children: (0, import_jsx_runtime.jsx)(import_Clear.default, { fontSize: "small" }) }) }),
        className: classes.textfield
      }
    }
  ) });
};
var useTreeStyle = makeStyles_default((theme) => ({
  title: {
    opacity: 0.6,
    fontSize: theme.typography.caption.fontSize
  },
  borderStyle: {
    border: "1px solid",
    borderColor: theme.palette.grey[500],
    height: 300,
    overflow: "auto"
  }
}));
var ModelBrowserTreeView = ({
  editingContextId,
  widget,
  markedItemIds,
  enableMultiSelection,
  title,
  leafType,
  ownerKind
}) => {
  const classes = useTreeStyle();
  const [state, setState] = (0, import_react.useState)({ filterBarText: "" });
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      ModelBrowserFilterBar,
      {
        onTextChange: (event) => setState({ filterBarText: event.target.value }),
        onTextClear: () => setState({ filterBarText: "" }),
        text: state.filterBarText
      }
    ),
    (0, import_jsx_runtime.jsx)("span", { className: classes.title, children: title }),
    (0, import_jsx_runtime.jsx)("div", { className: classes.borderStyle, children: (0, import_jsx_runtime.jsx)(
      TreeView,
      {
        editingContextId,
        readOnly: true,
        treeId: `modelBrowser://${leafType}?ownerKind=${encodeURIComponent(
          ownerKind
        )}&targetType=${encodeURIComponent(widget.reference.referenceKind)}&ownerId=${widget.ownerId}&descriptionId=${encodeURIComponent(widget.descriptionId)}&isContainment=${widget.reference.containment}`,
        enableMultiSelection,
        synchronizedWithSelection: true,
        textToFilter: state.filterBarText,
        textToHighlight: state.filterBarText,
        markedItemIds
      }
    ) })
  ] });
};
var useBrowserModalStyles = makeStyles_default((_) => ({
  content: {
    height: 400
  }
}));
var BrowseModal = ({ editingContextId, widget, onClose }) => {
  const styles = useBrowserModalStyles();
  const [browserSelection, setBrowserSelection] = (0, import_react.useState)({ entries: widget.referenceValues });
  return (0, import_jsx_runtime.jsx)(
    SelectionContext.Provider,
    {
      value: {
        selection: browserSelection,
        setSelection: setBrowserSelection
      },
      children: (0, import_jsx_runtime.jsxs)(
        Dialog_default,
        {
          open: true,
          onClose: () => onClose(null),
          "aria-labelledby": "dialog-title",
          fullWidth: true,
          "data-testid": "browse-modal",
          children: [
            (0, import_jsx_runtime.jsx)(DialogTitle_default, { id: "dialog-title", children: "Select an object" }),
            (0, import_jsx_runtime.jsx)(DialogContent_default, { className: styles.content, children: (0, import_jsx_runtime.jsx)(
              ModelBrowserTreeView,
              {
                editingContextId,
                widget,
                markedItemIds: [],
                enableMultiSelection: widget.reference.manyValued,
                title: "Choices",
                leafType: "reference",
                ownerKind: widget.reference.ownerKind
              }
            ) }),
            (0, import_jsx_runtime.jsx)(DialogActions_default, { children: (0, import_jsx_runtime.jsx)(
              Button_default,
              {
                variant: "contained",
                color: "primary",
                type: "button",
                "data-testid": "select-value",
                onClick: () => {
                  const selectedElement = (browserSelection == null ? void 0 : browserSelection.entries.length) > 0 ? browserSelection.entries[0] : null;
                  if (selectedElement) {
                    onClose(selectedElement.id);
                  }
                },
                children: "Select"
              }
            ) })
          ]
        }
      )
    }
  );
};
var isCreateElementSuccessPayload = (payload) => {
  return payload.__typename === "CreateElementInReferenceSuccessPayload";
};
var createModalMachine = Machine(
  {
    id: "CreateModal",
    type: "parallel",
    context: {
      domains: [],
      selectedDomainId: "",
      selectedChildCreationDescriptionId: "",
      creationDescriptions: [],
      newObjectId: null,
      containerSelected: { entries: [] },
      containerId: null,
      containerKind: null
    },
    states: {
      createModal: {
        initial: "selectContainmentMode",
        states: {
          selectContainmentMode: {
            on: {
              CHANGE_CONTAINMENT_MODE: [
                {
                  cond: "isContainmentReference",
                  target: "loadingChildCreationDescription",
                  actions: "updateContainer"
                },
                {
                  target: "selectContainer"
                }
              ]
            }
          },
          selectContainer: {
            on: {
              CHANGE_CONTAINER_SELECTION: [
                {
                  actions: "updateContainerSelection",
                  cond: "isRootContainer",
                  target: "loadingDomains"
                },
                {
                  actions: "updateContainerSelection",
                  target: "loadingChildCreationDescription"
                }
              ]
            }
          },
          loadingChildCreationDescription: {
            on: {
              HANDLE_FETCHED_CHILD_CREATION_DESCRIPTIONS: [
                {
                  target: "validForChild",
                  actions: "updateChildCreationDescriptions"
                }
              ],
              CHANGE_CONTAINER_SELECTION: [
                {
                  actions: "updateContainerSelection",
                  cond: "isRootContainer",
                  target: "loadingDomains"
                },
                {
                  actions: "updateContainerSelection",
                  target: "loadingChildCreationDescription"
                }
              ]
            }
          },
          loadingDomains: {
            on: {
              HANDLE_FETCHED_DOMAINS: [
                {
                  actions: "updateDomains",
                  target: "loadingRootObjectCreationDescriptions"
                }
              ],
              CHANGE_CONTAINER_SELECTION: [
                {
                  actions: "updateContainerSelection",
                  cond: "isRootContainer",
                  target: "loadingDomains"
                },
                {
                  actions: "updateContainerSelection",
                  target: "loadingChildCreationDescription"
                }
              ]
            }
          },
          loadingRootObjectCreationDescriptions: {
            on: {
              CHANGE_DOMAIN: [
                {
                  actions: "updateDomain"
                }
              ],
              HANDLE_FETCHED_ROOT_OBJECT_CREATION_DESCRIPTIONS: [
                {
                  target: "validForRoot",
                  actions: "updateRootChildCreationDescriptions"
                }
              ]
            }
          },
          validForChild: {
            on: {
              CHANGE_CONTAINER_SELECTION: [
                {
                  actions: "updateContainerSelection",
                  cond: "isRootContainer",
                  target: "loadingDomains"
                },
                {
                  actions: "updateContainerSelection",
                  target: "loadingChildCreationDescription"
                }
              ],
              CHANGE_CHILD_CREATION_DESCRIPTION: [
                {
                  actions: "updateChildCreationDescription"
                }
              ],
              CHANGE_DOMAIN: [
                {
                  actions: "updateDomain",
                  target: "loadingRootObjectCreationDescriptions"
                }
              ],
              CREATE_CHILD: [
                {
                  target: "creatingChild"
                }
              ]
            }
          },
          validForRoot: {
            on: {
              CHANGE_CONTAINER_SELECTION: [
                {
                  actions: "updateContainerSelection",
                  cond: "isRootContainer",
                  target: "loadingDomains"
                },
                {
                  actions: "updateContainerSelection",
                  target: "loadingChildCreationDescription"
                }
              ],
              CHANGE_CHILD_CREATION_DESCRIPTION: [
                {
                  actions: "updateChildCreationDescription"
                }
              ],
              CHANGE_DOMAIN: [
                {
                  actions: "updateDomain",
                  target: "loadingRootObjectCreationDescriptions"
                }
              ],
              CREATE_ROOT: [
                {
                  target: "creatingRoot"
                }
              ]
            }
          },
          creatingChild: {
            on: {
              HANDLE_CREATE_ELEMENT_RESPONSE: [
                {
                  cond: "isResponseCreateElementSuccessful",
                  target: "success",
                  actions: "updateNewElementId"
                },
                {
                  target: "validForChild"
                }
              ]
            }
          },
          creatingRoot: {
            on: {
              HANDLE_CREATE_ELEMENT_RESPONSE: [
                {
                  cond: "isResponseCreateElementSuccessful",
                  target: "success",
                  actions: "updateNewElementId"
                },
                {
                  target: "validForRoot"
                }
              ]
            }
          },
          success: {
            type: "final"
          }
        }
      }
    }
  },
  {
    guards: {
      isResponseCreateElementSuccessful: (_, event) => {
        const { data } = event;
        return data.createElementInReference.__typename === "CreateElementInReferenceSuccessPayload";
      },
      isContainmentReference: (_, event) => {
        const { containment } = event;
        return containment;
      },
      isRootContainer: (_, event) => {
        var _a;
        const { container } = event;
        return ((_a = container.entries[0]) == null ? void 0 : _a.kind) === "siriusWeb://document";
      }
    },
    actions: {
      updateDomains: assign((_, event) => {
        var _a;
        const { data } = event;
        const { domains } = data.viewer.editingContext;
        const selectedDomainId = ((_a = domains[0]) == null ? void 0 : _a.id) || "";
        return { domains, selectedDomainId };
      }),
      updateDomain: assign((_, event) => {
        const { domainId } = event;
        return { selectedDomainId: domainId };
      }),
      updateChildCreationDescriptions: assign((_, event) => {
        var _a;
        const { data } = event;
        const { referenceWidgetChildCreationDescriptions } = data.viewer.editingContext;
        const selectedChildCreationDescriptionId = ((_a = referenceWidgetChildCreationDescriptions[0]) == null ? void 0 : _a.id) || "";
        return { creationDescriptions: referenceWidgetChildCreationDescriptions, selectedChildCreationDescriptionId };
      }),
      updateRootChildCreationDescriptions: assign((_, event) => {
        var _a;
        const { data } = event;
        const { referenceWidgetRootCreationDescriptions } = data.viewer.editingContext;
        const selectedChildCreationDescriptionId = ((_a = referenceWidgetRootCreationDescriptions[0]) == null ? void 0 : _a.id) || "";
        return { creationDescriptions: referenceWidgetRootCreationDescriptions, selectedChildCreationDescriptionId };
      }),
      updateChildCreationDescription: assign((_, event) => {
        const { childCreationDescriptionId } = event;
        return { selectedChildCreationDescriptionId: childCreationDescriptionId };
      }),
      updateContainer: assign((_, event) => {
        const { containerKind, containerId } = event;
        return {
          containerId,
          containerKind
        };
      }),
      updateContainerSelection: assign((_, event) => {
        var _a, _b;
        const { container } = event;
        return {
          containerSelected: container,
          containerId: (_a = container.entries[0]) == null ? void 0 : _a.id,
          containerKind: (_b = container.entries[0]) == null ? void 0 : _b.kind
        };
      }),
      updateNewElementId: assign((_, event) => {
        const { data } = event;
        if (isCreateElementSuccessPayload(data.createElementInReference)) {
          const { object } = data.createElementInReference;
          return { newObjectId: object.id };
        }
        return {};
      })
    }
  }
);
var useStyle = makeStyles_default((theme) => ({
  title: {
    opacity: 0.6,
    fontSize: theme.typography.caption.fontSize
  },
  select: {
    display: "flex",
    alignItems: "center"
  },
  iconRoot: {
    minWidth: theme.spacing(3)
  }
}));
var createElementInReferenceMutation = gql`
  mutation createElementInReference($input: CreateElementInReferenceInput!) {
    createElementInReference(input: $input) {
      __typename
      ... on CreateElementInReferenceSuccessPayload {
        object {
          id
          label
          kind
        }
        messages {
          body
          level
        }
      }
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var getChildCreationDescriptionsQuery = gql`
  query getChildCreationDescriptions(
    $editingContextId: ID!
    $kind: ID!
    $referenceKind: String
    $descriptionId: String!
  ) {
    viewer {
      editingContext(editingContextId: $editingContextId) {
        referenceWidgetChildCreationDescriptions(
          kind: $kind
          referenceKind: $referenceKind
          descriptionId: $descriptionId
        ) {
          id
          label
          iconURL
        }
      }
    }
  }
`;
var getRootObjectCreationDescriptionsQuery = gql`
  query getRootObjectCreationDescriptions(
    $editingContextId: ID!
    $domainId: ID!
    $referenceKind: String
    $descriptionId: String!
  ) {
    viewer {
      editingContext(editingContextId: $editingContextId) {
        referenceWidgetRootCreationDescriptions(
          domainId: $domainId
          referenceKind: $referenceKind
          descriptionId: $descriptionId
        ) {
          id
          label
          iconURL
        }
      }
    }
  }
`;
var getDomainsQuery = gql`
  query getDomains($editingContextId: ID!) {
    viewer {
      editingContext(editingContextId: $editingContextId) {
        domains(rootDomainsOnly: false) {
          id
          label
        }
      }
    }
  }
`;
var isErrorPayload$1 = (payload) => payload.__typename === "ErrorPayload";
var isSuccessPayload$1 = (payload) => payload.__typename === "CreateElementInReferenceSuccessPayload";
var CreateModal = ({ editingContextId, widget, onClose, formId }) => {
  const classes = useStyle();
  const { addErrorMessage, addMessages } = useMultiToast();
  const [{ value, context }, dispatch] = useMachine(createModalMachine);
  const { createModal } = value;
  const {
    domains,
    selectedChildCreationDescriptionId,
    creationDescriptions,
    newObjectId,
    containerSelected,
    containerId,
    containerKind,
    selectedDomainId
  } = context;
  (0, import_react.useEffect)(() => {
    const changeContainmentModeEvent = {
      containment: widget.reference.containment,
      containerKind: widget.reference.containment ? widget.reference.ownerKind : null,
      containerId: widget.reference.containment ? widget.ownerId : null,
      type: "CHANGE_CONTAINMENT_MODE"
    };
    dispatch(changeContainmentModeEvent);
  }, []);
  const [getDomains, { loading: domainsLoading, data: domainsData, error: domainsError }] = useLazyQuery(getDomainsQuery, {
    variables: { editingContextId }
  });
  (0, import_react.useEffect)(() => {
    if (!domainsLoading) {
      if (domainsError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (domainsData) {
        const fetchDomainsEvent = {
          type: "HANDLE_FETCHED_DOMAINS",
          data: domainsData
        };
        dispatch(fetchDomainsEvent);
      }
    }
  }, [domainsLoading, domainsData, domainsError]);
  const [
    getRootObjectCreationDescriptions,
    { loading: descriptionsLoading, data: descriptionsData, error: descriptionError }
  ] = useLazyQuery(
    getRootObjectCreationDescriptionsQuery
  );
  (0, import_react.useEffect)(() => {
    if (!descriptionsLoading) {
      if (descriptionError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (descriptionsData) {
        const fetchDescriptionsEvent = {
          type: "HANDLE_FETCHED_ROOT_OBJECT_CREATION_DESCRIPTIONS",
          data: descriptionsData
        };
        dispatch(fetchDescriptionsEvent);
      }
    }
  }, [descriptionsLoading, descriptionsData, descriptionError]);
  const [
    getChildCreationDescription,
    {
      loading: childCreationDescriptionsLoading,
      data: childCreationDescriptionsData,
      error: childCreationDescriptionsError
    }
  ] = useLazyQuery(
    getChildCreationDescriptionsQuery
  );
  (0, import_react.useEffect)(() => {
    if (!childCreationDescriptionsLoading) {
      if (childCreationDescriptionsError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (childCreationDescriptionsData) {
        const fetchChildCreationDescriptionsEvent = {
          type: "HANDLE_FETCHED_CHILD_CREATION_DESCRIPTIONS",
          data: childCreationDescriptionsData
        };
        dispatch(fetchChildCreationDescriptionsEvent);
      }
    }
  }, [childCreationDescriptionsLoading, childCreationDescriptionsData, childCreationDescriptionsError]);
  const [
    createElementInReference,
    { loading: createElementLoading, error: createElementError, data: createElementData }
  ] = useMutation(
    createElementInReferenceMutation
  );
  (0, import_react.useEffect)(() => {
    if (!createElementLoading) {
      if (createElementError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (createElementData) {
        const handleResponseEvent = {
          type: "HANDLE_CREATE_ELEMENT_RESPONSE",
          data: createElementData
        };
        dispatch(handleResponseEvent);
        const { createElementInReference: createElementInReference2 } = createElementData;
        if (isErrorPayload$1(createElementInReference2) || isSuccessPayload$1(createElementInReference2)) {
          const { messages } = createElementInReference2;
          addMessages(messages);
        }
      }
    }
  }, [createElementLoading, createElementData, createElementError]);
  const onCreateObject = () => {
    let input = null;
    if (containerId) {
      if (createModal === "validForChild") {
        dispatch({ type: "CREATE_CHILD" });
        input = {
          id: crypto.randomUUID(),
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id,
          containerId,
          domainId: null,
          creationDescriptionId: selectedChildCreationDescriptionId,
          descriptionId: widget.descriptionId
        };
      } else if (createModal === "validForRoot") {
        dispatch({ type: "CREATE_ROOT" });
        input = {
          id: crypto.randomUUID(),
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id,
          containerId,
          domainId: selectedDomainId,
          creationDescriptionId: selectedChildCreationDescriptionId,
          descriptionId: widget.descriptionId
        };
      }
    }
    if (input) {
      createElementInReference({ variables: { input } });
    }
  };
  const onDomainChange = (event) => {
    const { value: value2 } = event.target;
    const changeDomainEvent = { type: "CHANGE_DOMAIN", domainId: value2 };
    dispatch(changeDomainEvent);
  };
  const onChildCreationDescriptionChange = (event) => {
    const value2 = event.target.value;
    const changeChildCreationDescriptionEvent = {
      type: "CHANGE_CHILD_CREATION_DESCRIPTION",
      childCreationDescriptionId: value2
    };
    dispatch(changeChildCreationDescriptionEvent);
  };
  (0, import_react.useEffect)(() => {
    if (createModal === "loadingChildCreationDescription" && containerKind) {
      getChildCreationDescription({
        variables: {
          editingContextId,
          kind: containerKind,
          referenceKind: widget.reference.referenceKind,
          descriptionId: widget.descriptionId
        }
      });
    }
    if (createModal === "loadingDomains") {
      getDomains({ variables: { editingContextId } });
    }
    if (createModal === "loadingRootObjectCreationDescriptions" && selectedDomainId) {
      getRootObjectCreationDescriptions({
        variables: {
          editingContextId,
          domainId: selectedDomainId,
          referenceKind: widget.reference.referenceKind,
          descriptionId: widget.descriptionId
        }
      });
    }
    if (createModal === "success") {
      onClose(newObjectId);
    }
  }, [createModal]);
  const onBrowserSelection = (selection) => {
    const changeContainerSelectionEvent = {
      type: "CHANGE_CONTAINER_SELECTION",
      container: selection
    };
    dispatch(changeContainerSelectionEvent);
  };
  return (0, import_jsx_runtime.jsx)(
    SelectionContext.Provider,
    {
      value: {
        selection: containerSelected,
        setSelection: onBrowserSelection
      },
      children: (0, import_jsx_runtime.jsxs)(
        Dialog_default,
        {
          open: true,
          onClose: () => onClose(null),
          "aria-labelledby": "dialog-title",
          fullWidth: true,
          "data-testid": "create-modal",
          children: [
            (0, import_jsx_runtime.jsx)(DialogTitle_default, { id: "dialog-title", children: "Create an object" }),
            (0, import_jsx_runtime.jsxs)(DialogContent_default, { children: [
              widget.reference.containment ? null : (0, import_jsx_runtime.jsx)(
                ModelBrowserTreeView,
                {
                  editingContextId,
                  widget,
                  markedItemIds: [],
                  enableMultiSelection: false,
                  title: "Select the container",
                  leafType: "container",
                  ownerKind: widget.reference.referenceKind
                }
              ),
              containerKind === "siriusWeb://document" && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
                (0, import_jsx_runtime.jsx)("span", { className: classes.title, children: "Select the domain" }),
                (0, import_jsx_runtime.jsx)(
                  Select_default,
                  {
                    value: selectedDomainId,
                    onChange: onDomainChange,
                    disabled: createModal === "loadingDomains" || createModal === "creatingChild",
                    labelId: "createModalChildCreationDescriptionLabel",
                    fullWidth: true,
                    "data-testid": "domain",
                    children: domains.map((domain) => (0, import_jsx_runtime.jsx)(MenuItem_default, { value: domain.id, children: domain.label }, domain.id))
                  }
                )
              ] }),
              (0, import_jsx_runtime.jsx)("span", { className: classes.title, children: "Select the object type" }),
              (0, import_jsx_runtime.jsx)(
                Select_default,
                {
                  classes: { select: classes.select },
                  value: selectedChildCreationDescriptionId,
                  onChange: onChildCreationDescriptionChange,
                  disabled: createModal !== "validForChild" && createModal !== "validForRoot",
                  labelId: "createModalChildCreationDescriptionLabel",
                  fullWidth: true,
                  "data-testid": "childCreationDescription",
                  children: creationDescriptions.map((creationDescription) => (0, import_jsx_runtime.jsxs)(MenuItem_default, { value: creationDescription.id, children: [
                    creationDescription.iconURL.length > 0 && (0, import_jsx_runtime.jsx)(ListItemIcon_default, { className: classes.iconRoot, children: (0, import_jsx_runtime.jsx)(IconOverlay, { iconURL: creationDescription.iconURL, alt: creationDescription.label }) }),
                    (0, import_jsx_runtime.jsx)(ListItemText_default, { primary: creationDescription.label })
                  ] }, creationDescription.id))
                }
              )
            ] }),
            (0, import_jsx_runtime.jsx)(DialogActions_default, { children: (0, import_jsx_runtime.jsx)(
              Button_default,
              {
                variant: "contained",
                color: "primary",
                type: "button",
                "data-testid": "create-object",
                onClick: onCreateObject,
                disabled: createModal !== "validForChild" && createModal !== "validForRoot",
                children: "Create"
              }
            ) })
          ]
        }
      )
    }
  );
};
var useStyles$2 = makeStyles_default((theme) => ({
  selectable: {
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.palette.action.hover
    }
  },
  selected: {
    cursor: "pointer",
    backgroundColor: theme.palette.action.selected
  },
  selectedLabel: {
    fontWeight: "bold"
  },
  title: {
    opacity: 0.6,
    fontSize: theme.typography.caption.fontSize
  },
  borderStyle: {
    border: "1px solid",
    borderColor: theme.palette.grey[500],
    height: 300,
    overflow: "auto"
  },
  dragIcon: {
    display: "block"
  },
  noDragIcon: {
    display: "none"
  }
}));
var useLabelStyles = makeStyles_default((theme) => ({
  highlight: {
    backgroundColor: theme.palette.navigation.leftBackground
  }
}));
var HighlightedLabel = ({ label, textToHighlight }) => {
  var _a;
  const classes = useLabelStyles();
  let itemLabel;
  const splitLabelWithTextToHighlight = splitText(label, textToHighlight);
  if (textToHighlight === null || textToHighlight === "" || splitLabelWithTextToHighlight.length === 1 && ((_a = splitLabelWithTextToHighlight[0]) == null ? void 0 : _a.toLocaleLowerCase()) !== label.toLocaleLowerCase()) {
    itemLabel = (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: label });
  } else {
    const languages = Array.from(navigator.languages);
    itemLabel = (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: splitLabelWithTextToHighlight.map((value, index) => {
      const shouldHighlight = value.localeCompare(textToHighlight, languages, { sensitivity: "base" }) === 0;
      return (0, import_jsx_runtime.jsx)(
        "span",
        {
          "data-testid": `${label}-${value}-${index}`,
          className: shouldHighlight ? classes.highlight : "",
          children: value
        },
        value + index
      );
    }) });
  }
  return (0, import_jsx_runtime.jsx)(Typography_default, { children: itemLabel });
};
var FilterableSortableList = ({
  items,
  options,
  setItems,
  handleDragItemStart,
  handleDragItemEnd,
  handleDropNewItem,
  onClick,
  selectedItems,
  moveElement
}) => {
  const classes = useStyles$2();
  const [state, setState] = (0, import_react.useState)({
    filterBarText: "",
    hoveringItemId: void 0,
    draggingItemId: void 0,
    draggingStartIndex: -1,
    draggingIndex: -1
  });
  const handleMouseEnter = (id) => {
    setState((prevState) => {
      return {
        ...prevState,
        hoveringItemId: id
      };
    });
  };
  const handleMouseLeave = () => {
    setState((prevState) => {
      return {
        ...prevState,
        hoveringItemId: void 0
      };
    });
  };
  const handleDragOverNewItem = (event) => {
    event.preventDefault();
  };
  const handleDragStartOrder = (id, index) => {
    setState((prevState) => {
      return {
        ...prevState,
        draggingItemId: id,
        draggingStartIndex: index
      };
    });
  };
  const handleDragEndOrder = () => {
    if (state.draggingItemId) {
      moveElement(state.draggingItemId, state.draggingStartIndex, state.draggingIndex);
    }
    setState((prevState) => {
      return {
        ...prevState,
        draggingItemId: void 0
      };
    });
  };
  const handleDragOverOrder = (event, index) => {
    event.preventDefault();
    if (state.draggingItemId) {
      const newList = Array.from(items);
      const draggedItem = newList.find((item) => item.id === state.draggingItemId);
      if (draggedItem) {
        const draggedItemIndex = newList.indexOf(draggedItem);
        newList.splice(draggedItemIndex, 1);
        newList.splice(index, 0, draggedItem);
        setItems(newList);
        setState((prevState) => {
          return {
            ...prevState,
            draggingIndex: index
          };
        });
      }
    }
  };
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      ModelBrowserFilterBar,
      {
        onTextChange: (event) => setState((prevState) => {
          return {
            ...prevState,
            filterBarText: event.target.value
          };
        }),
        onTextClear: () => setState((prevState) => {
          return {
            ...prevState,
            filterBarText: ""
          };
        }),
        text: state.filterBarText
      }
    ),
    (0, import_jsx_runtime.jsx)("span", { className: classes.title, children: "Selected" }),
    (0, import_jsx_runtime.jsx)("div", { className: classes.borderStyle, onDrop: handleDropNewItem, onDragOver: handleDragOverNewItem, children: (0, import_jsx_runtime.jsx)(List_default, { dense: true, component: "div", role: "list", "data-testid": "selected-items-list", children: items.filter(({ label }) => {
      var _a;
      if (state.filterBarText === null || state.filterBarText === "") {
        return true;
      }
      const splitLabelWithTextToHighlight = splitText(label, state.filterBarText);
      return splitLabelWithTextToHighlight.length > 1 || splitLabelWithTextToHighlight.length === 1 && ((_a = splitLabelWithTextToHighlight[0]) == null ? void 0 : _a.toLocaleLowerCase()) === state.filterBarText.toLocaleLowerCase();
    }).map(({ id, kind, label }, index) => {
      var _a;
      const iconURL = ((_a = options.find((option) => option.id === id)) == null ? void 0 : _a.iconURL) ?? [];
      const labelId = `transfer-list-item-${id}-label`;
      const selected = selectedItems.some((entry) => entry.id === id);
      const hover = state.hoveringItemId === id;
      return (0, import_jsx_runtime.jsxs)(
        ListItem_default,
        {
          role: "listitem",
          className: selected ? classes.selected : classes.selectable,
          onDragOver: (event) => handleDragOverOrder(event, index),
          onDragEnd: handleDragItemEnd,
          onClick: (event) => onClick(event, { id, kind, label }),
          onMouseEnter: () => handleMouseEnter(id),
          onMouseLeave: handleMouseLeave,
          "data-testid": label,
          children: [
            (0, import_jsx_runtime.jsx)(
              ListItemIcon_default,
              {
                className: hover ? classes.dragIcon : classes.noDragIcon,
                draggable: true,
                onDragStart: () => handleDragStartOrder(id, index),
                onDragEnd: handleDragEndOrder,
                children: (0, import_jsx_runtime.jsx)(import_DragHandle.default, {})
              }
            ),
            (0, import_jsx_runtime.jsx)(ListItemIcon_default, { draggable: true, onDragStart: () => handleDragItemStart(id), children: (0, import_jsx_runtime.jsx)(IconOverlay, { iconURL, alt: kind }) }),
            (0, import_jsx_runtime.jsx)(
              ListItemText_default,
              {
                id: labelId,
                draggable: true,
                onDragStart: () => handleDragItemStart(id),
                primary: (0, import_jsx_runtime.jsx)(HighlightedLabel, { label, textToHighlight: state.filterBarText }),
                classes: { primary: selected ? classes.selectedLabel : "" }
              }
            )
          ]
        },
        id
      );
    }) }) })
  ] });
};
var useStyles$1 = makeStyles_default((theme) => ({
  dialogContent: {
    overflowX: "hidden"
  },
  root: {
    margin: "auto"
  },
  paper: {
    width: 400,
    height: 370,
    overflow: "auto"
  },
  button: {
    margin: theme.spacing(0.5, 0)
  }
}));
var getReferenceValueOptionsQuery = gql`
  query getReferenceValueOptions($editingContextId: ID!, $representationId: ID!, $referenceWidgetId: ID!) {
    viewer {
      editingContext(editingContextId: $editingContextId) {
        representation(representationId: $representationId) {
          description {
            ... on FormDescription {
              referenceValueOptions(referenceWidgetId: $referenceWidgetId) {
                id
                label
                kind
                iconURL
              }
            }
          }
        }
      }
    }
  }
`;
var isFormDescription = (representationDescription) => representationDescription.__typename === "FormDescription";
var TransferModal = ({
  editingContextId,
  formId,
  widget,
  onClose,
  addElements,
  removeElement,
  moveElement
}) => {
  const classes = useStyles$1();
  const { addErrorMessage } = useMultiToast();
  const [state, setState] = (0, import_react.useState)({
    right: widget.referenceValues,
    rightSelection: [],
    draggingRightItemId: void 0,
    leftSelection: [],
    options: []
  });
  const {
    loading: childReferenceValueOptionsLoading,
    data: childReferenceValueOptionsData,
    error: childReferenceValueOptionsError
  } = useQuery(
    getReferenceValueOptionsQuery,
    {
      variables: {
        editingContextId,
        representationId: formId,
        referenceWidgetId: widget.id
      }
    }
  );
  (0, import_react.useEffect)(() => {
    if (!childReferenceValueOptionsLoading) {
      if (childReferenceValueOptionsError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (childReferenceValueOptionsData) {
        const representationDescription = childReferenceValueOptionsData.viewer.editingContext.representation.description;
        if (isFormDescription(representationDescription)) {
          setState((prevState) => {
            return {
              ...prevState,
              options: representationDescription.referenceValueOptions
            };
          });
        }
      }
    }
  }, [childReferenceValueOptionsLoading, childReferenceValueOptionsData, childReferenceValueOptionsError]);
  (0, import_react.useEffect)(() => {
    setState((prevState) => {
      return {
        ...prevState,
        rightSelection: prevState.rightSelection.filter(
          (sel) => widget.referenceValues.map((ref) => ref.id).includes(sel.id)
        ),
        right: widget.referenceValues
      };
    });
  }, [widget.referenceValues]);
  const handleLeftSelection = (selection) => {
    setState((prevState) => {
      return {
        ...prevState,
        rightSelection: [],
        leftSelection: selection.entries
      };
    });
  };
  const handleDragOverLeft = (event) => {
    event.preventDefault();
  };
  const handleDropLeft = (event) => {
    event.preventDefault();
    if (state.draggingRightItemId) {
      removeElement(state.draggingRightItemId);
    }
  };
  const handleDragStart = (id) => {
    setState((prevState) => {
      return {
        ...prevState,
        draggingRightItemId: id
      };
    });
  };
  const handleDragEnd = () => {
    setState((prevState) => {
      return {
        ...prevState,
        draggingRightItemId: void 0
      };
    });
  };
  const handleDropRight = (event) => {
    event.preventDefault();
    const dragSourcesStringified = event.dataTransfer.getData(DRAG_SOURCES_TYPE);
    if (dragSourcesStringified) {
      const sources = JSON.parse(dragSourcesStringified);
      if (Array.isArray(sources) && sources.length > 0) {
        const entriesDragged = sources;
        const newElementIds = entriesDragged.filter((newEntry) => !state.right.some((existingEntry) => existingEntry.id === newEntry.id)).map((element) => element.id);
        addElements(newElementIds);
      }
    }
  };
  const onClick = (event, item) => {
    if (event.ctrlKey || event.metaKey) {
      event.stopPropagation();
      const isItemInSelection = state.rightSelection.find((entry) => entry.id === item.id);
      const newSelection = isItemInSelection ? state.rightSelection.filter((entry) => entry.id !== item.id) : [...state.rightSelection, item];
      setState((prevState) => {
        return {
          ...prevState,
          rightSelection: newSelection,
          leftSelection: newSelection
        };
      });
    } else {
      setState((prevState) => {
        return {
          ...prevState,
          rightSelection: [item],
          leftSelection: [item]
        };
      });
    }
  };
  const handleDispatchRight = () => {
    addElements(state.leftSelection.map((element) => element.id));
  };
  const handleDispatchLeft = () => {
    state.rightSelection.forEach((element) => removeElement(element.id));
  };
  return (0, import_jsx_runtime.jsx)(
    SelectionContext.Provider,
    {
      value: {
        selection: { entries: state.leftSelection },
        setSelection: handleLeftSelection
      },
      children: (0, import_jsx_runtime.jsxs)(
        Dialog_default,
        {
          open: true,
          onClose: () => onClose(),
          "aria-labelledby": "dialog-title",
          maxWidth: false,
          "data-testid": "transfer-modal",
          children: [
            (0, import_jsx_runtime.jsx)(DialogTitle_default, { id: "dialog-title", children: "Edit reference" }),
            (0, import_jsx_runtime.jsx)(DialogContent_default, { className: classes.dialogContent, children: (0, import_jsx_runtime.jsxs)(Grid_default, { container: true, spacing: 2, justifyContent: "center", alignItems: "center", className: classes.root, children: [
              (0, import_jsx_runtime.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime.jsx)("div", { className: classes.paper, onDragOver: handleDragOverLeft, onDrop: handleDropLeft, children: (0, import_jsx_runtime.jsx)(
                ModelBrowserTreeView,
                {
                  editingContextId,
                  widget,
                  markedItemIds: state.right.map((entry) => entry.id),
                  enableMultiSelection: widget.reference.manyValued,
                  title: "Choices",
                  leafType: "reference",
                  ownerKind: widget.reference.ownerKind
                }
              ) }) }),
              (0, import_jsx_runtime.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime.jsxs)(Grid_default, { container: true, direction: "column", alignItems: "center", children: [
                (0, import_jsx_runtime.jsx)(
                  IconButton_default,
                  {
                    className: classes.button,
                    onClick: handleDispatchRight,
                    disabled: !state.leftSelection.some(
                      (leftEntry) => !state.right.some((rightEntry) => rightEntry.id === leftEntry.id)
                    ),
                    "aria-label": "move selected right",
                    "data-testid": "move-right",
                    children: (0, import_jsx_runtime.jsx)(import_ChevronRight.default, {})
                  }
                ),
                (0, import_jsx_runtime.jsx)(
                  IconButton_default,
                  {
                    className: classes.button,
                    onClick: handleDispatchLeft,
                    disabled: state.rightSelection.length === 0,
                    "aria-label": "move selected left",
                    "data-testid": "move-left",
                    children: (0, import_jsx_runtime.jsx)(import_ChevronLeft.default, {})
                  }
                )
              ] }) }),
              (0, import_jsx_runtime.jsx)(Grid_default, { item: true, children: (0, import_jsx_runtime.jsx)("div", { className: classes.paper, children: (0, import_jsx_runtime.jsx)(
                FilterableSortableList,
                {
                  items: state.right,
                  options: [...state.options, ...widget.referenceValues],
                  setItems: (items) => setState((prevState) => {
                    return {
                      ...prevState,
                      right: items
                    };
                  }),
                  handleDragItemStart: handleDragStart,
                  handleDragItemEnd: handleDragEnd,
                  handleDropNewItem: handleDropRight,
                  onClick,
                  selectedItems: state.rightSelection,
                  moveElement
                }
              ) }) })
            ] }) }),
            (0, import_jsx_runtime.jsx)(DialogActions_default, { children: (0, import_jsx_runtime.jsx)(
              Button_default,
              {
                variant: "contained",
                color: "primary",
                type: "button",
                "data-testid": "close-transfer-modal",
                onClick: () => onClose(),
                children: "close"
              }
            ) })
          ]
        }
      )
    }
  );
};
var useStyles = makeStyles_default(() => ({
  root: {
    overflow: "hidden"
  }
}));
var clearReferenceMutation = gql`
  mutation clearReference($input: ClearReferenceInput!) {
    clearReference(input: $input) {
      __typename
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
      ... on SuccessPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var removeReferenceValueMutation = gql`
  mutation removeReferenceValue($input: RemoveReferenceValueInput!) {
    removeReferenceValue(input: $input) {
      __typename
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
      ... on SuccessPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var setReferenceValueMutation = gql`
  mutation setReferenceValue($input: SetReferenceValueInput!) {
    setReferenceValue(input: $input) {
      __typename
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
      ... on SuccessPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var addReferenceValuesMutation = gql`
  mutation addReferenceValues($input: AddReferenceValuesInput!) {
    addReferenceValues(input: $input) {
      __typename
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
      ... on SuccessPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var moveReferenceValueMutation = gql`
  mutation moveReferenceValue($input: MoveReferenceValueInput!) {
    moveReferenceValue(input: $input) {
      __typename
      ... on ErrorPayload {
        messages {
          body
          level
        }
      }
      ... on SuccessPayload {
        messages {
          body
          level
        }
      }
    }
  }
`;
var isErrorPayload = (payload) => payload.__typename === "ErrorPayload";
var isSuccessPayload = (payload) => payload.__typename === "SuccessPayload";
var ReferencePropertySection = ({
  editingContextId,
  formId,
  widget,
  subscribers,
  readOnly
}) => {
  const classes = useStyles();
  const { setSelection } = useSelection();
  const { showDeletionConfirmation } = useDeletionConfirmationDialog();
  const [clearReference, { loading: clearLoading, error: clearError, data: clearData }] = useMutation(clearReferenceMutation);
  const [removeReferenceValue, { loading: removeLoading, error: removeError, data: removeData }] = useMutation(removeReferenceValueMutation);
  const [setReferenceValue, { loading: setLoading, error: setError, data: setData }] = useMutation(setReferenceValueMutation);
  const [addReferenceValues, { loading: addLoading, error: addError, data: addData }] = useMutation(addReferenceValuesMutation);
  const [moveReferenceValue, { loading: moveLoading, error: moveError, data: moveData }] = useMutation(moveReferenceValueMutation);
  const onReferenceValueSimpleClick = (item) => {
    const { id, label, kind } = item;
    setSelection({ entries: [{ id, label, kind }] });
  };
  const onReferenceValueDoubleClick = (item) => {
    const { id, label, kind } = item;
    setSelection({ entries: [{ id, label, kind }] });
  };
  const clickHandler = useClickHandler(onReferenceValueSimpleClick, onReferenceValueDoubleClick);
  const { addErrorMessage, addMessages } = useMultiToast();
  (0, import_react.useEffect)(() => {
    if (!clearLoading) {
      if (clearError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (clearData) {
        const { clearReference: clearReference2 } = clearData;
        if (isErrorPayload(clearReference2) || isSuccessPayload(clearReference2)) {
          addMessages(clearReference2.messages);
        }
      }
    }
  }, [clearLoading, clearError, clearData]);
  (0, import_react.useEffect)(() => {
    if (!removeLoading) {
      if (removeError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (removeData) {
        const { removeReferenceValue: removeReferenceValue2 } = removeData;
        if (isErrorPayload(removeReferenceValue2) || isSuccessPayload(removeReferenceValue2)) {
          addMessages(removeReferenceValue2.messages);
        }
      }
    }
  }, [removeLoading, removeError, removeData]);
  (0, import_react.useEffect)(() => {
    if (!setLoading) {
      if (setError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (setData) {
        const { setReferenceValue: setReferenceValue2 } = setData;
        if (isErrorPayload(setReferenceValue2) || isSuccessPayload(setReferenceValue2)) {
          addMessages(setReferenceValue2.messages);
        }
      }
    }
  }, [setLoading, setError, setData]);
  (0, import_react.useEffect)(() => {
    if (!addLoading) {
      if (addError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (addData) {
        const { addReferenceValues: addReferenceValues2 } = addData;
        if (isErrorPayload(addReferenceValues2) || isSuccessPayload(addReferenceValues2)) {
          addMessages(addReferenceValues2.messages);
        }
      }
    }
  }, [addLoading, addError, addData]);
  (0, import_react.useEffect)(() => {
    if (!moveLoading) {
      if (moveError) {
        addErrorMessage("An unexpected error has occurred, please refresh the page");
      }
      if (moveData) {
        const { moveReferenceValue: moveReferenceValue2 } = moveData;
        if (isErrorPayload(moveReferenceValue2) || isSuccessPayload(moveReferenceValue2)) {
          addMessages(moveReferenceValue2.messages);
        }
      }
    }
  }, [moveLoading, moveError, moveData]);
  const callClearReference = () => {
    const variables = {
      input: {
        id: crypto.randomUUID(),
        editingContextId,
        representationId: formId,
        referenceWidgetId: widget.id
      }
    };
    if (widget.reference.containment) {
      showDeletionConfirmation(() => {
        clearReference({ variables });
      });
    } else {
      clearReference({ variables });
    }
  };
  const callSetReferenceValue = (newValueId) => {
    if (newValueId) {
      const variables = {
        input: {
          id: crypto.randomUUID(),
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id,
          newValueId
        }
      };
      setReferenceValue({ variables });
    }
  };
  const callAddReferenceValues = (newValueIds) => {
    if (newValueIds) {
      const variables = {
        input: {
          id: crypto.randomUUID(),
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id,
          newValueIds
        }
      };
      addReferenceValues({ variables });
    }
  };
  const callRemoveReferenceValue = (valueId) => {
    if (valueId) {
      const variables = {
        input: {
          id: crypto.randomUUID(),
          editingContextId,
          representationId: formId,
          referenceWidgetId: widget.id,
          referenceValueId: valueId
        }
      };
      if (widget.reference.containment) {
        showDeletionConfirmation(() => {
          removeReferenceValue({ variables });
        });
      } else {
        removeReferenceValue({ variables });
      }
    }
  };
  const callMoveReferenceValue = (valueId, fromIndex, toIndex) => {
    if (valueId && fromIndex !== -1 && toIndex !== -1) {
      if (valueId) {
        const variables = {
          input: {
            id: crypto.randomUUID(),
            editingContextId,
            representationId: formId,
            referenceWidgetId: widget.id,
            referenceValueId: valueId,
            fromIndex,
            toIndex
          }
        };
        moveReferenceValue({ variables });
      }
    }
  };
  const handleDragEnter = (event) => {
    event.preventDefault();
  };
  const handleDragOver = (event) => {
    event.preventDefault();
  };
  const handleDrop = (event) => {
    event.preventDefault();
    if (readOnly || widget.readOnly) {
      addErrorMessage("This widget is currently read-only");
    } else {
      const dragSourcesStringified = event.dataTransfer.getData(DRAG_SOURCES_TYPE);
      if (dragSourcesStringified) {
        const sources = JSON.parse(dragSourcesStringified);
        if (Array.isArray(sources) && sources.length > 0) {
          const entries = sources;
          const semanticElementIds = entries.filter((entry) => entry.kind.startsWith("siriusComponents://semantic?")).map((entry) => entry.id);
          if (widget.reference.manyValued) {
            callAddReferenceValues([...semanticElementIds]);
          } else {
            if (semanticElementIds.length > 1) {
              addErrorMessage("Single-valued reference can only accept a single value");
            } else {
              callSetReferenceValue(semanticElementIds[0] ?? null);
            }
          }
        }
      }
    }
  };
  const [modalDisplayed, setModalDisplayed] = (0, import_react.useState)(null);
  const onBrowse = () => {
    setModalDisplayed("browse");
  };
  const onCreate = () => {
    setModalDisplayed("create");
  };
  const setSelectedElement = (selectedElementId) => {
    setModalDisplayed(null);
    if (selectedElementId && selectedElementId.length > 0) {
      callSetReferenceValue(selectedElementId);
    }
  };
  const addNewElement = (selectedElementId) => {
    setModalDisplayed(null);
    if (selectedElementId) {
      if (widget.reference.manyValued) {
        callAddReferenceValues([selectedElementId]);
      } else {
        callSetReferenceValue(selectedElementId);
      }
    }
  };
  let modal = null;
  if (modalDisplayed === "browse") {
    modal = widget.reference.manyValued ? (0, import_jsx_runtime.jsx)(
      TransferModal,
      {
        editingContextId,
        formId,
        onClose: () => setModalDisplayed(null),
        addElements: callAddReferenceValues,
        removeElement: callRemoveReferenceValue,
        moveElement: callMoveReferenceValue,
        widget
      }
    ) : (0, import_jsx_runtime.jsx)(BrowseModal, { editingContextId, onClose: setSelectedElement, widget });
  } else if (modalDisplayed === "create") {
    modal = (0, import_jsx_runtime.jsx)(CreateModal, { editingContextId, onClose: addNewElement, widget, formId });
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsxs)("div", { className: classes.root, children: [
      (0, import_jsx_runtime.jsx)(
        PropertySectionLabel,
        {
          editingContextId,
          formId,
          widget,
          subscribers,
          "data-testid": widget.label + "_" + widget.reference.referenceKind
        }
      ),
      (0, import_jsx_runtime.jsx)(
        ValuedReferenceAutocomplete,
        {
          editingContextId,
          formId,
          widget,
          readOnly,
          onDragEnter: handleDragEnter,
          onDragOver: handleDragOver,
          onDrop: handleDrop,
          onMoreClick: onBrowse,
          onCreateClick: onCreate,
          optionClickHandler: clickHandler,
          clearReference: callClearReference,
          removeReferenceValue: callRemoveReferenceValue,
          addReferenceValues: callAddReferenceValues,
          setReferenceValue: callSetReferenceValue
        }
      )
    ] }),
    modal
  ] });
};
export {
  ReferenceIcon,
  ReferencePreview,
  ReferencePropertySection,
  addReferenceValuesMutation,
  clearReferenceMutation,
  moveReferenceValueMutation,
  removeReferenceValueMutation,
  setReferenceValueMutation
};
//# sourceMappingURL=@eclipse-sirius_sirius-components-widget-reference.js.map
